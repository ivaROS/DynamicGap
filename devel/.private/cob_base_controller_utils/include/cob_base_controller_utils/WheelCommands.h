// Generated by gencpp from file cob_base_controller_utils/WheelCommands.msg
// DO NOT EDIT!


#ifndef COB_BASE_CONTROLLER_UTILS_MESSAGE_WHEELCOMMANDS_H
#define COB_BASE_CONTROLLER_UTILS_MESSAGE_WHEELCOMMANDS_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace cob_base_controller_utils
{
template <class ContainerAllocator>
struct WheelCommands_
{
  typedef WheelCommands_<ContainerAllocator> Type;

  WheelCommands_()
    : header()
    , drive_target_velocity()
    , steer_target_velocity()
    , steer_target_position()
    , steer_target_error()  {
    }
  WheelCommands_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , drive_target_velocity(_alloc)
    , steer_target_velocity(_alloc)
    , steer_target_position(_alloc)
    , steer_target_error(_alloc)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef std::vector<double, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<double>> _drive_target_velocity_type;
  _drive_target_velocity_type drive_target_velocity;

   typedef std::vector<double, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<double>> _steer_target_velocity_type;
  _steer_target_velocity_type steer_target_velocity;

   typedef std::vector<double, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<double>> _steer_target_position_type;
  _steer_target_position_type steer_target_position;

   typedef std::vector<double, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<double>> _steer_target_error_type;
  _steer_target_error_type steer_target_error;





  typedef boost::shared_ptr< ::cob_base_controller_utils::WheelCommands_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::cob_base_controller_utils::WheelCommands_<ContainerAllocator> const> ConstPtr;

}; // struct WheelCommands_

typedef ::cob_base_controller_utils::WheelCommands_<std::allocator<void> > WheelCommands;

typedef boost::shared_ptr< ::cob_base_controller_utils::WheelCommands > WheelCommandsPtr;
typedef boost::shared_ptr< ::cob_base_controller_utils::WheelCommands const> WheelCommandsConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::cob_base_controller_utils::WheelCommands_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::cob_base_controller_utils::WheelCommands_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::cob_base_controller_utils::WheelCommands_<ContainerAllocator1> & lhs, const ::cob_base_controller_utils::WheelCommands_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.drive_target_velocity == rhs.drive_target_velocity &&
    lhs.steer_target_velocity == rhs.steer_target_velocity &&
    lhs.steer_target_position == rhs.steer_target_position &&
    lhs.steer_target_error == rhs.steer_target_error;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::cob_base_controller_utils::WheelCommands_<ContainerAllocator1> & lhs, const ::cob_base_controller_utils::WheelCommands_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace cob_base_controller_utils

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::cob_base_controller_utils::WheelCommands_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::cob_base_controller_utils::WheelCommands_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::cob_base_controller_utils::WheelCommands_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::cob_base_controller_utils::WheelCommands_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::cob_base_controller_utils::WheelCommands_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::cob_base_controller_utils::WheelCommands_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::cob_base_controller_utils::WheelCommands_<ContainerAllocator> >
{
  static const char* value()
  {
    return "77ff79ee11678be45d9ecbc2cb9d23dd";
  }

  static const char* value(const ::cob_base_controller_utils::WheelCommands_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x77ff79ee11678be4ULL;
  static const uint64_t static_value2 = 0x5d9ecbc2cb9d23ddULL;
};

template<class ContainerAllocator>
struct DataType< ::cob_base_controller_utils::WheelCommands_<ContainerAllocator> >
{
  static const char* value()
  {
    return "cob_base_controller_utils/WheelCommands";
  }

  static const char* value(const ::cob_base_controller_utils::WheelCommands_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::cob_base_controller_utils::WheelCommands_<ContainerAllocator> >
{
  static const char* value()
  {
    return "std_msgs/Header header\n"
"float64[] drive_target_velocity\n"
"float64[] steer_target_velocity\n"
"float64[] steer_target_position\n"
"float64[] steer_target_error\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
;
  }

  static const char* value(const ::cob_base_controller_utils::WheelCommands_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::cob_base_controller_utils::WheelCommands_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.drive_target_velocity);
      stream.next(m.steer_target_velocity);
      stream.next(m.steer_target_position);
      stream.next(m.steer_target_error);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct WheelCommands_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::cob_base_controller_utils::WheelCommands_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::cob_base_controller_utils::WheelCommands_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "drive_target_velocity[]" << std::endl;
    for (size_t i = 0; i < v.drive_target_velocity.size(); ++i)
    {
      s << indent << "  drive_target_velocity[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.drive_target_velocity[i]);
    }
    s << indent << "steer_target_velocity[]" << std::endl;
    for (size_t i = 0; i < v.steer_target_velocity.size(); ++i)
    {
      s << indent << "  steer_target_velocity[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.steer_target_velocity[i]);
    }
    s << indent << "steer_target_position[]" << std::endl;
    for (size_t i = 0; i < v.steer_target_position.size(); ++i)
    {
      s << indent << "  steer_target_position[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.steer_target_position[i]);
    }
    s << indent << "steer_target_error[]" << std::endl;
    for (size_t i = 0; i < v.steer_target_error.size(); ++i)
    {
      s << indent << "  steer_target_error[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.steer_target_error[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // COB_BASE_CONTROLLER_UTILS_MESSAGE_WHEELCOMMANDS_H
