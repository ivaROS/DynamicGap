// Generated by gencpp from file flatland_msgs/StepWorld.msg
// DO NOT EDIT!


#ifndef FLATLAND_MSGS_MESSAGE_STEPWORLD_H
#define FLATLAND_MSGS_MESSAGE_STEPWORLD_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace flatland_msgs
{
template <class ContainerAllocator>
struct StepWorld_
{
  typedef StepWorld_<ContainerAllocator> Type;

  StepWorld_()
    : required_time(0.0)  {
    }
  StepWorld_(const ContainerAllocator& _alloc)
    : required_time(0.0)  {
  (void)_alloc;
    }



   typedef float _required_time_type;
  _required_time_type required_time;





  typedef boost::shared_ptr< ::flatland_msgs::StepWorld_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::flatland_msgs::StepWorld_<ContainerAllocator> const> ConstPtr;

}; // struct StepWorld_

typedef ::flatland_msgs::StepWorld_<std::allocator<void> > StepWorld;

typedef boost::shared_ptr< ::flatland_msgs::StepWorld > StepWorldPtr;
typedef boost::shared_ptr< ::flatland_msgs::StepWorld const> StepWorldConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::flatland_msgs::StepWorld_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::flatland_msgs::StepWorld_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::flatland_msgs::StepWorld_<ContainerAllocator1> & lhs, const ::flatland_msgs::StepWorld_<ContainerAllocator2> & rhs)
{
  return lhs.required_time == rhs.required_time;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::flatland_msgs::StepWorld_<ContainerAllocator1> & lhs, const ::flatland_msgs::StepWorld_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace flatland_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::flatland_msgs::StepWorld_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::flatland_msgs::StepWorld_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::flatland_msgs::StepWorld_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::flatland_msgs::StepWorld_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::flatland_msgs::StepWorld_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::flatland_msgs::StepWorld_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::flatland_msgs::StepWorld_<ContainerAllocator> >
{
  static const char* value()
  {
    return "db98664cbe4523fcf94ecdf73a95fa46";
  }

  static const char* value(const ::flatland_msgs::StepWorld_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xdb98664cbe4523fcULL;
  static const uint64_t static_value2 = 0xf94ecdf73a95fa46ULL;
};

template<class ContainerAllocator>
struct DataType< ::flatland_msgs::StepWorld_<ContainerAllocator> >
{
  static const char* value()
  {
    return "flatland_msgs/StepWorld";
  }

  static const char* value(const ::flatland_msgs::StepWorld_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::flatland_msgs::StepWorld_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float32 required_time\n"
;
  }

  static const char* value(const ::flatland_msgs::StepWorld_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::flatland_msgs::StepWorld_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.required_time);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct StepWorld_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::flatland_msgs::StepWorld_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::flatland_msgs::StepWorld_<ContainerAllocator>& v)
  {
    s << indent << "required_time: ";
    Printer<float>::stream(s, indent + "  ", v.required_time);
  }
};

} // namespace message_operations
} // namespace ros

#endif // FLATLAND_MSGS_MESSAGE_STEPWORLD_H
