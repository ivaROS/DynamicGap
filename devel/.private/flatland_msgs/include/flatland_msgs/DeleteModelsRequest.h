// Generated by gencpp from file flatland_msgs/DeleteModelsRequest.msg
// DO NOT EDIT!


#ifndef FLATLAND_MSGS_MESSAGE_DELETEMODELSREQUEST_H
#define FLATLAND_MSGS_MESSAGE_DELETEMODELSREQUEST_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace flatland_msgs
{
template <class ContainerAllocator>
struct DeleteModelsRequest_
{
  typedef DeleteModelsRequest_<ContainerAllocator> Type;

  DeleteModelsRequest_()
    : name()  {
    }
  DeleteModelsRequest_(const ContainerAllocator& _alloc)
    : name(_alloc)  {
  (void)_alloc;
    }



   typedef std::vector<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>> _name_type;
  _name_type name;





  typedef boost::shared_ptr< ::flatland_msgs::DeleteModelsRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::flatland_msgs::DeleteModelsRequest_<ContainerAllocator> const> ConstPtr;

}; // struct DeleteModelsRequest_

typedef ::flatland_msgs::DeleteModelsRequest_<std::allocator<void> > DeleteModelsRequest;

typedef boost::shared_ptr< ::flatland_msgs::DeleteModelsRequest > DeleteModelsRequestPtr;
typedef boost::shared_ptr< ::flatland_msgs::DeleteModelsRequest const> DeleteModelsRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::flatland_msgs::DeleteModelsRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::flatland_msgs::DeleteModelsRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::flatland_msgs::DeleteModelsRequest_<ContainerAllocator1> & lhs, const ::flatland_msgs::DeleteModelsRequest_<ContainerAllocator2> & rhs)
{
  return lhs.name == rhs.name;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::flatland_msgs::DeleteModelsRequest_<ContainerAllocator1> & lhs, const ::flatland_msgs::DeleteModelsRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace flatland_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::flatland_msgs::DeleteModelsRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::flatland_msgs::DeleteModelsRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::flatland_msgs::DeleteModelsRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::flatland_msgs::DeleteModelsRequest_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::flatland_msgs::DeleteModelsRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::flatland_msgs::DeleteModelsRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::flatland_msgs::DeleteModelsRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "3f2d21c30868b92dc41a0431bacd47b2";
  }

  static const char* value(const ::flatland_msgs::DeleteModelsRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x3f2d21c30868b92dULL;
  static const uint64_t static_value2 = 0xc41a0431bacd47b2ULL;
};

template<class ContainerAllocator>
struct DataType< ::flatland_msgs::DeleteModelsRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "flatland_msgs/DeleteModelsRequest";
  }

  static const char* value(const ::flatland_msgs::DeleteModelsRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::flatland_msgs::DeleteModelsRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string[] name\n"
;
  }

  static const char* value(const ::flatland_msgs::DeleteModelsRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::flatland_msgs::DeleteModelsRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.name);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct DeleteModelsRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::flatland_msgs::DeleteModelsRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::flatland_msgs::DeleteModelsRequest_<ContainerAllocator>& v)
  {
    s << indent << "name[]" << std::endl;
    for (size_t i = 0; i < v.name.size(); ++i)
    {
      s << indent << "  name[" << i << "]: ";
      Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.name[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // FLATLAND_MSGS_MESSAGE_DELETEMODELSREQUEST_H
