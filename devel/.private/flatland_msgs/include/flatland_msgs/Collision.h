// Generated by gencpp from file flatland_msgs/Collision.msg
// DO NOT EDIT!


#ifndef FLATLAND_MSGS_MESSAGE_COLLISION_H
#define FLATLAND_MSGS_MESSAGE_COLLISION_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <flatland_msgs/Vector2.h>
#include <flatland_msgs/Vector2.h>

namespace flatland_msgs
{
template <class ContainerAllocator>
struct Collision_
{
  typedef Collision_<ContainerAllocator> Type;

  Collision_()
    : entity_A()
    , body_A()
    , entity_B()
    , body_B()
    , magnitude_forces()
    , contact_positions()
    , contact_normals()  {
    }
  Collision_(const ContainerAllocator& _alloc)
    : entity_A(_alloc)
    , body_A(_alloc)
    , entity_B(_alloc)
    , body_B(_alloc)
    , magnitude_forces(_alloc)
    , contact_positions(_alloc)
    , contact_normals(_alloc)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _entity_A_type;
  _entity_A_type entity_A;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _body_A_type;
  _body_A_type body_A;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _entity_B_type;
  _entity_B_type entity_B;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _body_B_type;
  _body_B_type body_B;

   typedef std::vector<double, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<double>> _magnitude_forces_type;
  _magnitude_forces_type magnitude_forces;

   typedef std::vector< ::flatland_msgs::Vector2_<ContainerAllocator> , typename std::allocator_traits<ContainerAllocator>::template rebind_alloc< ::flatland_msgs::Vector2_<ContainerAllocator> >> _contact_positions_type;
  _contact_positions_type contact_positions;

   typedef std::vector< ::flatland_msgs::Vector2_<ContainerAllocator> , typename std::allocator_traits<ContainerAllocator>::template rebind_alloc< ::flatland_msgs::Vector2_<ContainerAllocator> >> _contact_normals_type;
  _contact_normals_type contact_normals;





  typedef boost::shared_ptr< ::flatland_msgs::Collision_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::flatland_msgs::Collision_<ContainerAllocator> const> ConstPtr;

}; // struct Collision_

typedef ::flatland_msgs::Collision_<std::allocator<void> > Collision;

typedef boost::shared_ptr< ::flatland_msgs::Collision > CollisionPtr;
typedef boost::shared_ptr< ::flatland_msgs::Collision const> CollisionConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::flatland_msgs::Collision_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::flatland_msgs::Collision_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::flatland_msgs::Collision_<ContainerAllocator1> & lhs, const ::flatland_msgs::Collision_<ContainerAllocator2> & rhs)
{
  return lhs.entity_A == rhs.entity_A &&
    lhs.body_A == rhs.body_A &&
    lhs.entity_B == rhs.entity_B &&
    lhs.body_B == rhs.body_B &&
    lhs.magnitude_forces == rhs.magnitude_forces &&
    lhs.contact_positions == rhs.contact_positions &&
    lhs.contact_normals == rhs.contact_normals;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::flatland_msgs::Collision_<ContainerAllocator1> & lhs, const ::flatland_msgs::Collision_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace flatland_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::flatland_msgs::Collision_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::flatland_msgs::Collision_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::flatland_msgs::Collision_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::flatland_msgs::Collision_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::flatland_msgs::Collision_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::flatland_msgs::Collision_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::flatland_msgs::Collision_<ContainerAllocator> >
{
  static const char* value()
  {
    return "e6959bf91b31e42582e1328efe4e2953";
  }

  static const char* value(const ::flatland_msgs::Collision_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xe6959bf91b31e425ULL;
  static const uint64_t static_value2 = 0x82e1328efe4e2953ULL;
};

template<class ContainerAllocator>
struct DataType< ::flatland_msgs::Collision_<ContainerAllocator> >
{
  static const char* value()
  {
    return "flatland_msgs/Collision";
  }

  static const char* value(const ::flatland_msgs::Collision_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::flatland_msgs::Collision_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string entity_A\n"
"string body_A\n"
"string entity_B\n"
"string body_B\n"
"float64[] magnitude_forces\n"
"Vector2[] contact_positions\n"
"Vector2[] contact_normals\n"
"================================================================================\n"
"MSG: flatland_msgs/Vector2\n"
"float64 x\n"
"float64 y\n"
;
  }

  static const char* value(const ::flatland_msgs::Collision_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::flatland_msgs::Collision_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.entity_A);
      stream.next(m.body_A);
      stream.next(m.entity_B);
      stream.next(m.body_B);
      stream.next(m.magnitude_forces);
      stream.next(m.contact_positions);
      stream.next(m.contact_normals);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Collision_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::flatland_msgs::Collision_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::flatland_msgs::Collision_<ContainerAllocator>& v)
  {
    s << indent << "entity_A: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.entity_A);
    s << indent << "body_A: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.body_A);
    s << indent << "entity_B: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.entity_B);
    s << indent << "body_B: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.body_B);
    s << indent << "magnitude_forces[]" << std::endl;
    for (size_t i = 0; i < v.magnitude_forces.size(); ++i)
    {
      s << indent << "  magnitude_forces[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.magnitude_forces[i]);
    }
    s << indent << "contact_positions[]" << std::endl;
    for (size_t i = 0; i < v.contact_positions.size(); ++i)
    {
      s << indent << "  contact_positions[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::flatland_msgs::Vector2_<ContainerAllocator> >::stream(s, indent + "    ", v.contact_positions[i]);
    }
    s << indent << "contact_normals[]" << std::endl;
    for (size_t i = 0; i < v.contact_normals.size(); ++i)
    {
      s << indent << "  contact_normals[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::flatland_msgs::Vector2_<ContainerAllocator> >::stream(s, indent + "    ", v.contact_normals[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // FLATLAND_MSGS_MESSAGE_COLLISION_H
