# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from flatland_msgs/Collision.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import flatland_msgs.msg

class Collision(genpy.Message):
  _md5sum = "e6959bf91b31e42582e1328efe4e2953"
  _type = "flatland_msgs/Collision"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """string entity_A
string body_A
string entity_B
string body_B
float64[] magnitude_forces
Vector2[] contact_positions
Vector2[] contact_normals
================================================================================
MSG: flatland_msgs/Vector2
float64 x
float64 y"""
  __slots__ = ['entity_A','body_A','entity_B','body_B','magnitude_forces','contact_positions','contact_normals']
  _slot_types = ['string','string','string','string','float64[]','flatland_msgs/Vector2[]','flatland_msgs/Vector2[]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       entity_A,body_A,entity_B,body_B,magnitude_forces,contact_positions,contact_normals

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(Collision, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.entity_A is None:
        self.entity_A = ''
      if self.body_A is None:
        self.body_A = ''
      if self.entity_B is None:
        self.entity_B = ''
      if self.body_B is None:
        self.body_B = ''
      if self.magnitude_forces is None:
        self.magnitude_forces = []
      if self.contact_positions is None:
        self.contact_positions = []
      if self.contact_normals is None:
        self.contact_normals = []
    else:
      self.entity_A = ''
      self.body_A = ''
      self.entity_B = ''
      self.body_B = ''
      self.magnitude_forces = []
      self.contact_positions = []
      self.contact_normals = []

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self.entity_A
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.body_A
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.entity_B
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.body_B
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      length = len(self.magnitude_forces)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.Struct(pattern).pack(*self.magnitude_forces))
      length = len(self.contact_positions)
      buff.write(_struct_I.pack(length))
      for val1 in self.contact_positions:
        _x = val1
        buff.write(_get_struct_2d().pack(_x.x, _x.y))
      length = len(self.contact_normals)
      buff.write(_struct_I.pack(length))
      for val1 in self.contact_normals:
        _x = val1
        buff.write(_get_struct_2d().pack(_x.x, _x.y))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.contact_positions is None:
        self.contact_positions = None
      if self.contact_normals is None:
        self.contact_normals = None
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.entity_A = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.entity_A = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.body_A = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.body_A = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.entity_B = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.entity_B = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.body_B = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.body_B = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.magnitude_forces = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.contact_positions = []
      for i in range(0, length):
        val1 = flatland_msgs.msg.Vector2()
        _x = val1
        start = end
        end += 16
        (_x.x, _x.y,) = _get_struct_2d().unpack(str[start:end])
        self.contact_positions.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.contact_normals = []
      for i in range(0, length):
        val1 = flatland_msgs.msg.Vector2()
        _x = val1
        start = end
        end += 16
        (_x.x, _x.y,) = _get_struct_2d().unpack(str[start:end])
        self.contact_normals.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self.entity_A
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.body_A
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.entity_B
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.body_B
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      length = len(self.magnitude_forces)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.magnitude_forces.tostring())
      length = len(self.contact_positions)
      buff.write(_struct_I.pack(length))
      for val1 in self.contact_positions:
        _x = val1
        buff.write(_get_struct_2d().pack(_x.x, _x.y))
      length = len(self.contact_normals)
      buff.write(_struct_I.pack(length))
      for val1 in self.contact_normals:
        _x = val1
        buff.write(_get_struct_2d().pack(_x.x, _x.y))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.contact_positions is None:
        self.contact_positions = None
      if self.contact_normals is None:
        self.contact_normals = None
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.entity_A = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.entity_A = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.body_A = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.body_A = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.entity_B = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.entity_B = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.body_B = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.body_B = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.magnitude_forces = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.contact_positions = []
      for i in range(0, length):
        val1 = flatland_msgs.msg.Vector2()
        _x = val1
        start = end
        end += 16
        (_x.x, _x.y,) = _get_struct_2d().unpack(str[start:end])
        self.contact_positions.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.contact_normals = []
      for i in range(0, length):
        val1 = flatland_msgs.msg.Vector2()
        _x = val1
        start = end
        end += 16
        (_x.x, _x.y,) = _get_struct_2d().unpack(str[start:end])
        self.contact_normals.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2d = None
def _get_struct_2d():
    global _struct_2d
    if _struct_2d is None:
        _struct_2d = struct.Struct("<2d")
    return _struct_2d
