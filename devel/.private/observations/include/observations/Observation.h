// Generated by gencpp from file observations/Observation.msg
// DO NOT EDIT!


#ifndef OBSERVATIONS_MESSAGE_OBSERVATION_H
#define OBSERVATIONS_MESSAGE_OBSERVATION_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace observations
{
template <class ContainerAllocator>
struct Observation_
{
  typedef Observation_<ContainerAllocator> Type;

  Observation_()
    : observation()  {
      observation.assign(0.0);
  }
  Observation_(const ContainerAllocator& _alloc)
    : observation()  {
  (void)_alloc;
      observation.assign(0.0);
  }



   typedef boost::array<float, 362>  _observation_type;
  _observation_type observation;





  typedef boost::shared_ptr< ::observations::Observation_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::observations::Observation_<ContainerAllocator> const> ConstPtr;

}; // struct Observation_

typedef ::observations::Observation_<std::allocator<void> > Observation;

typedef boost::shared_ptr< ::observations::Observation > ObservationPtr;
typedef boost::shared_ptr< ::observations::Observation const> ObservationConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::observations::Observation_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::observations::Observation_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::observations::Observation_<ContainerAllocator1> & lhs, const ::observations::Observation_<ContainerAllocator2> & rhs)
{
  return lhs.observation == rhs.observation;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::observations::Observation_<ContainerAllocator1> & lhs, const ::observations::Observation_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace observations

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::observations::Observation_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::observations::Observation_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::observations::Observation_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::observations::Observation_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::observations::Observation_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::observations::Observation_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::observations::Observation_<ContainerAllocator> >
{
  static const char* value()
  {
    return "7f736eba6ff4f01375d960ed884fae68";
  }

  static const char* value(const ::observations::Observation_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x7f736eba6ff4f013ULL;
  static const uint64_t static_value2 = 0x75d960ed884fae68ULL;
};

template<class ContainerAllocator>
struct DataType< ::observations::Observation_<ContainerAllocator> >
{
  static const char* value()
  {
    return "observations/Observation";
  }

  static const char* value(const ::observations::Observation_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::observations::Observation_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float32[362] observation\n"
;
  }

  static const char* value(const ::observations::Observation_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::observations::Observation_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.observation);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Observation_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::observations::Observation_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::observations::Observation_<ContainerAllocator>& v)
  {
    s << indent << "observation[]" << std::endl;
    for (size_t i = 0; i < v.observation.size(); ++i)
    {
      s << indent << "  observation[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.observation[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // OBSERVATIONS_MESSAGE_OBSERVATION_H
