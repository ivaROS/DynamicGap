//#line 2 "/opt/ros/noetic/share/dynamic_reconfigure/cmake/../templates/ConfigType.h.template"
// *********************************************************
//
// File autogenerated for the task_generator package
// by the dynamic_reconfigure package.
// Please do not edit.
//
// ********************************************************/

#ifndef __task_generator__TASKGENERATORCONFIG_H__
#define __task_generator__TASKGENERATORCONFIG_H__

#if __cplusplus >= 201103L
#define DYNAMIC_RECONFIGURE_FINAL final
#else
#define DYNAMIC_RECONFIGURE_FINAL
#endif

#include <dynamic_reconfigure/config_tools.h>
#include <limits>
#include <ros/node_handle.h>
#include <dynamic_reconfigure/ConfigDescription.h>
#include <dynamic_reconfigure/ParamDescription.h>
#include <dynamic_reconfigure/Group.h>
#include <dynamic_reconfigure/config_init_mutex.h>
#include <boost/any.hpp>

namespace task_generator
{
  class TaskGeneratorConfigStatics;

  class TaskGeneratorConfig
  {
  public:
    class AbstractParamDescription : public dynamic_reconfigure::ParamDescription
    {
    public:
      AbstractParamDescription(std::string n, std::string t, uint32_t l,
          std::string d, std::string e)
      {
        name = n;
        type = t;
        level = l;
        description = d;
        edit_method = e;
      }
      virtual ~AbstractParamDescription() = default;

      virtual void clamp(TaskGeneratorConfig &config, const TaskGeneratorConfig &max, const TaskGeneratorConfig &min) const = 0;
      virtual void calcLevel(uint32_t &level, const TaskGeneratorConfig &config1, const TaskGeneratorConfig &config2) const = 0;
      virtual void fromServer(const ros::NodeHandle &nh, TaskGeneratorConfig &config) const = 0;
      virtual void toServer(const ros::NodeHandle &nh, const TaskGeneratorConfig &config) const = 0;
      virtual bool fromMessage(const dynamic_reconfigure::Config &msg, TaskGeneratorConfig &config) const = 0;
      virtual void toMessage(dynamic_reconfigure::Config &msg, const TaskGeneratorConfig &config) const = 0;
      virtual void getValue(const TaskGeneratorConfig &config, boost::any &val) const = 0;
    };

    typedef boost::shared_ptr<AbstractParamDescription> AbstractParamDescriptionPtr;
    typedef boost::shared_ptr<const AbstractParamDescription> AbstractParamDescriptionConstPtr;

    // Final keyword added to class because it has virtual methods and inherits
    // from a class with a non-virtual destructor.
    template <class T>
    class ParamDescription DYNAMIC_RECONFIGURE_FINAL : public AbstractParamDescription
    {
    public:
      ParamDescription(std::string a_name, std::string a_type, uint32_t a_level,
          std::string a_description, std::string a_edit_method, T TaskGeneratorConfig::* a_f) :
        AbstractParamDescription(a_name, a_type, a_level, a_description, a_edit_method),
        field(a_f)
      {}

      T TaskGeneratorConfig::* field;

      virtual void clamp(TaskGeneratorConfig &config, const TaskGeneratorConfig &max, const TaskGeneratorConfig &min) const override
      {
        if (config.*field > max.*field)
          config.*field = max.*field;

        if (config.*field < min.*field)
          config.*field = min.*field;
      }

      virtual void calcLevel(uint32_t &comb_level, const TaskGeneratorConfig &config1, const TaskGeneratorConfig &config2) const override
      {
        if (config1.*field != config2.*field)
          comb_level |= level;
      }

      virtual void fromServer(const ros::NodeHandle &nh, TaskGeneratorConfig &config) const override
      {
        nh.getParam(name, config.*field);
      }

      virtual void toServer(const ros::NodeHandle &nh, const TaskGeneratorConfig &config) const override
      {
        nh.setParam(name, config.*field);
      }

      virtual bool fromMessage(const dynamic_reconfigure::Config &msg, TaskGeneratorConfig &config) const override
      {
        return dynamic_reconfigure::ConfigTools::getParameter(msg, name, config.*field);
      }

      virtual void toMessage(dynamic_reconfigure::Config &msg, const TaskGeneratorConfig &config) const override
      {
        dynamic_reconfigure::ConfigTools::appendParameter(msg, name, config.*field);
      }

      virtual void getValue(const TaskGeneratorConfig &config, boost::any &val) const override
      {
        val = config.*field;
      }
    };

    class AbstractGroupDescription : public dynamic_reconfigure::Group
    {
      public:
      AbstractGroupDescription(std::string n, std::string t, int p, int i, bool s)
      {
        name = n;
        type = t;
        parent = p;
        state = s;
        id = i;
      }

      virtual ~AbstractGroupDescription() = default;

      std::vector<AbstractParamDescriptionConstPtr> abstract_parameters;
      bool state;

      virtual void toMessage(dynamic_reconfigure::Config &msg, const boost::any &config) const = 0;
      virtual bool fromMessage(const dynamic_reconfigure::Config &msg, boost::any &config) const =0;
      virtual void updateParams(boost::any &cfg, TaskGeneratorConfig &top) const= 0;
      virtual void setInitialState(boost::any &cfg) const = 0;


      void convertParams()
      {
        for(std::vector<AbstractParamDescriptionConstPtr>::const_iterator i = abstract_parameters.begin(); i != abstract_parameters.end(); ++i)
        {
          parameters.push_back(dynamic_reconfigure::ParamDescription(**i));
        }
      }
    };

    typedef boost::shared_ptr<AbstractGroupDescription> AbstractGroupDescriptionPtr;
    typedef boost::shared_ptr<const AbstractGroupDescription> AbstractGroupDescriptionConstPtr;

    // Final keyword added to class because it has virtual methods and inherits
    // from a class with a non-virtual destructor.
    template<class T, class PT>
    class GroupDescription DYNAMIC_RECONFIGURE_FINAL : public AbstractGroupDescription
    {
    public:
      GroupDescription(std::string a_name, std::string a_type, int a_parent, int a_id, bool a_s, T PT::* a_f) : AbstractGroupDescription(a_name, a_type, a_parent, a_id, a_s), field(a_f)
      {
      }

      GroupDescription(const GroupDescription<T, PT>& g): AbstractGroupDescription(g.name, g.type, g.parent, g.id, g.state), field(g.field), groups(g.groups)
      {
        parameters = g.parameters;
        abstract_parameters = g.abstract_parameters;
      }

      virtual bool fromMessage(const dynamic_reconfigure::Config &msg, boost::any &cfg) const override
      {
        PT* config = boost::any_cast<PT*>(cfg);
        if(!dynamic_reconfigure::ConfigTools::getGroupState(msg, name, (*config).*field))
          return false;

        for(std::vector<AbstractGroupDescriptionConstPtr>::const_iterator i = groups.begin(); i != groups.end(); ++i)
        {
          boost::any n = &((*config).*field);
          if(!(*i)->fromMessage(msg, n))
            return false;
        }

        return true;
      }

      virtual void setInitialState(boost::any &cfg) const override
      {
        PT* config = boost::any_cast<PT*>(cfg);
        T* group = &((*config).*field);
        group->state = state;

        for(std::vector<AbstractGroupDescriptionConstPtr>::const_iterator i = groups.begin(); i != groups.end(); ++i)
        {
          boost::any n = boost::any(&((*config).*field));
          (*i)->setInitialState(n);
        }

      }

      virtual void updateParams(boost::any &cfg, TaskGeneratorConfig &top) const override
      {
        PT* config = boost::any_cast<PT*>(cfg);

        T* f = &((*config).*field);
        f->setParams(top, abstract_parameters);

        for(std::vector<AbstractGroupDescriptionConstPtr>::const_iterator i = groups.begin(); i != groups.end(); ++i)
        {
          boost::any n = &((*config).*field);
          (*i)->updateParams(n, top);
        }
      }

      virtual void toMessage(dynamic_reconfigure::Config &msg, const boost::any &cfg) const override
      {
        const PT config = boost::any_cast<PT>(cfg);
        dynamic_reconfigure::ConfigTools::appendGroup<T>(msg, name, id, parent, config.*field);

        for(std::vector<AbstractGroupDescriptionConstPtr>::const_iterator i = groups.begin(); i != groups.end(); ++i)
        {
          (*i)->toMessage(msg, config.*field);
        }
      }

      T PT::* field;
      std::vector<TaskGeneratorConfig::AbstractGroupDescriptionConstPtr> groups;
    };

class DEFAULT
{
  public:
    DEFAULT()
    {
      state = true;
      name = "Default";
    }

    void setParams(TaskGeneratorConfig &config, const std::vector<AbstractParamDescriptionConstPtr> params)
    {
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator _i = params.begin(); _i != params.end(); ++_i)
      {
        boost::any val;
        (*_i)->getValue(config, val);

        if("timeout"==(*_i)->name){timeout = boost::any_cast<double>(val);}
        if("episodes"==(*_i)->name){episodes = boost::any_cast<int>(val);}
        if("goal_radius"==(*_i)->name){goal_radius = boost::any_cast<double>(val);}
        if("goal_tolerance_angle"==(*_i)->name){goal_tolerance_angle = boost::any_cast<double>(val);}
      }
    }

    double timeout;
int episodes;
double goal_radius;
double goal_tolerance_angle;

    bool state;
    std::string name;

    class SCENARIO
{
  public:
    SCENARIO()
    {
      state = true;
      name = "SCENARIO";
    }

    void setParams(TaskGeneratorConfig &config, const std::vector<AbstractParamDescriptionConstPtr> params)
    {
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator _i = params.begin(); _i != params.end(); ++_i)
      {
        boost::any val;
        (*_i)->getValue(config, val);

        if("SCENARIO_file"==(*_i)->name){SCENARIO_file = boost::any_cast<std::string>(val);}
      }
    }

    std::string SCENARIO_file;

    bool state;
    std::string name;

    
}scenario;

class PARAMETRIZED
{
  public:
    PARAMETRIZED()
    {
      state = true;
      name = "PARAMETRIZED";
    }

    void setParams(TaskGeneratorConfig &config, const std::vector<AbstractParamDescriptionConstPtr> params)
    {
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator _i = params.begin(); _i != params.end(); ++_i)
      {
        boost::any val;
        (*_i)->getValue(config, val);

        if("PARAMETRIZED_file"==(*_i)->name){PARAMETRIZED_file = boost::any_cast<std::string>(val);}
      }
    }

    std::string PARAMETRIZED_file;

    bool state;
    std::string name;

    
}parametrized;

class STAGED
{
  public:
    STAGED()
    {
      state = true;
      name = "STAGED";
    }

    void setParams(TaskGeneratorConfig &config, const std::vector<AbstractParamDescriptionConstPtr> params)
    {
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator _i = params.begin(); _i != params.end(); ++_i)
      {
        boost::any val;
        (*_i)->getValue(config, val);

        if("STAGED_curriculum"==(*_i)->name){STAGED_curriculum = boost::any_cast<std::string>(val);}
        if("STAGED_index"==(*_i)->name){STAGED_index = boost::any_cast<int>(val);}
      }
    }

    std::string STAGED_curriculum;
int STAGED_index;

    bool state;
    std::string name;

    
}staged;

class DYNAMICMAP
{
  public:
    DYNAMICMAP()
    {
      state = true;
      name = "DYNAMICMAP";
    }

    void setParams(TaskGeneratorConfig &config, const std::vector<AbstractParamDescriptionConstPtr> params)
    {
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator _i = params.begin(); _i != params.end(); ++_i)
      {
        boost::any val;
        (*_i)->getValue(config, val);


      }
    }

    

    bool state;
    std::string name;

    
}dynamicmap;

class RANDOM
{
  public:
    RANDOM()
    {
      state = true;
      name = "RANDOM";
    }

    void setParams(TaskGeneratorConfig &config, const std::vector<AbstractParamDescriptionConstPtr> params)
    {
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator _i = params.begin(); _i != params.end(); ++_i)
      {
        boost::any val;
        (*_i)->getValue(config, val);

        if("RANDOM_static_min"==(*_i)->name){RANDOM_static_min = boost::any_cast<int>(val);}
        if("RANDOM_static_max"==(*_i)->name){RANDOM_static_max = boost::any_cast<int>(val);}
        if("RANDOM_static_models"==(*_i)->name){RANDOM_static_models = boost::any_cast<std::string>(val);}
        if("RANDOM_interactive_min"==(*_i)->name){RANDOM_interactive_min = boost::any_cast<int>(val);}
        if("RANDOM_interactive_max"==(*_i)->name){RANDOM_interactive_max = boost::any_cast<int>(val);}
        if("RANDOM_interactive_models"==(*_i)->name){RANDOM_interactive_models = boost::any_cast<std::string>(val);}
        if("RANDOM_dynamic_min"==(*_i)->name){RANDOM_dynamic_min = boost::any_cast<int>(val);}
        if("RANDOM_dynamic_max"==(*_i)->name){RANDOM_dynamic_max = boost::any_cast<int>(val);}
        if("RANDOM_dynamic_models"==(*_i)->name){RANDOM_dynamic_models = boost::any_cast<std::string>(val);}
        if("RANDOM_seed"==(*_i)->name){RANDOM_seed = boost::any_cast<int>(val);}
      }
    }

    int RANDOM_static_min;
int RANDOM_static_max;
std::string RANDOM_static_models;
int RANDOM_interactive_min;
int RANDOM_interactive_max;
std::string RANDOM_interactive_models;
int RANDOM_dynamic_min;
int RANDOM_dynamic_max;
std::string RANDOM_dynamic_models;
int RANDOM_seed;

    bool state;
    std::string name;

    
}random;

}groups;



//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      double timeout;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      int episodes;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      double goal_radius;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      double goal_tolerance_angle;
//#line 31 "/home/az/arena_ws/src/arena/arena-rosnav/task_generator/cfg/TaskGenerator.cfg"
      std::string SCENARIO_file;
//#line 34 "/home/az/arena_ws/src/arena/arena-rosnav/task_generator/cfg/TaskGenerator.cfg"
      std::string PARAMETRIZED_file;
//#line 37 "/home/az/arena_ws/src/arena/arena-rosnav/task_generator/cfg/TaskGenerator.cfg"
      std::string STAGED_curriculum;
//#line 38 "/home/az/arena_ws/src/arena/arena-rosnav/task_generator/cfg/TaskGenerator.cfg"
      int STAGED_index;
//#line 44 "/home/az/arena_ws/src/arena/arena-rosnav/task_generator/cfg/TaskGenerator.cfg"
      int RANDOM_static_min;
//#line 45 "/home/az/arena_ws/src/arena/arena-rosnav/task_generator/cfg/TaskGenerator.cfg"
      int RANDOM_static_max;
//#line 46 "/home/az/arena_ws/src/arena/arena-rosnav/task_generator/cfg/TaskGenerator.cfg"
      std::string RANDOM_static_models;
//#line 44 "/home/az/arena_ws/src/arena/arena-rosnav/task_generator/cfg/TaskGenerator.cfg"
      int RANDOM_interactive_min;
//#line 45 "/home/az/arena_ws/src/arena/arena-rosnav/task_generator/cfg/TaskGenerator.cfg"
      int RANDOM_interactive_max;
//#line 46 "/home/az/arena_ws/src/arena/arena-rosnav/task_generator/cfg/TaskGenerator.cfg"
      std::string RANDOM_interactive_models;
//#line 44 "/home/az/arena_ws/src/arena/arena-rosnav/task_generator/cfg/TaskGenerator.cfg"
      int RANDOM_dynamic_min;
//#line 45 "/home/az/arena_ws/src/arena/arena-rosnav/task_generator/cfg/TaskGenerator.cfg"
      int RANDOM_dynamic_max;
//#line 46 "/home/az/arena_ws/src/arena/arena-rosnav/task_generator/cfg/TaskGenerator.cfg"
      std::string RANDOM_dynamic_models;
//#line 47 "/home/az/arena_ws/src/arena/arena-rosnav/task_generator/cfg/TaskGenerator.cfg"
      int RANDOM_seed;
//#line 231 "/opt/ros/noetic/share/dynamic_reconfigure/cmake/../templates/ConfigType.h.template"

    bool __fromMessage__(dynamic_reconfigure::Config &msg)
    {
      const std::vector<AbstractParamDescriptionConstPtr> &__param_descriptions__ = __getParamDescriptions__();
      const std::vector<AbstractGroupDescriptionConstPtr> &__group_descriptions__ = __getGroupDescriptions__();

      int count = 0;
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator i = __param_descriptions__.begin(); i != __param_descriptions__.end(); ++i)
        if ((*i)->fromMessage(msg, *this))
          count++;

      for (std::vector<AbstractGroupDescriptionConstPtr>::const_iterator i = __group_descriptions__.begin(); i != __group_descriptions__.end(); i ++)
      {
        if ((*i)->id == 0)
        {
          boost::any n = boost::any(this);
          (*i)->updateParams(n, *this);
          (*i)->fromMessage(msg, n);
        }
      }

      if (count != dynamic_reconfigure::ConfigTools::size(msg))
      {
        ROS_ERROR("TaskGeneratorConfig::__fromMessage__ called with an unexpected parameter.");
        ROS_ERROR("Booleans:");
        for (unsigned int i = 0; i < msg.bools.size(); i++)
          ROS_ERROR("  %s", msg.bools[i].name.c_str());
        ROS_ERROR("Integers:");
        for (unsigned int i = 0; i < msg.ints.size(); i++)
          ROS_ERROR("  %s", msg.ints[i].name.c_str());
        ROS_ERROR("Doubles:");
        for (unsigned int i = 0; i < msg.doubles.size(); i++)
          ROS_ERROR("  %s", msg.doubles[i].name.c_str());
        ROS_ERROR("Strings:");
        for (unsigned int i = 0; i < msg.strs.size(); i++)
          ROS_ERROR("  %s", msg.strs[i].name.c_str());
        // @todo Check that there are no duplicates. Make this error more
        // explicit.
        return false;
      }
      return true;
    }

    // This version of __toMessage__ is used during initialization of
    // statics when __getParamDescriptions__ can't be called yet.
    void __toMessage__(dynamic_reconfigure::Config &msg, const std::vector<AbstractParamDescriptionConstPtr> &__param_descriptions__, const std::vector<AbstractGroupDescriptionConstPtr> &__group_descriptions__) const
    {
      dynamic_reconfigure::ConfigTools::clear(msg);
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator i = __param_descriptions__.begin(); i != __param_descriptions__.end(); ++i)
        (*i)->toMessage(msg, *this);

      for (std::vector<AbstractGroupDescriptionConstPtr>::const_iterator i = __group_descriptions__.begin(); i != __group_descriptions__.end(); ++i)
      {
        if((*i)->id == 0)
        {
          (*i)->toMessage(msg, *this);
        }
      }
    }

    void __toMessage__(dynamic_reconfigure::Config &msg) const
    {
      const std::vector<AbstractParamDescriptionConstPtr> &__param_descriptions__ = __getParamDescriptions__();
      const std::vector<AbstractGroupDescriptionConstPtr> &__group_descriptions__ = __getGroupDescriptions__();
      __toMessage__(msg, __param_descriptions__, __group_descriptions__);
    }

    void __toServer__(const ros::NodeHandle &nh) const
    {
      const std::vector<AbstractParamDescriptionConstPtr> &__param_descriptions__ = __getParamDescriptions__();
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator i = __param_descriptions__.begin(); i != __param_descriptions__.end(); ++i)
        (*i)->toServer(nh, *this);
    }

    void __fromServer__(const ros::NodeHandle &nh)
    {
      static bool setup=false;

      const std::vector<AbstractParamDescriptionConstPtr> &__param_descriptions__ = __getParamDescriptions__();
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator i = __param_descriptions__.begin(); i != __param_descriptions__.end(); ++i)
        (*i)->fromServer(nh, *this);

      const std::vector<AbstractGroupDescriptionConstPtr> &__group_descriptions__ = __getGroupDescriptions__();
      for (std::vector<AbstractGroupDescriptionConstPtr>::const_iterator i = __group_descriptions__.begin(); i != __group_descriptions__.end(); i++){
        if (!setup && (*i)->id == 0) {
          setup = true;
          boost::any n = boost::any(this);
          (*i)->setInitialState(n);
        }
      }
    }

    void __clamp__()
    {
      const std::vector<AbstractParamDescriptionConstPtr> &__param_descriptions__ = __getParamDescriptions__();
      const TaskGeneratorConfig &__max__ = __getMax__();
      const TaskGeneratorConfig &__min__ = __getMin__();
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator i = __param_descriptions__.begin(); i != __param_descriptions__.end(); ++i)
        (*i)->clamp(*this, __max__, __min__);
    }

    uint32_t __level__(const TaskGeneratorConfig &config) const
    {
      const std::vector<AbstractParamDescriptionConstPtr> &__param_descriptions__ = __getParamDescriptions__();
      uint32_t level = 0;
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator i = __param_descriptions__.begin(); i != __param_descriptions__.end(); ++i)
        (*i)->calcLevel(level, config, *this);
      return level;
    }

    static const dynamic_reconfigure::ConfigDescription &__getDescriptionMessage__();
    static const TaskGeneratorConfig &__getDefault__();
    static const TaskGeneratorConfig &__getMax__();
    static const TaskGeneratorConfig &__getMin__();
    static const std::vector<AbstractParamDescriptionConstPtr> &__getParamDescriptions__();
    static const std::vector<AbstractGroupDescriptionConstPtr> &__getGroupDescriptions__();

  private:
    static const TaskGeneratorConfigStatics *__get_statics__();
  };

  template <> // Max and min are ignored for strings.
  inline void TaskGeneratorConfig::ParamDescription<std::string>::clamp(TaskGeneratorConfig &config, const TaskGeneratorConfig &max, const TaskGeneratorConfig &min) const
  {
    (void) config;
    (void) min;
    (void) max;
    return;
  }

  class TaskGeneratorConfigStatics
  {
    friend class TaskGeneratorConfig;

    TaskGeneratorConfigStatics()
    {
TaskGeneratorConfig::GroupDescription<TaskGeneratorConfig::DEFAULT, TaskGeneratorConfig> Default("Default", "", 0, 0, true, &TaskGeneratorConfig::groups);
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.timeout = -std::numeric_limits<double>::infinity();
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.timeout = std::numeric_limits<double>::infinity();
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.timeout = 60.0;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(TaskGeneratorConfig::AbstractParamDescriptionConstPtr(new TaskGeneratorConfig::ParamDescription<double>("timeout", "double", 1, "episode timeout in seconds", "", &TaskGeneratorConfig::timeout)));
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(TaskGeneratorConfig::AbstractParamDescriptionConstPtr(new TaskGeneratorConfig::ParamDescription<double>("timeout", "double", 1, "episode timeout in seconds", "", &TaskGeneratorConfig::timeout)));
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.episodes = -2147483648;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.episodes = 2147483647;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.episodes = -1;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(TaskGeneratorConfig::AbstractParamDescriptionConstPtr(new TaskGeneratorConfig::ParamDescription<int>("episodes", "int", 1, "desired episodes", "", &TaskGeneratorConfig::episodes)));
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(TaskGeneratorConfig::AbstractParamDescriptionConstPtr(new TaskGeneratorConfig::ParamDescription<int>("episodes", "int", 1, "desired episodes", "", &TaskGeneratorConfig::episodes)));
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.goal_radius = -std::numeric_limits<double>::infinity();
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.goal_radius = std::numeric_limits<double>::infinity();
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.goal_radius = 1.0;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(TaskGeneratorConfig::AbstractParamDescriptionConstPtr(new TaskGeneratorConfig::ParamDescription<double>("goal_radius", "double", 1, "default maximum distance from goal", "", &TaskGeneratorConfig::goal_radius)));
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(TaskGeneratorConfig::AbstractParamDescriptionConstPtr(new TaskGeneratorConfig::ParamDescription<double>("goal_radius", "double", 1, "default maximum distance from goal", "", &TaskGeneratorConfig::goal_radius)));
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.goal_tolerance_angle = -std::numeric_limits<double>::infinity();
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.goal_tolerance_angle = std::numeric_limits<double>::infinity();
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.goal_tolerance_angle = 6.283185307179586;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(TaskGeneratorConfig::AbstractParamDescriptionConstPtr(new TaskGeneratorConfig::ParamDescription<double>("goal_tolerance_angle", "double", 1, "default maximum angle deviation from goal", "", &TaskGeneratorConfig::goal_tolerance_angle)));
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(TaskGeneratorConfig::AbstractParamDescriptionConstPtr(new TaskGeneratorConfig::ParamDescription<double>("goal_tolerance_angle", "double", 1, "default maximum angle deviation from goal", "", &TaskGeneratorConfig::goal_tolerance_angle)));
TaskGeneratorConfig::GroupDescription<TaskGeneratorConfig::DEFAULT::SCENARIO, TaskGeneratorConfig::DEFAULT> SCENARIO("SCENARIO", "", 0, 1, true, &TaskGeneratorConfig::DEFAULT::scenario);
//#line 31 "/home/az/arena_ws/src/arena/arena-rosnav/task_generator/cfg/TaskGenerator.cfg"
      __min__.SCENARIO_file = "";
//#line 31 "/home/az/arena_ws/src/arena/arena-rosnav/task_generator/cfg/TaskGenerator.cfg"
      __max__.SCENARIO_file = "";
//#line 31 "/home/az/arena_ws/src/arena/arena-rosnav/task_generator/cfg/TaskGenerator.cfg"
      __default__.SCENARIO_file = "default.json";
//#line 31 "/home/az/arena_ws/src/arena/arena-rosnav/task_generator/cfg/TaskGenerator.cfg"
      SCENARIO.abstract_parameters.push_back(TaskGeneratorConfig::AbstractParamDescriptionConstPtr(new TaskGeneratorConfig::ParamDescription<std::string>("SCENARIO_file", "str", 2, "scenario file name", "", &TaskGeneratorConfig::SCENARIO_file)));
//#line 31 "/home/az/arena_ws/src/arena/arena-rosnav/task_generator/cfg/TaskGenerator.cfg"
      __param_descriptions__.push_back(TaskGeneratorConfig::AbstractParamDescriptionConstPtr(new TaskGeneratorConfig::ParamDescription<std::string>("SCENARIO_file", "str", 2, "scenario file name", "", &TaskGeneratorConfig::SCENARIO_file)));
//#line 124 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      SCENARIO.convertParams();
//#line 124 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.groups.push_back(TaskGeneratorConfig::AbstractGroupDescriptionConstPtr(new TaskGeneratorConfig::GroupDescription<TaskGeneratorConfig::DEFAULT::SCENARIO, TaskGeneratorConfig::DEFAULT>(SCENARIO)));
//#line 124 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __group_descriptions__.push_back(TaskGeneratorConfig::AbstractGroupDescriptionConstPtr(new TaskGeneratorConfig::GroupDescription<TaskGeneratorConfig::DEFAULT::SCENARIO, TaskGeneratorConfig::DEFAULT>(SCENARIO)));
TaskGeneratorConfig::GroupDescription<TaskGeneratorConfig::DEFAULT::PARAMETRIZED, TaskGeneratorConfig::DEFAULT> PARAMETRIZED("PARAMETRIZED", "", 0, 2, true, &TaskGeneratorConfig::DEFAULT::parametrized);
//#line 34 "/home/az/arena_ws/src/arena/arena-rosnav/task_generator/cfg/TaskGenerator.cfg"
      __min__.PARAMETRIZED_file = "";
//#line 34 "/home/az/arena_ws/src/arena/arena-rosnav/task_generator/cfg/TaskGenerator.cfg"
      __max__.PARAMETRIZED_file = "";
//#line 34 "/home/az/arena_ws/src/arena/arena-rosnav/task_generator/cfg/TaskGenerator.cfg"
      __default__.PARAMETRIZED_file = "default.xml";
//#line 34 "/home/az/arena_ws/src/arena/arena-rosnav/task_generator/cfg/TaskGenerator.cfg"
      PARAMETRIZED.abstract_parameters.push_back(TaskGeneratorConfig::AbstractParamDescriptionConstPtr(new TaskGeneratorConfig::ParamDescription<std::string>("PARAMETRIZED_file", "str", 4, "parametrized XML name", "", &TaskGeneratorConfig::PARAMETRIZED_file)));
//#line 34 "/home/az/arena_ws/src/arena/arena-rosnav/task_generator/cfg/TaskGenerator.cfg"
      __param_descriptions__.push_back(TaskGeneratorConfig::AbstractParamDescriptionConstPtr(new TaskGeneratorConfig::ParamDescription<std::string>("PARAMETRIZED_file", "str", 4, "parametrized XML name", "", &TaskGeneratorConfig::PARAMETRIZED_file)));
//#line 124 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      PARAMETRIZED.convertParams();
//#line 124 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.groups.push_back(TaskGeneratorConfig::AbstractGroupDescriptionConstPtr(new TaskGeneratorConfig::GroupDescription<TaskGeneratorConfig::DEFAULT::PARAMETRIZED, TaskGeneratorConfig::DEFAULT>(PARAMETRIZED)));
//#line 124 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __group_descriptions__.push_back(TaskGeneratorConfig::AbstractGroupDescriptionConstPtr(new TaskGeneratorConfig::GroupDescription<TaskGeneratorConfig::DEFAULT::PARAMETRIZED, TaskGeneratorConfig::DEFAULT>(PARAMETRIZED)));
TaskGeneratorConfig::GroupDescription<TaskGeneratorConfig::DEFAULT::STAGED, TaskGeneratorConfig::DEFAULT> STAGED("STAGED", "", 0, 3, true, &TaskGeneratorConfig::DEFAULT::staged);
//#line 37 "/home/az/arena_ws/src/arena/arena-rosnav/task_generator/cfg/TaskGenerator.cfg"
      __min__.STAGED_curriculum = "";
//#line 37 "/home/az/arena_ws/src/arena/arena-rosnav/task_generator/cfg/TaskGenerator.cfg"
      __max__.STAGED_curriculum = "";
//#line 37 "/home/az/arena_ws/src/arena/arena-rosnav/task_generator/cfg/TaskGenerator.cfg"
      __default__.STAGED_curriculum = "default.yaml";
//#line 37 "/home/az/arena_ws/src/arena/arena-rosnav/task_generator/cfg/TaskGenerator.cfg"
      STAGED.abstract_parameters.push_back(TaskGeneratorConfig::AbstractParamDescriptionConstPtr(new TaskGeneratorConfig::ParamDescription<std::string>("STAGED_curriculum", "str", 8, "curriculum file name", "", &TaskGeneratorConfig::STAGED_curriculum)));
//#line 37 "/home/az/arena_ws/src/arena/arena-rosnav/task_generator/cfg/TaskGenerator.cfg"
      __param_descriptions__.push_back(TaskGeneratorConfig::AbstractParamDescriptionConstPtr(new TaskGeneratorConfig::ParamDescription<std::string>("STAGED_curriculum", "str", 8, "curriculum file name", "", &TaskGeneratorConfig::STAGED_curriculum)));
//#line 38 "/home/az/arena_ws/src/arena/arena-rosnav/task_generator/cfg/TaskGenerator.cfg"
      __min__.STAGED_index = 0;
//#line 38 "/home/az/arena_ws/src/arena/arena-rosnav/task_generator/cfg/TaskGenerator.cfg"
      __max__.STAGED_index = 2147483647;
//#line 38 "/home/az/arena_ws/src/arena/arena-rosnav/task_generator/cfg/TaskGenerator.cfg"
      __default__.STAGED_index = 0;
//#line 38 "/home/az/arena_ws/src/arena/arena-rosnav/task_generator/cfg/TaskGenerator.cfg"
      STAGED.abstract_parameters.push_back(TaskGeneratorConfig::AbstractParamDescriptionConstPtr(new TaskGeneratorConfig::ParamDescription<int>("STAGED_index", "int", 8, "starting stage", "", &TaskGeneratorConfig::STAGED_index)));
//#line 38 "/home/az/arena_ws/src/arena/arena-rosnav/task_generator/cfg/TaskGenerator.cfg"
      __param_descriptions__.push_back(TaskGeneratorConfig::AbstractParamDescriptionConstPtr(new TaskGeneratorConfig::ParamDescription<int>("STAGED_index", "int", 8, "starting stage", "", &TaskGeneratorConfig::STAGED_index)));
//#line 124 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      STAGED.convertParams();
//#line 124 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.groups.push_back(TaskGeneratorConfig::AbstractGroupDescriptionConstPtr(new TaskGeneratorConfig::GroupDescription<TaskGeneratorConfig::DEFAULT::STAGED, TaskGeneratorConfig::DEFAULT>(STAGED)));
//#line 124 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __group_descriptions__.push_back(TaskGeneratorConfig::AbstractGroupDescriptionConstPtr(new TaskGeneratorConfig::GroupDescription<TaskGeneratorConfig::DEFAULT::STAGED, TaskGeneratorConfig::DEFAULT>(STAGED)));
TaskGeneratorConfig::GroupDescription<TaskGeneratorConfig::DEFAULT::DYNAMICMAP, TaskGeneratorConfig::DEFAULT> DYNAMICMAP("DYNAMICMAP", "", 0, 4, true, &TaskGeneratorConfig::DEFAULT::dynamicmap);
//#line 124 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      DYNAMICMAP.convertParams();
//#line 124 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.groups.push_back(TaskGeneratorConfig::AbstractGroupDescriptionConstPtr(new TaskGeneratorConfig::GroupDescription<TaskGeneratorConfig::DEFAULT::DYNAMICMAP, TaskGeneratorConfig::DEFAULT>(DYNAMICMAP)));
//#line 124 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __group_descriptions__.push_back(TaskGeneratorConfig::AbstractGroupDescriptionConstPtr(new TaskGeneratorConfig::GroupDescription<TaskGeneratorConfig::DEFAULT::DYNAMICMAP, TaskGeneratorConfig::DEFAULT>(DYNAMICMAP)));
TaskGeneratorConfig::GroupDescription<TaskGeneratorConfig::DEFAULT::RANDOM, TaskGeneratorConfig::DEFAULT> RANDOM("RANDOM", "", 0, 5, true, &TaskGeneratorConfig::DEFAULT::random);
//#line 44 "/home/az/arena_ws/src/arena/arena-rosnav/task_generator/cfg/TaskGenerator.cfg"
      __min__.RANDOM_static_min = 0;
//#line 44 "/home/az/arena_ws/src/arena/arena-rosnav/task_generator/cfg/TaskGenerator.cfg"
      __max__.RANDOM_static_min = 2147483647;
//#line 44 "/home/az/arena_ws/src/arena/arena-rosnav/task_generator/cfg/TaskGenerator.cfg"
      __default__.RANDOM_static_min = 0;
//#line 44 "/home/az/arena_ws/src/arena/arena-rosnav/task_generator/cfg/TaskGenerator.cfg"
      RANDOM.abstract_parameters.push_back(TaskGeneratorConfig::AbstractParamDescriptionConstPtr(new TaskGeneratorConfig::ParamDescription<int>("RANDOM_static_min", "int", 32, "static min", "", &TaskGeneratorConfig::RANDOM_static_min)));
//#line 44 "/home/az/arena_ws/src/arena/arena-rosnav/task_generator/cfg/TaskGenerator.cfg"
      __param_descriptions__.push_back(TaskGeneratorConfig::AbstractParamDescriptionConstPtr(new TaskGeneratorConfig::ParamDescription<int>("RANDOM_static_min", "int", 32, "static min", "", &TaskGeneratorConfig::RANDOM_static_min)));
//#line 45 "/home/az/arena_ws/src/arena/arena-rosnav/task_generator/cfg/TaskGenerator.cfg"
      __min__.RANDOM_static_max = 0;
//#line 45 "/home/az/arena_ws/src/arena/arena-rosnav/task_generator/cfg/TaskGenerator.cfg"
      __max__.RANDOM_static_max = 2147483647;
//#line 45 "/home/az/arena_ws/src/arena/arena-rosnav/task_generator/cfg/TaskGenerator.cfg"
      __default__.RANDOM_static_max = 0;
//#line 45 "/home/az/arena_ws/src/arena/arena-rosnav/task_generator/cfg/TaskGenerator.cfg"
      RANDOM.abstract_parameters.push_back(TaskGeneratorConfig::AbstractParamDescriptionConstPtr(new TaskGeneratorConfig::ParamDescription<int>("RANDOM_static_max", "int", 32, "static max", "", &TaskGeneratorConfig::RANDOM_static_max)));
//#line 45 "/home/az/arena_ws/src/arena/arena-rosnav/task_generator/cfg/TaskGenerator.cfg"
      __param_descriptions__.push_back(TaskGeneratorConfig::AbstractParamDescriptionConstPtr(new TaskGeneratorConfig::ParamDescription<int>("RANDOM_static_max", "int", 32, "static max", "", &TaskGeneratorConfig::RANDOM_static_max)));
//#line 46 "/home/az/arena_ws/src/arena/arena-rosnav/task_generator/cfg/TaskGenerator.cfg"
      __min__.RANDOM_static_models = "";
//#line 46 "/home/az/arena_ws/src/arena/arena-rosnav/task_generator/cfg/TaskGenerator.cfg"
      __max__.RANDOM_static_models = "";
//#line 46 "/home/az/arena_ws/src/arena/arena-rosnav/task_generator/cfg/TaskGenerator.cfg"
      __default__.RANDOM_static_models = "";
//#line 46 "/home/az/arena_ws/src/arena/arena-rosnav/task_generator/cfg/TaskGenerator.cfg"
      RANDOM.abstract_parameters.push_back(TaskGeneratorConfig::AbstractParamDescriptionConstPtr(new TaskGeneratorConfig::ParamDescription<std::string>("RANDOM_static_models", "str", 32, "static models", "", &TaskGeneratorConfig::RANDOM_static_models)));
//#line 46 "/home/az/arena_ws/src/arena/arena-rosnav/task_generator/cfg/TaskGenerator.cfg"
      __param_descriptions__.push_back(TaskGeneratorConfig::AbstractParamDescriptionConstPtr(new TaskGeneratorConfig::ParamDescription<std::string>("RANDOM_static_models", "str", 32, "static models", "", &TaskGeneratorConfig::RANDOM_static_models)));
//#line 44 "/home/az/arena_ws/src/arena/arena-rosnav/task_generator/cfg/TaskGenerator.cfg"
      __min__.RANDOM_interactive_min = 0;
//#line 44 "/home/az/arena_ws/src/arena/arena-rosnav/task_generator/cfg/TaskGenerator.cfg"
      __max__.RANDOM_interactive_min = 2147483647;
//#line 44 "/home/az/arena_ws/src/arena/arena-rosnav/task_generator/cfg/TaskGenerator.cfg"
      __default__.RANDOM_interactive_min = 0;
//#line 44 "/home/az/arena_ws/src/arena/arena-rosnav/task_generator/cfg/TaskGenerator.cfg"
      RANDOM.abstract_parameters.push_back(TaskGeneratorConfig::AbstractParamDescriptionConstPtr(new TaskGeneratorConfig::ParamDescription<int>("RANDOM_interactive_min", "int", 32, "interactive min", "", &TaskGeneratorConfig::RANDOM_interactive_min)));
//#line 44 "/home/az/arena_ws/src/arena/arena-rosnav/task_generator/cfg/TaskGenerator.cfg"
      __param_descriptions__.push_back(TaskGeneratorConfig::AbstractParamDescriptionConstPtr(new TaskGeneratorConfig::ParamDescription<int>("RANDOM_interactive_min", "int", 32, "interactive min", "", &TaskGeneratorConfig::RANDOM_interactive_min)));
//#line 45 "/home/az/arena_ws/src/arena/arena-rosnav/task_generator/cfg/TaskGenerator.cfg"
      __min__.RANDOM_interactive_max = 0;
//#line 45 "/home/az/arena_ws/src/arena/arena-rosnav/task_generator/cfg/TaskGenerator.cfg"
      __max__.RANDOM_interactive_max = 2147483647;
//#line 45 "/home/az/arena_ws/src/arena/arena-rosnav/task_generator/cfg/TaskGenerator.cfg"
      __default__.RANDOM_interactive_max = 0;
//#line 45 "/home/az/arena_ws/src/arena/arena-rosnav/task_generator/cfg/TaskGenerator.cfg"
      RANDOM.abstract_parameters.push_back(TaskGeneratorConfig::AbstractParamDescriptionConstPtr(new TaskGeneratorConfig::ParamDescription<int>("RANDOM_interactive_max", "int", 32, "interactive max", "", &TaskGeneratorConfig::RANDOM_interactive_max)));
//#line 45 "/home/az/arena_ws/src/arena/arena-rosnav/task_generator/cfg/TaskGenerator.cfg"
      __param_descriptions__.push_back(TaskGeneratorConfig::AbstractParamDescriptionConstPtr(new TaskGeneratorConfig::ParamDescription<int>("RANDOM_interactive_max", "int", 32, "interactive max", "", &TaskGeneratorConfig::RANDOM_interactive_max)));
//#line 46 "/home/az/arena_ws/src/arena/arena-rosnav/task_generator/cfg/TaskGenerator.cfg"
      __min__.RANDOM_interactive_models = "";
//#line 46 "/home/az/arena_ws/src/arena/arena-rosnav/task_generator/cfg/TaskGenerator.cfg"
      __max__.RANDOM_interactive_models = "";
//#line 46 "/home/az/arena_ws/src/arena/arena-rosnav/task_generator/cfg/TaskGenerator.cfg"
      __default__.RANDOM_interactive_models = "";
//#line 46 "/home/az/arena_ws/src/arena/arena-rosnav/task_generator/cfg/TaskGenerator.cfg"
      RANDOM.abstract_parameters.push_back(TaskGeneratorConfig::AbstractParamDescriptionConstPtr(new TaskGeneratorConfig::ParamDescription<std::string>("RANDOM_interactive_models", "str", 32, "interactive models", "", &TaskGeneratorConfig::RANDOM_interactive_models)));
//#line 46 "/home/az/arena_ws/src/arena/arena-rosnav/task_generator/cfg/TaskGenerator.cfg"
      __param_descriptions__.push_back(TaskGeneratorConfig::AbstractParamDescriptionConstPtr(new TaskGeneratorConfig::ParamDescription<std::string>("RANDOM_interactive_models", "str", 32, "interactive models", "", &TaskGeneratorConfig::RANDOM_interactive_models)));
//#line 44 "/home/az/arena_ws/src/arena/arena-rosnav/task_generator/cfg/TaskGenerator.cfg"
      __min__.RANDOM_dynamic_min = 0;
//#line 44 "/home/az/arena_ws/src/arena/arena-rosnav/task_generator/cfg/TaskGenerator.cfg"
      __max__.RANDOM_dynamic_min = 2147483647;
//#line 44 "/home/az/arena_ws/src/arena/arena-rosnav/task_generator/cfg/TaskGenerator.cfg"
      __default__.RANDOM_dynamic_min = 0;
//#line 44 "/home/az/arena_ws/src/arena/arena-rosnav/task_generator/cfg/TaskGenerator.cfg"
      RANDOM.abstract_parameters.push_back(TaskGeneratorConfig::AbstractParamDescriptionConstPtr(new TaskGeneratorConfig::ParamDescription<int>("RANDOM_dynamic_min", "int", 32, "dynamic min", "", &TaskGeneratorConfig::RANDOM_dynamic_min)));
//#line 44 "/home/az/arena_ws/src/arena/arena-rosnav/task_generator/cfg/TaskGenerator.cfg"
      __param_descriptions__.push_back(TaskGeneratorConfig::AbstractParamDescriptionConstPtr(new TaskGeneratorConfig::ParamDescription<int>("RANDOM_dynamic_min", "int", 32, "dynamic min", "", &TaskGeneratorConfig::RANDOM_dynamic_min)));
//#line 45 "/home/az/arena_ws/src/arena/arena-rosnav/task_generator/cfg/TaskGenerator.cfg"
      __min__.RANDOM_dynamic_max = 0;
//#line 45 "/home/az/arena_ws/src/arena/arena-rosnav/task_generator/cfg/TaskGenerator.cfg"
      __max__.RANDOM_dynamic_max = 2147483647;
//#line 45 "/home/az/arena_ws/src/arena/arena-rosnav/task_generator/cfg/TaskGenerator.cfg"
      __default__.RANDOM_dynamic_max = 0;
//#line 45 "/home/az/arena_ws/src/arena/arena-rosnav/task_generator/cfg/TaskGenerator.cfg"
      RANDOM.abstract_parameters.push_back(TaskGeneratorConfig::AbstractParamDescriptionConstPtr(new TaskGeneratorConfig::ParamDescription<int>("RANDOM_dynamic_max", "int", 32, "dynamic max", "", &TaskGeneratorConfig::RANDOM_dynamic_max)));
//#line 45 "/home/az/arena_ws/src/arena/arena-rosnav/task_generator/cfg/TaskGenerator.cfg"
      __param_descriptions__.push_back(TaskGeneratorConfig::AbstractParamDescriptionConstPtr(new TaskGeneratorConfig::ParamDescription<int>("RANDOM_dynamic_max", "int", 32, "dynamic max", "", &TaskGeneratorConfig::RANDOM_dynamic_max)));
//#line 46 "/home/az/arena_ws/src/arena/arena-rosnav/task_generator/cfg/TaskGenerator.cfg"
      __min__.RANDOM_dynamic_models = "";
//#line 46 "/home/az/arena_ws/src/arena/arena-rosnav/task_generator/cfg/TaskGenerator.cfg"
      __max__.RANDOM_dynamic_models = "";
//#line 46 "/home/az/arena_ws/src/arena/arena-rosnav/task_generator/cfg/TaskGenerator.cfg"
      __default__.RANDOM_dynamic_models = "";
//#line 46 "/home/az/arena_ws/src/arena/arena-rosnav/task_generator/cfg/TaskGenerator.cfg"
      RANDOM.abstract_parameters.push_back(TaskGeneratorConfig::AbstractParamDescriptionConstPtr(new TaskGeneratorConfig::ParamDescription<std::string>("RANDOM_dynamic_models", "str", 32, "dynamic models", "", &TaskGeneratorConfig::RANDOM_dynamic_models)));
//#line 46 "/home/az/arena_ws/src/arena/arena-rosnav/task_generator/cfg/TaskGenerator.cfg"
      __param_descriptions__.push_back(TaskGeneratorConfig::AbstractParamDescriptionConstPtr(new TaskGeneratorConfig::ParamDescription<std::string>("RANDOM_dynamic_models", "str", 32, "dynamic models", "", &TaskGeneratorConfig::RANDOM_dynamic_models)));
//#line 47 "/home/az/arena_ws/src/arena/arena-rosnav/task_generator/cfg/TaskGenerator.cfg"
      __min__.RANDOM_seed = -2147483648;
//#line 47 "/home/az/arena_ws/src/arena/arena-rosnav/task_generator/cfg/TaskGenerator.cfg"
      __max__.RANDOM_seed = 2147483647;
//#line 47 "/home/az/arena_ws/src/arena/arena-rosnav/task_generator/cfg/TaskGenerator.cfg"
      __default__.RANDOM_seed = -1;
//#line 47 "/home/az/arena_ws/src/arena/arena-rosnav/task_generator/cfg/TaskGenerator.cfg"
      RANDOM.abstract_parameters.push_back(TaskGeneratorConfig::AbstractParamDescriptionConstPtr(new TaskGeneratorConfig::ParamDescription<int>("RANDOM_seed", "int", 32, "random seed", "", &TaskGeneratorConfig::RANDOM_seed)));
//#line 47 "/home/az/arena_ws/src/arena/arena-rosnav/task_generator/cfg/TaskGenerator.cfg"
      __param_descriptions__.push_back(TaskGeneratorConfig::AbstractParamDescriptionConstPtr(new TaskGeneratorConfig::ParamDescription<int>("RANDOM_seed", "int", 32, "random seed", "", &TaskGeneratorConfig::RANDOM_seed)));
//#line 124 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      RANDOM.convertParams();
//#line 124 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.groups.push_back(TaskGeneratorConfig::AbstractGroupDescriptionConstPtr(new TaskGeneratorConfig::GroupDescription<TaskGeneratorConfig::DEFAULT::RANDOM, TaskGeneratorConfig::DEFAULT>(RANDOM)));
//#line 124 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __group_descriptions__.push_back(TaskGeneratorConfig::AbstractGroupDescriptionConstPtr(new TaskGeneratorConfig::GroupDescription<TaskGeneratorConfig::DEFAULT::RANDOM, TaskGeneratorConfig::DEFAULT>(RANDOM)));
//#line 246 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.convertParams();
//#line 246 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __group_descriptions__.push_back(TaskGeneratorConfig::AbstractGroupDescriptionConstPtr(new TaskGeneratorConfig::GroupDescription<TaskGeneratorConfig::DEFAULT, TaskGeneratorConfig>(Default)));
//#line 369 "/opt/ros/noetic/share/dynamic_reconfigure/cmake/../templates/ConfigType.h.template"

      for (std::vector<TaskGeneratorConfig::AbstractGroupDescriptionConstPtr>::const_iterator i = __group_descriptions__.begin(); i != __group_descriptions__.end(); ++i)
      {
        __description_message__.groups.push_back(**i);
      }
      __max__.__toMessage__(__description_message__.max, __param_descriptions__, __group_descriptions__);
      __min__.__toMessage__(__description_message__.min, __param_descriptions__, __group_descriptions__);
      __default__.__toMessage__(__description_message__.dflt, __param_descriptions__, __group_descriptions__);
    }
    std::vector<TaskGeneratorConfig::AbstractParamDescriptionConstPtr> __param_descriptions__;
    std::vector<TaskGeneratorConfig::AbstractGroupDescriptionConstPtr> __group_descriptions__;
    TaskGeneratorConfig __max__;
    TaskGeneratorConfig __min__;
    TaskGeneratorConfig __default__;
    dynamic_reconfigure::ConfigDescription __description_message__;

    static const TaskGeneratorConfigStatics *get_instance()
    {
      // Split this off in a separate function because I know that
      // instance will get initialized the first time get_instance is
      // called, and I am guaranteeing that get_instance gets called at
      // most once.
      static TaskGeneratorConfigStatics instance;
      return &instance;
    }
  };

  inline const dynamic_reconfigure::ConfigDescription &TaskGeneratorConfig::__getDescriptionMessage__()
  {
    return __get_statics__()->__description_message__;
  }

  inline const TaskGeneratorConfig &TaskGeneratorConfig::__getDefault__()
  {
    return __get_statics__()->__default__;
  }

  inline const TaskGeneratorConfig &TaskGeneratorConfig::__getMax__()
  {
    return __get_statics__()->__max__;
  }

  inline const TaskGeneratorConfig &TaskGeneratorConfig::__getMin__()
  {
    return __get_statics__()->__min__;
  }

  inline const std::vector<TaskGeneratorConfig::AbstractParamDescriptionConstPtr> &TaskGeneratorConfig::__getParamDescriptions__()
  {
    return __get_statics__()->__param_descriptions__;
  }

  inline const std::vector<TaskGeneratorConfig::AbstractGroupDescriptionConstPtr> &TaskGeneratorConfig::__getGroupDescriptions__()
  {
    return __get_statics__()->__group_descriptions__;
  }

  inline const TaskGeneratorConfigStatics *TaskGeneratorConfig::__get_statics__()
  {
    const static TaskGeneratorConfigStatics *statics;

    if (statics) // Common case
      return statics;

    boost::mutex::scoped_lock lock(dynamic_reconfigure::__init_mutex__);

    if (statics) // In case we lost a race.
      return statics;

    statics = TaskGeneratorConfigStatics::get_instance();

    return statics;
  }


}

#undef DYNAMIC_RECONFIGURE_FINAL

#endif // __TASKGENERATORRECONFIGURATOR_H__
