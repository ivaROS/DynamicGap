# Autogenerated param section. Do not hand edit.
param {
group.0 {
name=Dynamically Reconfigurable Parameters
desc=See the [[dynamic_reconfigure]] package for details on dynamically reconfigurable parameters.
0.name= ~teb_autosize
0.default= True
0.type= bool
0.desc=Enable the automatic resizing of the trajectory during optimization (based on the temporal resolution of the trajectory, recommended) 
1.name= ~dt_ref
1.default= 0.3
1.type= double
1.desc=Temporal resolution of the planned trajectory (usually it is set to the magnitude of the 1/control_rate) Range: 0.01 to 1.0
2.name= ~dt_hysteresis
2.default= 0.1
2.type= double
2.desc=Hysteresis that is utilized for automatic resizing depending on the current temporal resolution (dt): usually 10% of dt_ref Range: 0.002 to 0.5
3.name= ~global_plan_overwrite_orientation
3.default= True
3.type= bool
3.desc=Some global planners are not considering the orientation at local subgoals between start and global goal, therefore determine it automatically 
4.name= ~allow_init_with_backwards_motion
4.default= False
4.type= bool
4.desc=If true, the underlying trajectories might be initialized with backwards motions in case the goal is behind the start within the local costmap (this is only recommended if the robot is equipped with rear sensors) 
5.name= ~max_global_plan_lookahead_dist
5.default= 3.0
5.type= double
5.desc=Specify maximum length (cumulative Euclidean distances) of the subset of the global plan taken into account for optimization [if 0 or negative: disabled; the length is also bounded by the local costmap size] Range: 0.0 to 50.0
6.name= ~force_reinit_new_goal_dist
6.default= 1.0
6.type= double
6.desc=Force the planner to reinitialize the trajectory if a previous goal is updated with a seperation of more than the specified value in meters (skip hot-starting) Range: 0.0 to 10.0
7.name= ~force_reinit_new_goal_angular
7.default= 0.78
7.type= double
7.desc=Force the planner to reinitialize the trajectory if a previous goal is updated with a rotational difference of more than the specified value in radians (skip hot-starting) Range: 0.0 to 4.0
8.name= ~feasibility_check_no_poses
8.default= 5
8.type= int
8.desc=Specify up to which pose on the predicted plan the feasibility should be checked each sampling interval Range: 0 to 50
9.name= ~exact_arc_length
9.default= False
9.type= bool
9.desc=If true, the planner uses the exact arc length in velocity, acceleration and turning rate computations [-> increased cpu time], otherwise the euclidean approximation is used. 
10.name= ~publish_feedback
10.default= False
10.type= bool
10.desc=Publish planner feedback containing the full trajectory and a list of active obstacles (should be enabled only for evaluation or debugging purposes) 
11.name= ~visualize_with_time_as_z_axis_scale
11.default= 0.0
11.type= double
11.desc=If this value is bigger than 0, the trajectory and obstacles are visualized in 3d using the time as the z-axis scaled by this value. Most useful for dynamic obstacles. Range: 0.0 to 1.0
12.name= ~horizon_reduction_amount
12.default= 0.5
12.type= double
12.desc=Value by which the horizon should be reduced Range: 0.0 to 1.0
13.name= ~teb_init_skip_dist
13.default= 0.4
13.type= double
13.desc=Distance for skipping points while initializing elastic band Range: 0.0 to 5.0
14.name= ~global_plan_viapoint_sep
14.default= -0.1
14.type= double
14.desc=Min. separation between each two consecutive via-points extracted from the global plan [if negative: disabled] Range: -0.1 to 5.0
15.name= ~via_points_ordered
15.default= False
15.type= bool
15.desc=If true, the planner adheres to the order of via-points in the storage container 
16.name= ~max_vel_x
16.default= 0.4
16.type= double
16.desc=Maximum translational velocity of the robot Range: 0.01 to 100.0
17.name= ~max_vel_x_backwards
17.default= 0.2
17.type= double
17.desc=Maximum translational velocity of the robot for driving backwards Range: 0.01 to 100.0
18.name= ~max_vel_theta
18.default= 0.3
18.type= double
18.desc=Maximum angular velocity of the robot Range: 0.01 to 100.0
19.name= ~acc_lim_x
19.default= 0.5
19.type= double
19.desc=Maximum translational acceleration of the robot Range: 0.01 to 100.0
20.name= ~acc_lim_theta
20.default= 0.5
20.type= double
20.desc=Maximum angular acceleration of the robot Range: 0.01 to 100.0
21.name= ~is_footprint_dynamic
21.default= False
21.type= bool
21.desc=If true, updated the footprint before checking trajectory feasibility 
22.name= ~is_real
22.default= False
22.type= bool
22.desc=Whether the robot is real(or gazebo) or simulated 
23.name= ~min_turning_radius
23.default= 0.0
23.type= double
23.desc=Minimum turning radius of a carlike robot (diff-drive robot: zero) Range: 0.0 to 50.0
24.name= ~wheelbase
24.default= 1.0
24.type= double
24.desc=The distance between the drive shaft and steering axle (only required for a carlike robot with 'cmd_angle_instead_rotvel' enabled); The value might be negative for back-wheeled robots! Range: -10.0 to 10.0
25.name= ~cmd_angle_instead_rotvel
25.default= False
25.type= bool
25.desc=Substitute the rotational velocity in the commanded velocity message by the corresponding steering angle (check 'axles_distance') 
26.name= ~max_vel_y
26.default= 0.0
26.type= double
26.desc=Maximum strafing velocity of the robot (should be zero for non-holonomic robots!) Range: 0.0 to 100.0
27.name= ~acc_lim_y
27.default= 0.5
27.type= double
27.desc=Maximum strafing acceleration of the robot Range: 0.01 to 100.0
28.name= ~max_agent_vel_x
28.default= 0.4
28.type= double
28.desc=Maximum linear velocity for agents Range: 0.0 to 4.0
29.name= ~nominal_agent_vel_x
29.default= 0.2
29.type= double
29.desc=Nominal linear velocity for agents Range: 0.0 to 4.0
30.name= ~max_agent_vel_x_backwards
30.default= 0.001
30.type= double
30.desc=Maxium backward velocity for agents Range: 0.0 to 4.0
31.name= ~max_agent_vel_theta
31.default= 0.3
31.type= double
31.desc=Maxium angular velocity for agents Range: 0.0 to 4.0
32.name= ~agent_acc_lim_x
32.default= 0.6
32.type= double
32.desc=Maxium linear acceleration for agents Range: 0.0 to 4.0
33.name= ~agent_acc_lim_theta
33.default= 0.8
33.type= double
33.desc=Maxium angular acceleration for agents Range: 0.0 to 4.0
34.name= ~num_moving_avg
34.default= 5
34.type= int
34.desc=Number of instants for moving average Range: 1 to 100
35.name= ~max_agent_vel_y
35.default= 0.4
35.type= double
35.desc=Maximum linear velocity for agents Range: 0.0 to 4.0
36.name= ~agent_acc_lim_y
36.default= 0.3
36.type= double
36.desc=Maxium linear acceleration for agents Range: 0.0 to 4.0
37.name= ~xy_goal_tolerance
37.default= 0.2
37.type= double
37.desc=Allowed final euclidean distance to the goal position Range: 0.001 to 10.0
38.name= ~yaw_goal_tolerance
38.default= 0.1
38.type= double
38.desc=Allowed final orientation error to the goal orientation Range: 0.001 to 3.2
39.name= ~free_goal_vel
39.default= False
39.type= bool
39.desc=Allow the robot's velocity to be nonzero for planning purposes (the robot can arrive at the goal with max speed) 
40.name= ~min_obstacle_dist
40.default= 0.5
40.type= double
40.desc=Minimum desired separation from obstacles Range: 0.0 to 10.0
41.name= ~use_nonlinear_obstacle_penalty
41.default= True
41.type= bool
41.desc=Weather to use inverse function for obstacle penalty (linear otherwise) 
42.name= ~obstacle_cost_mult
42.default= 1.0
42.type= double
42.desc=Multiplier for obstacle cost Range: 0.0 to 10.0
43.name= ~inflation_dist
43.default= 0.6
43.type= double
43.desc=Buffer zone around obstacles with non-zero penalty costs (should be larger than min_obstacle_dist in order to take effect) Range: 0.0 to 15.0
44.name= ~dynamic_obstacle_inflation_dist
44.default= 0.6
44.type= double
44.desc=Buffer zone around predicted locations of dynamic obstacles with non-zero penalty costs (should be larger than min_obstacle_dist in order to take effect) Range: 0.0 to 15.0
45.name= ~include_dynamic_obstacles
45.default= True
45.type= bool
45.desc=Specify whether the movement of dynamic obstacles should be predicted by a constant velocity model (this also changes the homotopy class search). If false, all obstacles are considered to be static. 
46.name= ~include_costmap_obstacles
46.default= True
46.type= bool
46.desc=Specify whether the obstacles in the costmap should be taken into account directly (this is necessary if no seperate clustering and detection is implemented) 
47.name= ~legacy_obstacle_association
47.default= False
47.type= bool
47.desc=If true, the old association strategy is used (for each obstacle, find the nearest TEB pose), otherwise the new one (for each teb pose, find only 'relevant' obstacles). 
48.name= ~obstacle_association_force_inclusion_factor
48.default= 1.5
48.type= double
48.desc=The non-legacy obstacle association technique tries to connect only relevant obstacles with the discretized trajectory during optimization, all obstacles within a specifed distance are forced to be included (as a multiple of min_obstacle_dist), e.g. choose 2.0 in order to consider obstacles within a radius of 2.0*min_obstacle_dist. Range: 0.0 to 100.0
49.name= ~obstacle_association_cutoff_factor
49.default= 5.0
49.type= double
49.desc=See obstacle_association_force_inclusion_factor, but beyond a multiple of [value]*min_obstacle_dist all obstacles are ignored during optimization. obstacle_association_force_inclusion_factor is processed first. Range: 1.0 to 100.0
50.name= ~costmap_obstacles_behind_robot_dist
50.default= 1.5
50.type= double
50.desc=Limit the occupied local costmap obstacles taken into account for planning behind the robot (specify distance in meters) Range: 0.0 to 20.0
51.name= ~obstacle_poses_affected
51.default= 30
51.type= int
51.desc=The obstacle position is attached to the closest pose on the trajectory to reduce computational effort, but take a number of neighbors into account as well Range: 0 to 200
52.name= ~no_inner_iterations
52.default= 5
52.type= int
52.desc=Number of solver iterations called in each outerloop iteration Range: 1 to 100
53.name= ~no_outer_iterations
53.default= 4
53.type= int
53.desc=Each outerloop iteration automatically resizes the trajectory and invokes the internal optimizer with no_inner_iterations Range: 1 to 100
54.name= ~optimization_activate
54.default= True
54.type= bool
54.desc=Activate the optimization 
55.name= ~optimization_verbose
55.default= False
55.type= bool
55.desc=Print verbose information 
56.name= ~penalty_epsilon
56.default= 0.1
56.type= double
56.desc=Add a small safty margin to penalty functions for hard-constraint approximations Range: 0.0 to 1.0
57.name= ~time_penalty_epsilon
57.default= 0.1
57.type= double
57.desc=Add a safty margin to penalty functions for time optimality contraint Range: 0.0 to 1.0
58.name= ~cap_optimaltime_penalty
58.default= True
58.type= bool
58.desc=Weather to cap optimal time penalty with initial time between teb vertices 
59.name= ~weight_max_vel_x
59.default= 2.0
59.type= double
59.desc=Optimization weight for satisfying the maximum allowed translational velocity Range: 0.0 to 1000.0
60.name= ~weight_max_vel_y
60.default= 2.0
60.type= double
60.desc=Optimization weight for satisfying the maximum allowed strafing velocity (in use only for holonomic robots) Range: 0.0 to 1000.0
61.name= ~weight_max_vel_theta
61.default= 1.0
61.type= double
61.desc=Optimization weight for satisfying the maximum allowed angular velocity Range: 0.0 to 1000.0
62.name= ~weight_acc_lim_x
62.default= 1.0
62.type= double
62.desc=Optimization weight for satisfying the maximum allowed translational acceleration Range: 0.0 to 1000.0
63.name= ~weight_acc_lim_y
63.default= 1.0
63.type= double
63.desc=Optimization weight for satisfying the maximum allowed strafing acceleration (in use only for holonomic robots) Range: 0.0 to 1000.0
64.name= ~weight_acc_lim_theta
64.default= 1.0
64.type= double
64.desc=Optimization weight for satisfying the maximum allowed angular acceleration Range: 0.0 to 1000.0
65.name= ~weight_kinematics_nh
65.default= 1000.0
65.type= double
65.desc=Optimization weight for satisfying the non-holonomic kinematics Range: 0.0 to 10000.0
66.name= ~weight_kinematics_forward_drive
66.default= 1.0
66.type= double
66.desc=Optimization weight for forcing the robot to choose only forward directions (positive transl. velocities, only diffdrive robot) Range: 0.0 to 1000.0
67.name= ~weight_kinematics_turning_radius
67.default= 1.0
67.type= double
67.desc=Optimization weight for enforcing a minimum turning radius (carlike robots) Range: 0.0 to 1000.0
68.name= ~weight_optimaltime
68.default= 1.0
68.type= double
68.desc=Optimization weight for contracting the trajectory w.r.t. transition time Range: 0.0 to 1000.0
69.name= ~weight_shortest_path
69.default= 0.0
69.type= double
69.desc=Optimization weight for contracting the trajectory w.r.t. path length Range: 0.0 to 100.0
70.name= ~weight_obstacle
70.default= 50.0
70.type= double
70.desc=Optimization weight for satisfying a minimum seperation from obstacles Range: 0.0 to 1000.0
71.name= ~weight_inflation
71.default= 0.1
71.type= double
71.desc=Optimization weight for the inflation penalty (should be small) Range: 0.0 to 10.0
72.name= ~weight_dynamic_obstacle
72.default= 50.0
72.type= double
72.desc=Optimization weight for satisfying a minimum seperation from dynamic obstacles Range: 0.0 to 1000.0
73.name= ~weight_dynamic_obstacle_inflation
73.default= 0.1
73.type= double
73.desc=Optimization weight for the inflation penalty of dynamic obstacles (should be small) Range: 0.0 to 10.0
74.name= ~weight_viapoint
74.default= 1.0
74.type= double
74.desc=Optimization weight for minimizing the distance to via-points Range: 0.0 to 1000.0
75.name= ~weight_adapt_factor
75.default= 2.0
75.type= double
75.desc=Some special weights (currently 'weight_obstacle') are repeatedly scaled by this factor in each outer TEB iteration (weight_new: weight_old * factor); Increasing weights iteratively instead of setting a huge value a-priori leads to better numerical conditions of the underlying optimization problem. Range: 1.0 to 100.0
76.name= ~obstacle_cost_exponent
76.default= 1.0
76.type= double
76.desc=Exponent for nonlinear obstacle cost (cost = linear_cost * obstacle_cost_exponent). Set to 1 to disable nonlinear cost (default) Range: 0.01 to 100.0
77.name= ~weight_max_agent_vel_x
77.default= 0.0
77.type= double
77.desc=Optimization weight for satisfying the maximum allowed translational velocity in x axis for agent Range: 2.0 to 1000.0
78.name= ~weight_max_agent_vel_y
78.default= 0.0
78.type= double
78.desc=Optimization weight for satisfying the maximum allowed translational velocity in y axis for agent Range: 2.0 to 1000.0
79.name= ~weight_nominal_agent_vel_x
79.default= 0.0
79.type= double
79.desc=Optimization weight for satisfying the nominal translational velocity for agent Range: 2.0 to 1000.0
80.name= ~weight_max_agent_vel_theta
80.default= 0.0
80.type= double
80.desc=Optimization weight for satisfying the maximum allowed rotational velocity for agent Range: 2.0 to 1000.0
81.name= ~weight_agent_acc_lim_x
81.default= 0.0
81.type= double
81.desc=Optimization weight for satisfying the maximum allowed translational acceleration in x for agent Range: 2.0 to 1000.0
82.name= ~weight_agent_acc_lim_y
82.default= 0.0
82.type= double
82.desc=Optimization weight for satisfying the maximum allowed translational acceleration in y for agent Range: 2.0 to 1000.0
83.name= ~weight_agent_acc_lim_theta
83.default= 0.0
83.type= double
83.desc=Optimization weight for satisfying the maximum allowed rotational acceleration for agent Range: 2.0 to 1000.0
84.name= ~weight_agent_optimaltime
84.default= 1.0
84.type= double
84.desc=Optimization weight for contracting the trajectory w.r.t transition time for agent Range: 0.0 to 1000.0
85.name= ~weight_agent_viapoint
85.default= 1.0
85.type= double
85.desc=Optimization weight for minimizing the distance from agent to its via-points Range: 0.0 to 1000.0
86.name= ~weight_agent_robot_safety
86.default= 20.0
86.type= double
86.desc=Optimization weight for satisfying a minimum seperation between agent and robot Range: 0.0 to 1000.0
87.name= ~weight_agent_agent_safety
87.default= 20.0
87.type= double
87.desc=Optimization weight for satisfying a minimum seperation between each pair of agent Range: 0.0 to 1000.0
88.name= ~weight_agent_robot_ttc
88.default= 20.0
88.type= double
88.desc=Optimization weight for agent-robot time-to-collision checking Range: 0.0 to 1000.0
89.name= ~weight_agent_robot_ttcplus
89.default= 20.0
89.type= double
89.desc=Optimization weight for agent-robot time-to-collision-plus checking Range: 0.0 to 1000.0
90.name= ~weight_agent_robot_rel_vel
90.default= 20.0
90.type= double
90.desc=Optimization weight for agent-robot relative velocity costs Range: 0.0 to 1000.0
91.name= ~weight_agent_robot_visibility
91.default= 20.0
91.type= double
91.desc=Optimization weight for agent-robot visibility costs Range: 0.0 to 1000.0
92.name= ~agent_robot_ttc_scale_alpha
92.default= 1.0
92.type= double
92.desc=Scale alpha for for agent-robot time-to-collision scaling Range: 0.0 to 1000.0
93.name= ~agent_robot_ttcplus_scale_alpha
93.default= 1.0
93.type= double
93.desc=Scale alpha for for agent-robot time-to-collision plus scaling Range: 0.0 to 1000.0
94.name= ~weight_invisible_human
94.default= 20.0
94.type= double
94.desc=Optimization weight for invisible humans' costs Range: 0.0 to 1000.0
95.name= ~fov
95.default= 90.0
95.type= double
95.desc=Horizontal field of view of the agent (degrees). Used for the visibility constraint. If the robot is in the field of view,the visibility constraint is 0 else it increase. Range: 0.0 to 360.0
96.name= ~disable_warm_start
96.default= False
96.type= bool
96.desc=Whether to use warm start for already initiated bands 
97.name= ~disable_rapid_omega_chage
97.default= True
97.type= bool
97.desc=Wheter to disble rapid change of omega value of controller command in post-processing 
98.name= ~omega_chage_time_seperation
98.default= 1.0
98.type= double
98.desc=Minimal amount of time to wait before allowing rapid change in omeag value for controller command in post-processing Range: 0.0 to 10.0
99.name= ~planning_mode
99.default= 1
99.type= int
99.desc=Mode under which planner should run, 0=no-agents/humans, 1=normal, 2=approach Possible values are: DisregardHumans (0): Plan without considering agents/humans in the area, HumanAware (1): Human-Aware planning with mutiple elastic bands, Approach (2): Plan for approach behavior
100.name= ~use_agent_robot_safety_c
100.default= False
100.type= bool
100.desc=Whether to use agent-robot safety constraints 
101.name= ~use_agent_agent_safety_c
101.default= True
101.type= bool
101.desc=Whether to use agent-agent safety constraints 
102.name= ~use_agent_robot_ttc_c
102.default= True
102.type= bool
102.desc=Whether to use agent-robot time-to-collision constraints 
103.name= ~scale_agent_robot_ttc_c
103.default= True
103.type= bool
103.desc=Whether to scale up-down agent-robot time-to-collision constraints with distance 
104.name= ~use_agent_robot_rel_vel_c
104.default= True
104.type= bool
104.desc=Whether to use agent-robot relative velocity constraints 
105.name= ~use_agent_robot_visi_c
105.default= True
105.type= bool
105.desc=Whether to use agent-robot visibility constraints 
106.name= ~use_agent_robot_ttcplus_c
106.default= False
106.type= bool
106.desc=Whether to use agent-robot time-to-collision plus constraints 
107.name= ~add_invisible_humans
107.default= True
107.type= bool
107.desc=Whether to use invisible humans constraint or not 
108.name= ~scale_agent_robot_ttcplus_c
108.default= True
108.type= bool
108.desc=Whether to scale up-down agent-robot time-to-collision plus constraints with distance 
109.name= ~use_agent_elastic_vel
109.default= True
109.type= bool
109.desc=Whether to use elasticity in velocity for agent 
110.name= ~use_external_prediction
110.default= False
110.type= bool
110.desc=Whether to use external prediction or velocity-obstacle method 
111.name= ~predict_agent_behind_robot
111.default= False
111.type= bool
111.desc=Whether to predict agent goal pose behind the robot for external prediction 
112.name= ~predict_agent_goal
112.default= False
112.type= bool
112.desc=Whether to predict agent goal pose for external prediction 
113.name= ~min_agent_robot_dist
113.default= 0.6
113.type= double
113.desc=Minumum allowed distance between agent and robot Range: 0.0 to 5.0
114.name= ~min_agent_agent_dist
114.default= 0.2
114.type= double
114.desc=Minumum allowed distance between two agent Range: 0.0 to 5.0
115.name= ~ttc_threshold
115.default= 5.0
115.type= double
115.desc=Threshold for time-to-collision between agent and robot Range: 0.0 to 100.0
116.name= ~rel_vel_cost_threshold
116.default= 5.0
116.type= double
116.desc=Threshold for relative velocity costs between agent and robot Range: 0.0 to 100.0
117.name= ~invisible_human_threshold
117.default= 5.0
117.type= double
117.desc=Threshold for invisible humans cost Range: 0.0 to 100.0
118.name= ~visibility_cost_threshold
118.default= 5.0
118.type= double
118.desc=Threshold for visibility costs between agent and robot Range: 0.0 to 100.0
119.name= ~agent_pose_prediction_reset_time
119.default= 2.0
119.type= double
119.desc=Time since last call to the planner after which agent pose prediction is resetted Range: 0.0 to 20.0
120.name= ~ttcplus_threshold
120.default= 5.0
120.type= double
120.desc=Threshold for time-to-collision plus between agent and robot Range: 0.0 to 100.0
121.name= ~ttcplus_timer
121.default= 20.0
121.type= double
121.desc=Timer for the ttcplus, how many tenth of second the robot wait before to increase the ttcplus cost Range: 0.0 to 1000.0
122.name= ~approach_id
122.default= 1
122.type= int
122.desc=ID of the tracked person to approach Range: 1 to 32767
123.name= ~approach_dist
123.default= 0.5
123.type= double
123.desc=Goal distance in front of the agent, for approach behavior Range: 0.0 to 5.0
124.name= ~approach_angle
124.default= 3.14
124.type= double
124.desc=Goal angle that defines in-fornt-of-the-agent, for approach behavior Range: 0.0 to 6.28
125.name= ~approach_dist_tolerance
125.default= 0.2
125.type= double
125.desc=Goal distance tolerance for adding new point to the global path of the robot Range: 0.0 to 5.0
126.name= ~approach_angle_tolerance
126.default= 0.3
126.type= double
126.desc=Goal angle tolerance for adding new point to the global path of the robot Range: 0.0 to 6.28
127.name= ~enable_multithreading
127.default= True
127.type= bool
127.desc=Activate multiple threading for planning multiple trajectories in parallel 
128.name= ~max_number_classes
128.default= 5
128.type= int
128.desc=Specify the maximum number of allowed alternative homotopy classes (limits computational effort) Range: 1 to 100
129.name= ~selection_cost_hysteresis
129.default= 1.0
129.type= double
129.desc=Specify how much trajectory cost must a new candidate have w.r.t. a previously selected trajectory in order to be selected (selection if new_cost < old_cost*factor) Range: 0.0 to 2.0
130.name= ~selection_prefer_initial_plan
130.default= 0.95
130.type= double
130.desc=Specify a cost reduction in the interval (0,1) for the trajectory in the equivalence class of the initial plan.) Range: 0.0 to 1.0
131.name= ~selection_obst_cost_scale
131.default= 2.0
131.type= double
131.desc=Extra scaling of obstacle cost terms just for selecting the 'best' candidate (new_obst_cost: obst_cost*factor) Range: 0.0 to 1000.0
132.name= ~selection_viapoint_cost_scale
132.default= 1.0
132.type= double
132.desc=Extra scaling of via-point cost terms just for selecting the 'best' candidate. (new_viapt_cost: viapt_cost*factor) Range: 0.0 to 100.0
133.name= ~selection_alternative_time_cost
133.default= False
133.type= bool
133.desc=If true, time cost is replaced by the total transition time. 
134.name= ~switching_blocking_period
134.default= 0.0
134.type= double
134.desc=Specify a time duration in seconds that needs to be expired before a switch to new equivalence class is allowed Range: 0.0 to 60.0
135.name= ~roadmap_graph_no_samples
135.default= 15
135.type= int
135.desc=Specify the number of samples generated for creating the roadmap graph, if simple_exploration is turend off Range: 1 to 100
136.name= ~roadmap_graph_area_width
136.default= 5.0
136.type= double
136.desc=Specify the width of the area in which sampled will be generated between start and goal [m] (the height equals the start-goal distance) Range: 0.1 to 20.0
137.name= ~roadmap_graph_area_length_scale
137.default= 1.0
137.type= double
137.desc=The length of the rectangular region is determined by the distance between start and goal. This parameter further scales the distance such that the geometric center remains equal!) Range: 0.5 to 2.0
138.name= ~h_signature_prescaler
138.default= 1.0
138.type= double
138.desc=Scale number of obstacle value in order to allow huge number of obstacles. Do not choose it extremly low, otherwise obstacles cannot be distinguished from each other (0.2<H<=1) Range: 0.2 to 1.0
139.name= ~h_signature_threshold
139.default= 0.1
139.type= double
139.desc=Two h-signuteres are assumed to be equal, if both the difference of real parts and complex parts are below the specified threshold Range: 0.0 to 1.0
140.name= ~obstacle_heading_threshold
140.default= 0.45
140.type= double
140.desc=Specify the value of the normalized scalar product between obstacle heading and goal heading in order to take them (obstacles) into account for exploration) Range: 0.0 to 1.0
141.name= ~viapoints_all_candidates
141.default= True
141.type= bool
141.desc=If true, all trajectories of different topologies are attached to the set of via-points, otherwise only the trajectory sharing the same one as the initial/global plan is attached (no effect in test_optim_node). 
142.name= ~visualize_hc_graph
142.default= False
142.type= bool
142.desc=Visualize the graph that is created for exploring new homotopy classes 
143.name= ~shrink_horizon_backup
143.default= True
143.type= bool
143.desc=Allows the planner to shrink the horizon temporary (50%) in case of automatically detected issues. 
144.name= ~oscillation_recovery
144.default= True
144.type= bool
144.desc=Try to detect and resolve oscillations between multiple solutions in the same equivalence class (robot frequently switches between left/right/forward/backwards). 
145.name= ~publish_robot_global_plan
145.default= True
145.type= bool
145.desc=Whether to publish the global robot plan. 
146.name= ~publish_robot_local_plan
146.default= True
146.type= bool
146.desc=Whether to publish the local robot plan. 
147.name= ~publish_robot_local_plan_poses
147.default= False
147.type= bool
147.desc=Whether to publish the robot local plan poses. 
148.name= ~publish_robot_local_plan_fp_poses
148.default= False
148.type= bool
148.desc=Whether to publish robot footprint at the local plan poses. 
149.name= ~publish_agents_global_plans
149.default= False
149.type= bool
149.desc=Whether to publish global agents plans. 
150.name= ~publish_agents_local_plans
150.default= True
150.type= bool
150.desc=Whether to publish the full agents optimized trajectories. 
151.name= ~publish_agents_local_plan_poses
151.default= False
151.type= bool
151.desc=Whether to publish the posed for optimized agents trajectories. 
152.name= ~publish_agents_local_plan_fp_poses
152.default= False
152.type= bool
152.desc=Whether to publish robot footprint at the posed for optimized agents trajectories. 
153.name= ~pose_array_z_scale
153.default= 1.0
153.type= double
153.desc=Multiplier to show time on z value of pose array for agents and robot Range: 0.0 to 100.0
}
}
# End of autogenerated section. You may edit below.
