// Generated by gencpp from file hateb_local_planner/OptimizationCostArray.msg
// DO NOT EDIT!


#ifndef HATEB_LOCAL_PLANNER_MESSAGE_OPTIMIZATIONCOSTARRAY_H
#define HATEB_LOCAL_PLANNER_MESSAGE_OPTIMIZATIONCOSTARRAY_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>
#include <hateb_local_planner/OptimizationCost.h>

namespace hateb_local_planner
{
template <class ContainerAllocator>
struct OptimizationCostArray_
{
  typedef OptimizationCostArray_<ContainerAllocator> Type;

  OptimizationCostArray_()
    : header()
    , costs()  {
    }
  OptimizationCostArray_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , costs(_alloc)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef std::vector< ::hateb_local_planner::OptimizationCost_<ContainerAllocator> , typename std::allocator_traits<ContainerAllocator>::template rebind_alloc< ::hateb_local_planner::OptimizationCost_<ContainerAllocator> >> _costs_type;
  _costs_type costs;





  typedef boost::shared_ptr< ::hateb_local_planner::OptimizationCostArray_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::hateb_local_planner::OptimizationCostArray_<ContainerAllocator> const> ConstPtr;

}; // struct OptimizationCostArray_

typedef ::hateb_local_planner::OptimizationCostArray_<std::allocator<void> > OptimizationCostArray;

typedef boost::shared_ptr< ::hateb_local_planner::OptimizationCostArray > OptimizationCostArrayPtr;
typedef boost::shared_ptr< ::hateb_local_planner::OptimizationCostArray const> OptimizationCostArrayConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::hateb_local_planner::OptimizationCostArray_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::hateb_local_planner::OptimizationCostArray_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::hateb_local_planner::OptimizationCostArray_<ContainerAllocator1> & lhs, const ::hateb_local_planner::OptimizationCostArray_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.costs == rhs.costs;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::hateb_local_planner::OptimizationCostArray_<ContainerAllocator1> & lhs, const ::hateb_local_planner::OptimizationCostArray_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace hateb_local_planner

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::hateb_local_planner::OptimizationCostArray_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::hateb_local_planner::OptimizationCostArray_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::hateb_local_planner::OptimizationCostArray_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::hateb_local_planner::OptimizationCostArray_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::hateb_local_planner::OptimizationCostArray_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::hateb_local_planner::OptimizationCostArray_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::hateb_local_planner::OptimizationCostArray_<ContainerAllocator> >
{
  static const char* value()
  {
    return "6278d232d18141b2ca3d171f8cdec014";
  }

  static const char* value(const ::hateb_local_planner::OptimizationCostArray_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x6278d232d18141b2ULL;
  static const uint64_t static_value2 = 0xca3d171f8cdec014ULL;
};

template<class ContainerAllocator>
struct DataType< ::hateb_local_planner::OptimizationCostArray_<ContainerAllocator> >
{
  static const char* value()
  {
    return "hateb_local_planner/OptimizationCostArray";
  }

  static const char* value(const ::hateb_local_planner::OptimizationCostArray_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::hateb_local_planner::OptimizationCostArray_<ContainerAllocator> >
{
  static const char* value()
  {
    return "std_msgs/Header header\n"
"hateb_local_planner/OptimizationCost[] costs\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
"\n"
"================================================================================\n"
"MSG: hateb_local_planner/OptimizationCost\n"
"# cost types\n"
"int8 TIME_OPTIMALITY=0\n"
"int8 KINEMATIC_DD=1\n"
"int8 KINEMATIC_CL=2\n"
"int8 ROBOT_VEL=3\n"
"int8 AGENT_VEL=4\n"
"int8 ROBOT_ACC=5\n"
"int8 AGENT_ACC=6\n"
"int8 OBSTACLE=7\n"
"int8 DYNAMIC_OBSTACLE=8\n"
"int8 VIA_POINT=9\n"
"int8 AGENT_ROBOT_SAFETY=10\n"
"int8 AGENT_AGENT_SAFETY=11\n"
"int8 AGENT_ROBOT_TTC=12\n"
"int8 AGENT_ROBOT_REL_VEL=13\n"
"int8 AGENT_ROBOT_MIN_DIST=14\n"
"int8 AGENT_ROBOT_VISIBILITY=15\n"
"int8 AGENT_ROBOT_TTClosest=16\n"
"int8 AGENT_ROBOT_TTCplus=17\n"
"\n"
"int8    type\n"
"float64 cost\n"
"float64[] costs_arr\n"
;
  }

  static const char* value(const ::hateb_local_planner::OptimizationCostArray_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::hateb_local_planner::OptimizationCostArray_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.costs);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct OptimizationCostArray_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::hateb_local_planner::OptimizationCostArray_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::hateb_local_planner::OptimizationCostArray_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "costs[]" << std::endl;
    for (size_t i = 0; i < v.costs.size(); ++i)
    {
      s << indent << "  costs[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::hateb_local_planner::OptimizationCost_<ContainerAllocator> >::stream(s, indent + "    ", v.costs[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // HATEB_LOCAL_PLANNER_MESSAGE_OPTIMIZATIONCOSTARRAY_H
