// Generated by gencpp from file hateb_local_planner/OptimizationCost.msg
// DO NOT EDIT!


#ifndef HATEB_LOCAL_PLANNER_MESSAGE_OPTIMIZATIONCOST_H
#define HATEB_LOCAL_PLANNER_MESSAGE_OPTIMIZATIONCOST_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace hateb_local_planner
{
template <class ContainerAllocator>
struct OptimizationCost_
{
  typedef OptimizationCost_<ContainerAllocator> Type;

  OptimizationCost_()
    : type(0)
    , cost(0.0)
    , costs_arr()  {
    }
  OptimizationCost_(const ContainerAllocator& _alloc)
    : type(0)
    , cost(0.0)
    , costs_arr(_alloc)  {
  (void)_alloc;
    }



   typedef int8_t _type_type;
  _type_type type;

   typedef double _cost_type;
  _cost_type cost;

   typedef std::vector<double, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<double>> _costs_arr_type;
  _costs_arr_type costs_arr;



// reducing the odds to have name collisions with Windows.h 
#if defined(_WIN32) && defined(TIME_OPTIMALITY)
  #undef TIME_OPTIMALITY
#endif
#if defined(_WIN32) && defined(KINEMATIC_DD)
  #undef KINEMATIC_DD
#endif
#if defined(_WIN32) && defined(KINEMATIC_CL)
  #undef KINEMATIC_CL
#endif
#if defined(_WIN32) && defined(ROBOT_VEL)
  #undef ROBOT_VEL
#endif
#if defined(_WIN32) && defined(AGENT_VEL)
  #undef AGENT_VEL
#endif
#if defined(_WIN32) && defined(ROBOT_ACC)
  #undef ROBOT_ACC
#endif
#if defined(_WIN32) && defined(AGENT_ACC)
  #undef AGENT_ACC
#endif
#if defined(_WIN32) && defined(OBSTACLE)
  #undef OBSTACLE
#endif
#if defined(_WIN32) && defined(DYNAMIC_OBSTACLE)
  #undef DYNAMIC_OBSTACLE
#endif
#if defined(_WIN32) && defined(VIA_POINT)
  #undef VIA_POINT
#endif
#if defined(_WIN32) && defined(AGENT_ROBOT_SAFETY)
  #undef AGENT_ROBOT_SAFETY
#endif
#if defined(_WIN32) && defined(AGENT_AGENT_SAFETY)
  #undef AGENT_AGENT_SAFETY
#endif
#if defined(_WIN32) && defined(AGENT_ROBOT_TTC)
  #undef AGENT_ROBOT_TTC
#endif
#if defined(_WIN32) && defined(AGENT_ROBOT_REL_VEL)
  #undef AGENT_ROBOT_REL_VEL
#endif
#if defined(_WIN32) && defined(AGENT_ROBOT_MIN_DIST)
  #undef AGENT_ROBOT_MIN_DIST
#endif
#if defined(_WIN32) && defined(AGENT_ROBOT_VISIBILITY)
  #undef AGENT_ROBOT_VISIBILITY
#endif
#if defined(_WIN32) && defined(AGENT_ROBOT_TTClosest)
  #undef AGENT_ROBOT_TTClosest
#endif
#if defined(_WIN32) && defined(AGENT_ROBOT_TTCplus)
  #undef AGENT_ROBOT_TTCplus
#endif

  enum {
    TIME_OPTIMALITY = 0,
    KINEMATIC_DD = 1,
    KINEMATIC_CL = 2,
    ROBOT_VEL = 3,
    AGENT_VEL = 4,
    ROBOT_ACC = 5,
    AGENT_ACC = 6,
    OBSTACLE = 7,
    DYNAMIC_OBSTACLE = 8,
    VIA_POINT = 9,
    AGENT_ROBOT_SAFETY = 10,
    AGENT_AGENT_SAFETY = 11,
    AGENT_ROBOT_TTC = 12,
    AGENT_ROBOT_REL_VEL = 13,
    AGENT_ROBOT_MIN_DIST = 14,
    AGENT_ROBOT_VISIBILITY = 15,
    AGENT_ROBOT_TTClosest = 16,
    AGENT_ROBOT_TTCplus = 17,
  };


  typedef boost::shared_ptr< ::hateb_local_planner::OptimizationCost_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::hateb_local_planner::OptimizationCost_<ContainerAllocator> const> ConstPtr;

}; // struct OptimizationCost_

typedef ::hateb_local_planner::OptimizationCost_<std::allocator<void> > OptimizationCost;

typedef boost::shared_ptr< ::hateb_local_planner::OptimizationCost > OptimizationCostPtr;
typedef boost::shared_ptr< ::hateb_local_planner::OptimizationCost const> OptimizationCostConstPtr;

// constants requiring out of line definition

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::hateb_local_planner::OptimizationCost_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::hateb_local_planner::OptimizationCost_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::hateb_local_planner::OptimizationCost_<ContainerAllocator1> & lhs, const ::hateb_local_planner::OptimizationCost_<ContainerAllocator2> & rhs)
{
  return lhs.type == rhs.type &&
    lhs.cost == rhs.cost &&
    lhs.costs_arr == rhs.costs_arr;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::hateb_local_planner::OptimizationCost_<ContainerAllocator1> & lhs, const ::hateb_local_planner::OptimizationCost_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace hateb_local_planner

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::hateb_local_planner::OptimizationCost_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::hateb_local_planner::OptimizationCost_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::hateb_local_planner::OptimizationCost_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::hateb_local_planner::OptimizationCost_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::hateb_local_planner::OptimizationCost_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::hateb_local_planner::OptimizationCost_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::hateb_local_planner::OptimizationCost_<ContainerAllocator> >
{
  static const char* value()
  {
    return "7d4c381ecf0f9fe4378c92efd02e5a2d";
  }

  static const char* value(const ::hateb_local_planner::OptimizationCost_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x7d4c381ecf0f9fe4ULL;
  static const uint64_t static_value2 = 0x378c92efd02e5a2dULL;
};

template<class ContainerAllocator>
struct DataType< ::hateb_local_planner::OptimizationCost_<ContainerAllocator> >
{
  static const char* value()
  {
    return "hateb_local_planner/OptimizationCost";
  }

  static const char* value(const ::hateb_local_planner::OptimizationCost_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::hateb_local_planner::OptimizationCost_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# cost types\n"
"int8 TIME_OPTIMALITY=0\n"
"int8 KINEMATIC_DD=1\n"
"int8 KINEMATIC_CL=2\n"
"int8 ROBOT_VEL=3\n"
"int8 AGENT_VEL=4\n"
"int8 ROBOT_ACC=5\n"
"int8 AGENT_ACC=6\n"
"int8 OBSTACLE=7\n"
"int8 DYNAMIC_OBSTACLE=8\n"
"int8 VIA_POINT=9\n"
"int8 AGENT_ROBOT_SAFETY=10\n"
"int8 AGENT_AGENT_SAFETY=11\n"
"int8 AGENT_ROBOT_TTC=12\n"
"int8 AGENT_ROBOT_REL_VEL=13\n"
"int8 AGENT_ROBOT_MIN_DIST=14\n"
"int8 AGENT_ROBOT_VISIBILITY=15\n"
"int8 AGENT_ROBOT_TTClosest=16\n"
"int8 AGENT_ROBOT_TTCplus=17\n"
"\n"
"int8    type\n"
"float64 cost\n"
"float64[] costs_arr\n"
;
  }

  static const char* value(const ::hateb_local_planner::OptimizationCost_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::hateb_local_planner::OptimizationCost_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.type);
      stream.next(m.cost);
      stream.next(m.costs_arr);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct OptimizationCost_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::hateb_local_planner::OptimizationCost_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::hateb_local_planner::OptimizationCost_<ContainerAllocator>& v)
  {
    s << indent << "type: ";
    Printer<int8_t>::stream(s, indent + "  ", v.type);
    s << indent << "cost: ";
    Printer<double>::stream(s, indent + "  ", v.cost);
    s << indent << "costs_arr[]" << std::endl;
    for (size_t i = 0; i < v.costs_arr.size(); ++i)
    {
      s << indent << "  costs_arr[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.costs_arr[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // HATEB_LOCAL_PLANNER_MESSAGE_OPTIMIZATIONCOST_H
