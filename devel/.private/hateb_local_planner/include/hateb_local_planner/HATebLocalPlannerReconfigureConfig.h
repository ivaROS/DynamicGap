//#line 2 "/opt/ros/noetic/share/dynamic_reconfigure/cmake/../templates/ConfigType.h.template"
// *********************************************************
//
// File autogenerated for the hateb_local_planner package
// by the dynamic_reconfigure package.
// Please do not edit.
//
// ********************************************************/

#ifndef __hateb_local_planner__HATEBLOCALPLANNERRECONFIGURECONFIG_H__
#define __hateb_local_planner__HATEBLOCALPLANNERRECONFIGURECONFIG_H__

#if __cplusplus >= 201103L
#define DYNAMIC_RECONFIGURE_FINAL final
#else
#define DYNAMIC_RECONFIGURE_FINAL
#endif

#include <dynamic_reconfigure/config_tools.h>
#include <limits>
#include <ros/node_handle.h>
#include <dynamic_reconfigure/ConfigDescription.h>
#include <dynamic_reconfigure/ParamDescription.h>
#include <dynamic_reconfigure/Group.h>
#include <dynamic_reconfigure/config_init_mutex.h>
#include <boost/any.hpp>

namespace hateb_local_planner
{
  class HATebLocalPlannerReconfigureConfigStatics;

  class HATebLocalPlannerReconfigureConfig
  {
  public:
    class AbstractParamDescription : public dynamic_reconfigure::ParamDescription
    {
    public:
      AbstractParamDescription(std::string n, std::string t, uint32_t l,
          std::string d, std::string e)
      {
        name = n;
        type = t;
        level = l;
        description = d;
        edit_method = e;
      }
      virtual ~AbstractParamDescription() = default;

      virtual void clamp(HATebLocalPlannerReconfigureConfig &config, const HATebLocalPlannerReconfigureConfig &max, const HATebLocalPlannerReconfigureConfig &min) const = 0;
      virtual void calcLevel(uint32_t &level, const HATebLocalPlannerReconfigureConfig &config1, const HATebLocalPlannerReconfigureConfig &config2) const = 0;
      virtual void fromServer(const ros::NodeHandle &nh, HATebLocalPlannerReconfigureConfig &config) const = 0;
      virtual void toServer(const ros::NodeHandle &nh, const HATebLocalPlannerReconfigureConfig &config) const = 0;
      virtual bool fromMessage(const dynamic_reconfigure::Config &msg, HATebLocalPlannerReconfigureConfig &config) const = 0;
      virtual void toMessage(dynamic_reconfigure::Config &msg, const HATebLocalPlannerReconfigureConfig &config) const = 0;
      virtual void getValue(const HATebLocalPlannerReconfigureConfig &config, boost::any &val) const = 0;
    };

    typedef boost::shared_ptr<AbstractParamDescription> AbstractParamDescriptionPtr;
    typedef boost::shared_ptr<const AbstractParamDescription> AbstractParamDescriptionConstPtr;

    // Final keyword added to class because it has virtual methods and inherits
    // from a class with a non-virtual destructor.
    template <class T>
    class ParamDescription DYNAMIC_RECONFIGURE_FINAL : public AbstractParamDescription
    {
    public:
      ParamDescription(std::string a_name, std::string a_type, uint32_t a_level,
          std::string a_description, std::string a_edit_method, T HATebLocalPlannerReconfigureConfig::* a_f) :
        AbstractParamDescription(a_name, a_type, a_level, a_description, a_edit_method),
        field(a_f)
      {}

      T HATebLocalPlannerReconfigureConfig::* field;

      virtual void clamp(HATebLocalPlannerReconfigureConfig &config, const HATebLocalPlannerReconfigureConfig &max, const HATebLocalPlannerReconfigureConfig &min) const override
      {
        if (config.*field > max.*field)
          config.*field = max.*field;

        if (config.*field < min.*field)
          config.*field = min.*field;
      }

      virtual void calcLevel(uint32_t &comb_level, const HATebLocalPlannerReconfigureConfig &config1, const HATebLocalPlannerReconfigureConfig &config2) const override
      {
        if (config1.*field != config2.*field)
          comb_level |= level;
      }

      virtual void fromServer(const ros::NodeHandle &nh, HATebLocalPlannerReconfigureConfig &config) const override
      {
        nh.getParam(name, config.*field);
      }

      virtual void toServer(const ros::NodeHandle &nh, const HATebLocalPlannerReconfigureConfig &config) const override
      {
        nh.setParam(name, config.*field);
      }

      virtual bool fromMessage(const dynamic_reconfigure::Config &msg, HATebLocalPlannerReconfigureConfig &config) const override
      {
        return dynamic_reconfigure::ConfigTools::getParameter(msg, name, config.*field);
      }

      virtual void toMessage(dynamic_reconfigure::Config &msg, const HATebLocalPlannerReconfigureConfig &config) const override
      {
        dynamic_reconfigure::ConfigTools::appendParameter(msg, name, config.*field);
      }

      virtual void getValue(const HATebLocalPlannerReconfigureConfig &config, boost::any &val) const override
      {
        val = config.*field;
      }
    };

    class AbstractGroupDescription : public dynamic_reconfigure::Group
    {
      public:
      AbstractGroupDescription(std::string n, std::string t, int p, int i, bool s)
      {
        name = n;
        type = t;
        parent = p;
        state = s;
        id = i;
      }

      virtual ~AbstractGroupDescription() = default;

      std::vector<AbstractParamDescriptionConstPtr> abstract_parameters;
      bool state;

      virtual void toMessage(dynamic_reconfigure::Config &msg, const boost::any &config) const = 0;
      virtual bool fromMessage(const dynamic_reconfigure::Config &msg, boost::any &config) const =0;
      virtual void updateParams(boost::any &cfg, HATebLocalPlannerReconfigureConfig &top) const= 0;
      virtual void setInitialState(boost::any &cfg) const = 0;


      void convertParams()
      {
        for(std::vector<AbstractParamDescriptionConstPtr>::const_iterator i = abstract_parameters.begin(); i != abstract_parameters.end(); ++i)
        {
          parameters.push_back(dynamic_reconfigure::ParamDescription(**i));
        }
      }
    };

    typedef boost::shared_ptr<AbstractGroupDescription> AbstractGroupDescriptionPtr;
    typedef boost::shared_ptr<const AbstractGroupDescription> AbstractGroupDescriptionConstPtr;

    // Final keyword added to class because it has virtual methods and inherits
    // from a class with a non-virtual destructor.
    template<class T, class PT>
    class GroupDescription DYNAMIC_RECONFIGURE_FINAL : public AbstractGroupDescription
    {
    public:
      GroupDescription(std::string a_name, std::string a_type, int a_parent, int a_id, bool a_s, T PT::* a_f) : AbstractGroupDescription(a_name, a_type, a_parent, a_id, a_s), field(a_f)
      {
      }

      GroupDescription(const GroupDescription<T, PT>& g): AbstractGroupDescription(g.name, g.type, g.parent, g.id, g.state), field(g.field), groups(g.groups)
      {
        parameters = g.parameters;
        abstract_parameters = g.abstract_parameters;
      }

      virtual bool fromMessage(const dynamic_reconfigure::Config &msg, boost::any &cfg) const override
      {
        PT* config = boost::any_cast<PT*>(cfg);
        if(!dynamic_reconfigure::ConfigTools::getGroupState(msg, name, (*config).*field))
          return false;

        for(std::vector<AbstractGroupDescriptionConstPtr>::const_iterator i = groups.begin(); i != groups.end(); ++i)
        {
          boost::any n = &((*config).*field);
          if(!(*i)->fromMessage(msg, n))
            return false;
        }

        return true;
      }

      virtual void setInitialState(boost::any &cfg) const override
      {
        PT* config = boost::any_cast<PT*>(cfg);
        T* group = &((*config).*field);
        group->state = state;

        for(std::vector<AbstractGroupDescriptionConstPtr>::const_iterator i = groups.begin(); i != groups.end(); ++i)
        {
          boost::any n = boost::any(&((*config).*field));
          (*i)->setInitialState(n);
        }

      }

      virtual void updateParams(boost::any &cfg, HATebLocalPlannerReconfigureConfig &top) const override
      {
        PT* config = boost::any_cast<PT*>(cfg);

        T* f = &((*config).*field);
        f->setParams(top, abstract_parameters);

        for(std::vector<AbstractGroupDescriptionConstPtr>::const_iterator i = groups.begin(); i != groups.end(); ++i)
        {
          boost::any n = &((*config).*field);
          (*i)->updateParams(n, top);
        }
      }

      virtual void toMessage(dynamic_reconfigure::Config &msg, const boost::any &cfg) const override
      {
        const PT config = boost::any_cast<PT>(cfg);
        dynamic_reconfigure::ConfigTools::appendGroup<T>(msg, name, id, parent, config.*field);

        for(std::vector<AbstractGroupDescriptionConstPtr>::const_iterator i = groups.begin(); i != groups.end(); ++i)
        {
          (*i)->toMessage(msg, config.*field);
        }
      }

      T PT::* field;
      std::vector<HATebLocalPlannerReconfigureConfig::AbstractGroupDescriptionConstPtr> groups;
    };

class DEFAULT
{
  public:
    DEFAULT()
    {
      state = true;
      name = "Default";
    }

    void setParams(HATebLocalPlannerReconfigureConfig &config, const std::vector<AbstractParamDescriptionConstPtr> params)
    {
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator _i = params.begin(); _i != params.end(); ++_i)
      {
        boost::any val;
        (*_i)->getValue(config, val);


      }
    }

    

    bool state;
    std::string name;

    class TRAJECTORY
{
  public:
    TRAJECTORY()
    {
      state = true;
      name = "Trajectory";
    }

    void setParams(HATebLocalPlannerReconfigureConfig &config, const std::vector<AbstractParamDescriptionConstPtr> params)
    {
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator _i = params.begin(); _i != params.end(); ++_i)
      {
        boost::any val;
        (*_i)->getValue(config, val);

        if("teb_autosize"==(*_i)->name){teb_autosize = boost::any_cast<bool>(val);}
        if("dt_ref"==(*_i)->name){dt_ref = boost::any_cast<double>(val);}
        if("dt_hysteresis"==(*_i)->name){dt_hysteresis = boost::any_cast<double>(val);}
        if("global_plan_overwrite_orientation"==(*_i)->name){global_plan_overwrite_orientation = boost::any_cast<bool>(val);}
        if("allow_init_with_backwards_motion"==(*_i)->name){allow_init_with_backwards_motion = boost::any_cast<bool>(val);}
        if("max_global_plan_lookahead_dist"==(*_i)->name){max_global_plan_lookahead_dist = boost::any_cast<double>(val);}
        if("force_reinit_new_goal_dist"==(*_i)->name){force_reinit_new_goal_dist = boost::any_cast<double>(val);}
        if("force_reinit_new_goal_angular"==(*_i)->name){force_reinit_new_goal_angular = boost::any_cast<double>(val);}
        if("feasibility_check_no_poses"==(*_i)->name){feasibility_check_no_poses = boost::any_cast<int>(val);}
        if("exact_arc_length"==(*_i)->name){exact_arc_length = boost::any_cast<bool>(val);}
        if("publish_feedback"==(*_i)->name){publish_feedback = boost::any_cast<bool>(val);}
        if("visualize_with_time_as_z_axis_scale"==(*_i)->name){visualize_with_time_as_z_axis_scale = boost::any_cast<double>(val);}
        if("horizon_reduction_amount"==(*_i)->name){horizon_reduction_amount = boost::any_cast<double>(val);}
        if("teb_init_skip_dist"==(*_i)->name){teb_init_skip_dist = boost::any_cast<double>(val);}
      }
    }

    bool teb_autosize;
double dt_ref;
double dt_hysteresis;
bool global_plan_overwrite_orientation;
bool allow_init_with_backwards_motion;
double max_global_plan_lookahead_dist;
double force_reinit_new_goal_dist;
double force_reinit_new_goal_angular;
int feasibility_check_no_poses;
bool exact_arc_length;
bool publish_feedback;
double visualize_with_time_as_z_axis_scale;
double horizon_reduction_amount;
double teb_init_skip_dist;

    bool state;
    std::string name;

    
}trajectory;

class VIAPOINTS
{
  public:
    VIAPOINTS()
    {
      state = true;
      name = "ViaPoints";
    }

    void setParams(HATebLocalPlannerReconfigureConfig &config, const std::vector<AbstractParamDescriptionConstPtr> params)
    {
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator _i = params.begin(); _i != params.end(); ++_i)
      {
        boost::any val;
        (*_i)->getValue(config, val);

        if("global_plan_viapoint_sep"==(*_i)->name){global_plan_viapoint_sep = boost::any_cast<double>(val);}
        if("via_points_ordered"==(*_i)->name){via_points_ordered = boost::any_cast<bool>(val);}
      }
    }

    double global_plan_viapoint_sep;
bool via_points_ordered;

    bool state;
    std::string name;

    
}viapoints;

class ROBOT
{
  public:
    ROBOT()
    {
      state = true;
      name = "Robot";
    }

    void setParams(HATebLocalPlannerReconfigureConfig &config, const std::vector<AbstractParamDescriptionConstPtr> params)
    {
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator _i = params.begin(); _i != params.end(); ++_i)
      {
        boost::any val;
        (*_i)->getValue(config, val);

        if("max_vel_x"==(*_i)->name){max_vel_x = boost::any_cast<double>(val);}
        if("max_vel_x_backwards"==(*_i)->name){max_vel_x_backwards = boost::any_cast<double>(val);}
        if("max_vel_theta"==(*_i)->name){max_vel_theta = boost::any_cast<double>(val);}
        if("acc_lim_x"==(*_i)->name){acc_lim_x = boost::any_cast<double>(val);}
        if("acc_lim_theta"==(*_i)->name){acc_lim_theta = boost::any_cast<double>(val);}
        if("is_footprint_dynamic"==(*_i)->name){is_footprint_dynamic = boost::any_cast<bool>(val);}
        if("is_real"==(*_i)->name){is_real = boost::any_cast<bool>(val);}
      }
    }

    double max_vel_x;
double max_vel_x_backwards;
double max_vel_theta;
double acc_lim_x;
double acc_lim_theta;
bool is_footprint_dynamic;
bool is_real;

    bool state;
    std::string name;

    class CARLIKE
{
  public:
    CARLIKE()
    {
      state = true;
      name = "Carlike";
    }

    void setParams(HATebLocalPlannerReconfigureConfig &config, const std::vector<AbstractParamDescriptionConstPtr> params)
    {
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator _i = params.begin(); _i != params.end(); ++_i)
      {
        boost::any val;
        (*_i)->getValue(config, val);

        if("min_turning_radius"==(*_i)->name){min_turning_radius = boost::any_cast<double>(val);}
        if("wheelbase"==(*_i)->name){wheelbase = boost::any_cast<double>(val);}
        if("cmd_angle_instead_rotvel"==(*_i)->name){cmd_angle_instead_rotvel = boost::any_cast<bool>(val);}
      }
    }

    double min_turning_radius;
double wheelbase;
bool cmd_angle_instead_rotvel;

    bool state;
    std::string name;

    
}carlike;

class OMNIDIRECTIONAL
{
  public:
    OMNIDIRECTIONAL()
    {
      state = true;
      name = "Omnidirectional";
    }

    void setParams(HATebLocalPlannerReconfigureConfig &config, const std::vector<AbstractParamDescriptionConstPtr> params)
    {
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator _i = params.begin(); _i != params.end(); ++_i)
      {
        boost::any val;
        (*_i)->getValue(config, val);

        if("max_vel_y"==(*_i)->name){max_vel_y = boost::any_cast<double>(val);}
        if("acc_lim_y"==(*_i)->name){acc_lim_y = boost::any_cast<double>(val);}
      }
    }

    double max_vel_y;
double acc_lim_y;

    bool state;
    std::string name;

    
}omnidirectional;

}robot;

class OTHER_AGENTS
{
  public:
    OTHER_AGENTS()
    {
      state = true;
      name = "Other_Agents";
    }

    void setParams(HATebLocalPlannerReconfigureConfig &config, const std::vector<AbstractParamDescriptionConstPtr> params)
    {
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator _i = params.begin(); _i != params.end(); ++_i)
      {
        boost::any val;
        (*_i)->getValue(config, val);

        if("max_agent_vel_x"==(*_i)->name){max_agent_vel_x = boost::any_cast<double>(val);}
        if("nominal_agent_vel_x"==(*_i)->name){nominal_agent_vel_x = boost::any_cast<double>(val);}
        if("max_agent_vel_x_backwards"==(*_i)->name){max_agent_vel_x_backwards = boost::any_cast<double>(val);}
        if("max_agent_vel_theta"==(*_i)->name){max_agent_vel_theta = boost::any_cast<double>(val);}
        if("agent_acc_lim_x"==(*_i)->name){agent_acc_lim_x = boost::any_cast<double>(val);}
        if("agent_acc_lim_theta"==(*_i)->name){agent_acc_lim_theta = boost::any_cast<double>(val);}
        if("num_moving_avg"==(*_i)->name){num_moving_avg = boost::any_cast<int>(val);}
        if("max_agent_vel_y"==(*_i)->name){max_agent_vel_y = boost::any_cast<double>(val);}
        if("agent_acc_lim_y"==(*_i)->name){agent_acc_lim_y = boost::any_cast<double>(val);}
      }
    }

    double max_agent_vel_x;
double nominal_agent_vel_x;
double max_agent_vel_x_backwards;
double max_agent_vel_theta;
double agent_acc_lim_x;
double agent_acc_lim_theta;
int num_moving_avg;
double max_agent_vel_y;
double agent_acc_lim_y;

    bool state;
    std::string name;

    
}other_agents;

class GOALTOLERANCE
{
  public:
    GOALTOLERANCE()
    {
      state = true;
      name = "GoalTolerance";
    }

    void setParams(HATebLocalPlannerReconfigureConfig &config, const std::vector<AbstractParamDescriptionConstPtr> params)
    {
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator _i = params.begin(); _i != params.end(); ++_i)
      {
        boost::any val;
        (*_i)->getValue(config, val);

        if("xy_goal_tolerance"==(*_i)->name){xy_goal_tolerance = boost::any_cast<double>(val);}
        if("yaw_goal_tolerance"==(*_i)->name){yaw_goal_tolerance = boost::any_cast<double>(val);}
        if("free_goal_vel"==(*_i)->name){free_goal_vel = boost::any_cast<bool>(val);}
      }
    }

    double xy_goal_tolerance;
double yaw_goal_tolerance;
bool free_goal_vel;

    bool state;
    std::string name;

    
}goaltolerance;

class OBSTACLES
{
  public:
    OBSTACLES()
    {
      state = true;
      name = "Obstacles";
    }

    void setParams(HATebLocalPlannerReconfigureConfig &config, const std::vector<AbstractParamDescriptionConstPtr> params)
    {
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator _i = params.begin(); _i != params.end(); ++_i)
      {
        boost::any val;
        (*_i)->getValue(config, val);

        if("min_obstacle_dist"==(*_i)->name){min_obstacle_dist = boost::any_cast<double>(val);}
        if("use_nonlinear_obstacle_penalty"==(*_i)->name){use_nonlinear_obstacle_penalty = boost::any_cast<bool>(val);}
        if("obstacle_cost_mult"==(*_i)->name){obstacle_cost_mult = boost::any_cast<double>(val);}
        if("inflation_dist"==(*_i)->name){inflation_dist = boost::any_cast<double>(val);}
        if("dynamic_obstacle_inflation_dist"==(*_i)->name){dynamic_obstacle_inflation_dist = boost::any_cast<double>(val);}
        if("include_dynamic_obstacles"==(*_i)->name){include_dynamic_obstacles = boost::any_cast<bool>(val);}
        if("include_costmap_obstacles"==(*_i)->name){include_costmap_obstacles = boost::any_cast<bool>(val);}
        if("legacy_obstacle_association"==(*_i)->name){legacy_obstacle_association = boost::any_cast<bool>(val);}
        if("obstacle_association_force_inclusion_factor"==(*_i)->name){obstacle_association_force_inclusion_factor = boost::any_cast<double>(val);}
        if("obstacle_association_cutoff_factor"==(*_i)->name){obstacle_association_cutoff_factor = boost::any_cast<double>(val);}
        if("costmap_obstacles_behind_robot_dist"==(*_i)->name){costmap_obstacles_behind_robot_dist = boost::any_cast<double>(val);}
        if("obstacle_poses_affected"==(*_i)->name){obstacle_poses_affected = boost::any_cast<int>(val);}
      }
    }

    double min_obstacle_dist;
bool use_nonlinear_obstacle_penalty;
double obstacle_cost_mult;
double inflation_dist;
double dynamic_obstacle_inflation_dist;
bool include_dynamic_obstacles;
bool include_costmap_obstacles;
bool legacy_obstacle_association;
double obstacle_association_force_inclusion_factor;
double obstacle_association_cutoff_factor;
double costmap_obstacles_behind_robot_dist;
int obstacle_poses_affected;

    bool state;
    std::string name;

    
}obstacles;

class OPTIMIZATION
{
  public:
    OPTIMIZATION()
    {
      state = true;
      name = "Optimization";
    }

    void setParams(HATebLocalPlannerReconfigureConfig &config, const std::vector<AbstractParamDescriptionConstPtr> params)
    {
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator _i = params.begin(); _i != params.end(); ++_i)
      {
        boost::any val;
        (*_i)->getValue(config, val);

        if("no_inner_iterations"==(*_i)->name){no_inner_iterations = boost::any_cast<int>(val);}
        if("no_outer_iterations"==(*_i)->name){no_outer_iterations = boost::any_cast<int>(val);}
        if("optimization_activate"==(*_i)->name){optimization_activate = boost::any_cast<bool>(val);}
        if("optimization_verbose"==(*_i)->name){optimization_verbose = boost::any_cast<bool>(val);}
        if("penalty_epsilon"==(*_i)->name){penalty_epsilon = boost::any_cast<double>(val);}
        if("time_penalty_epsilon"==(*_i)->name){time_penalty_epsilon = boost::any_cast<double>(val);}
        if("cap_optimaltime_penalty"==(*_i)->name){cap_optimaltime_penalty = boost::any_cast<bool>(val);}
        if("weight_max_vel_x"==(*_i)->name){weight_max_vel_x = boost::any_cast<double>(val);}
        if("weight_max_vel_y"==(*_i)->name){weight_max_vel_y = boost::any_cast<double>(val);}
        if("weight_max_vel_theta"==(*_i)->name){weight_max_vel_theta = boost::any_cast<double>(val);}
        if("weight_acc_lim_x"==(*_i)->name){weight_acc_lim_x = boost::any_cast<double>(val);}
        if("weight_acc_lim_y"==(*_i)->name){weight_acc_lim_y = boost::any_cast<double>(val);}
        if("weight_acc_lim_theta"==(*_i)->name){weight_acc_lim_theta = boost::any_cast<double>(val);}
        if("weight_kinematics_nh"==(*_i)->name){weight_kinematics_nh = boost::any_cast<double>(val);}
        if("weight_kinematics_forward_drive"==(*_i)->name){weight_kinematics_forward_drive = boost::any_cast<double>(val);}
        if("weight_kinematics_turning_radius"==(*_i)->name){weight_kinematics_turning_radius = boost::any_cast<double>(val);}
        if("weight_optimaltime"==(*_i)->name){weight_optimaltime = boost::any_cast<double>(val);}
        if("weight_shortest_path"==(*_i)->name){weight_shortest_path = boost::any_cast<double>(val);}
        if("weight_obstacle"==(*_i)->name){weight_obstacle = boost::any_cast<double>(val);}
        if("weight_inflation"==(*_i)->name){weight_inflation = boost::any_cast<double>(val);}
        if("weight_dynamic_obstacle"==(*_i)->name){weight_dynamic_obstacle = boost::any_cast<double>(val);}
        if("weight_dynamic_obstacle_inflation"==(*_i)->name){weight_dynamic_obstacle_inflation = boost::any_cast<double>(val);}
        if("weight_viapoint"==(*_i)->name){weight_viapoint = boost::any_cast<double>(val);}
        if("weight_adapt_factor"==(*_i)->name){weight_adapt_factor = boost::any_cast<double>(val);}
        if("obstacle_cost_exponent"==(*_i)->name){obstacle_cost_exponent = boost::any_cast<double>(val);}
        if("weight_max_agent_vel_x"==(*_i)->name){weight_max_agent_vel_x = boost::any_cast<double>(val);}
        if("weight_max_agent_vel_y"==(*_i)->name){weight_max_agent_vel_y = boost::any_cast<double>(val);}
        if("weight_nominal_agent_vel_x"==(*_i)->name){weight_nominal_agent_vel_x = boost::any_cast<double>(val);}
        if("weight_max_agent_vel_theta"==(*_i)->name){weight_max_agent_vel_theta = boost::any_cast<double>(val);}
        if("weight_agent_acc_lim_x"==(*_i)->name){weight_agent_acc_lim_x = boost::any_cast<double>(val);}
        if("weight_agent_acc_lim_y"==(*_i)->name){weight_agent_acc_lim_y = boost::any_cast<double>(val);}
        if("weight_agent_acc_lim_theta"==(*_i)->name){weight_agent_acc_lim_theta = boost::any_cast<double>(val);}
        if("weight_agent_optimaltime"==(*_i)->name){weight_agent_optimaltime = boost::any_cast<double>(val);}
        if("weight_agent_viapoint"==(*_i)->name){weight_agent_viapoint = boost::any_cast<double>(val);}
        if("weight_agent_robot_safety"==(*_i)->name){weight_agent_robot_safety = boost::any_cast<double>(val);}
        if("weight_agent_agent_safety"==(*_i)->name){weight_agent_agent_safety = boost::any_cast<double>(val);}
        if("weight_agent_robot_ttc"==(*_i)->name){weight_agent_robot_ttc = boost::any_cast<double>(val);}
        if("weight_agent_robot_ttcplus"==(*_i)->name){weight_agent_robot_ttcplus = boost::any_cast<double>(val);}
        if("weight_agent_robot_rel_vel"==(*_i)->name){weight_agent_robot_rel_vel = boost::any_cast<double>(val);}
        if("weight_agent_robot_visibility"==(*_i)->name){weight_agent_robot_visibility = boost::any_cast<double>(val);}
        if("agent_robot_ttc_scale_alpha"==(*_i)->name){agent_robot_ttc_scale_alpha = boost::any_cast<double>(val);}
        if("agent_robot_ttcplus_scale_alpha"==(*_i)->name){agent_robot_ttcplus_scale_alpha = boost::any_cast<double>(val);}
        if("weight_invisible_human"==(*_i)->name){weight_invisible_human = boost::any_cast<double>(val);}
        if("fov"==(*_i)->name){fov = boost::any_cast<double>(val);}
        if("disable_warm_start"==(*_i)->name){disable_warm_start = boost::any_cast<bool>(val);}
        if("disable_rapid_omega_chage"==(*_i)->name){disable_rapid_omega_chage = boost::any_cast<bool>(val);}
        if("omega_chage_time_seperation"==(*_i)->name){omega_chage_time_seperation = boost::any_cast<double>(val);}
      }
    }

    int no_inner_iterations;
int no_outer_iterations;
bool optimization_activate;
bool optimization_verbose;
double penalty_epsilon;
double time_penalty_epsilon;
bool cap_optimaltime_penalty;
double weight_max_vel_x;
double weight_max_vel_y;
double weight_max_vel_theta;
double weight_acc_lim_x;
double weight_acc_lim_y;
double weight_acc_lim_theta;
double weight_kinematics_nh;
double weight_kinematics_forward_drive;
double weight_kinematics_turning_radius;
double weight_optimaltime;
double weight_shortest_path;
double weight_obstacle;
double weight_inflation;
double weight_dynamic_obstacle;
double weight_dynamic_obstacle_inflation;
double weight_viapoint;
double weight_adapt_factor;
double obstacle_cost_exponent;
double weight_max_agent_vel_x;
double weight_max_agent_vel_y;
double weight_nominal_agent_vel_x;
double weight_max_agent_vel_theta;
double weight_agent_acc_lim_x;
double weight_agent_acc_lim_y;
double weight_agent_acc_lim_theta;
double weight_agent_optimaltime;
double weight_agent_viapoint;
double weight_agent_robot_safety;
double weight_agent_agent_safety;
double weight_agent_robot_ttc;
double weight_agent_robot_ttcplus;
double weight_agent_robot_rel_vel;
double weight_agent_robot_visibility;
double agent_robot_ttc_scale_alpha;
double agent_robot_ttcplus_scale_alpha;
double weight_invisible_human;
double fov;
bool disable_warm_start;
bool disable_rapid_omega_chage;
double omega_chage_time_seperation;

    bool state;
    std::string name;

    
}optimization;

class HATEB_CONSTRAINTS
{
  public:
    HATEB_CONSTRAINTS()
    {
      state = true;
      name = "Hateb_constraints";
    }

    void setParams(HATebLocalPlannerReconfigureConfig &config, const std::vector<AbstractParamDescriptionConstPtr> params)
    {
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator _i = params.begin(); _i != params.end(); ++_i)
      {
        boost::any val;
        (*_i)->getValue(config, val);

        if("planning_mode"==(*_i)->name){planning_mode = boost::any_cast<int>(val);}
        if("use_agent_robot_safety_c"==(*_i)->name){use_agent_robot_safety_c = boost::any_cast<bool>(val);}
        if("use_agent_agent_safety_c"==(*_i)->name){use_agent_agent_safety_c = boost::any_cast<bool>(val);}
        if("use_agent_robot_ttc_c"==(*_i)->name){use_agent_robot_ttc_c = boost::any_cast<bool>(val);}
        if("scale_agent_robot_ttc_c"==(*_i)->name){scale_agent_robot_ttc_c = boost::any_cast<bool>(val);}
        if("use_agent_robot_rel_vel_c"==(*_i)->name){use_agent_robot_rel_vel_c = boost::any_cast<bool>(val);}
        if("use_agent_robot_visi_c"==(*_i)->name){use_agent_robot_visi_c = boost::any_cast<bool>(val);}
        if("use_agent_robot_ttcplus_c"==(*_i)->name){use_agent_robot_ttcplus_c = boost::any_cast<bool>(val);}
        if("add_invisible_humans"==(*_i)->name){add_invisible_humans = boost::any_cast<bool>(val);}
        if("scale_agent_robot_ttcplus_c"==(*_i)->name){scale_agent_robot_ttcplus_c = boost::any_cast<bool>(val);}
        if("use_agent_elastic_vel"==(*_i)->name){use_agent_elastic_vel = boost::any_cast<bool>(val);}
        if("use_external_prediction"==(*_i)->name){use_external_prediction = boost::any_cast<bool>(val);}
        if("predict_agent_behind_robot"==(*_i)->name){predict_agent_behind_robot = boost::any_cast<bool>(val);}
        if("predict_agent_goal"==(*_i)->name){predict_agent_goal = boost::any_cast<bool>(val);}
        if("min_agent_robot_dist"==(*_i)->name){min_agent_robot_dist = boost::any_cast<double>(val);}
        if("min_agent_agent_dist"==(*_i)->name){min_agent_agent_dist = boost::any_cast<double>(val);}
        if("ttc_threshold"==(*_i)->name){ttc_threshold = boost::any_cast<double>(val);}
        if("rel_vel_cost_threshold"==(*_i)->name){rel_vel_cost_threshold = boost::any_cast<double>(val);}
        if("invisible_human_threshold"==(*_i)->name){invisible_human_threshold = boost::any_cast<double>(val);}
        if("visibility_cost_threshold"==(*_i)->name){visibility_cost_threshold = boost::any_cast<double>(val);}
        if("agent_pose_prediction_reset_time"==(*_i)->name){agent_pose_prediction_reset_time = boost::any_cast<double>(val);}
        if("ttcplus_threshold"==(*_i)->name){ttcplus_threshold = boost::any_cast<double>(val);}
        if("ttcplus_timer"==(*_i)->name){ttcplus_timer = boost::any_cast<double>(val);}
      }
    }

    int planning_mode;
bool use_agent_robot_safety_c;
bool use_agent_agent_safety_c;
bool use_agent_robot_ttc_c;
bool scale_agent_robot_ttc_c;
bool use_agent_robot_rel_vel_c;
bool use_agent_robot_visi_c;
bool use_agent_robot_ttcplus_c;
bool add_invisible_humans;
bool scale_agent_robot_ttcplus_c;
bool use_agent_elastic_vel;
bool use_external_prediction;
bool predict_agent_behind_robot;
bool predict_agent_goal;
double min_agent_robot_dist;
double min_agent_agent_dist;
double ttc_threshold;
double rel_vel_cost_threshold;
double invisible_human_threshold;
double visibility_cost_threshold;
double agent_pose_prediction_reset_time;
double ttcplus_threshold;
double ttcplus_timer;

    bool state;
    std::string name;

    class APPROACH
{
  public:
    APPROACH()
    {
      state = true;
      name = "Approach";
    }

    void setParams(HATebLocalPlannerReconfigureConfig &config, const std::vector<AbstractParamDescriptionConstPtr> params)
    {
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator _i = params.begin(); _i != params.end(); ++_i)
      {
        boost::any val;
        (*_i)->getValue(config, val);

        if("approach_id"==(*_i)->name){approach_id = boost::any_cast<int>(val);}
        if("approach_dist"==(*_i)->name){approach_dist = boost::any_cast<double>(val);}
        if("approach_angle"==(*_i)->name){approach_angle = boost::any_cast<double>(val);}
        if("approach_dist_tolerance"==(*_i)->name){approach_dist_tolerance = boost::any_cast<double>(val);}
        if("approach_angle_tolerance"==(*_i)->name){approach_angle_tolerance = boost::any_cast<double>(val);}
      }
    }

    int approach_id;
double approach_dist;
double approach_angle;
double approach_dist_tolerance;
double approach_angle_tolerance;

    bool state;
    std::string name;

    
}approach;

}hateb_constraints;

class HCPLANNING
{
  public:
    HCPLANNING()
    {
      state = true;
      name = "HCPlanning";
    }

    void setParams(HATebLocalPlannerReconfigureConfig &config, const std::vector<AbstractParamDescriptionConstPtr> params)
    {
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator _i = params.begin(); _i != params.end(); ++_i)
      {
        boost::any val;
        (*_i)->getValue(config, val);

        if("enable_multithreading"==(*_i)->name){enable_multithreading = boost::any_cast<bool>(val);}
        if("max_number_classes"==(*_i)->name){max_number_classes = boost::any_cast<int>(val);}
        if("selection_cost_hysteresis"==(*_i)->name){selection_cost_hysteresis = boost::any_cast<double>(val);}
        if("selection_prefer_initial_plan"==(*_i)->name){selection_prefer_initial_plan = boost::any_cast<double>(val);}
        if("selection_obst_cost_scale"==(*_i)->name){selection_obst_cost_scale = boost::any_cast<double>(val);}
        if("selection_viapoint_cost_scale"==(*_i)->name){selection_viapoint_cost_scale = boost::any_cast<double>(val);}
        if("selection_alternative_time_cost"==(*_i)->name){selection_alternative_time_cost = boost::any_cast<bool>(val);}
        if("switching_blocking_period"==(*_i)->name){switching_blocking_period = boost::any_cast<double>(val);}
        if("roadmap_graph_no_samples"==(*_i)->name){roadmap_graph_no_samples = boost::any_cast<int>(val);}
        if("roadmap_graph_area_width"==(*_i)->name){roadmap_graph_area_width = boost::any_cast<double>(val);}
        if("roadmap_graph_area_length_scale"==(*_i)->name){roadmap_graph_area_length_scale = boost::any_cast<double>(val);}
        if("h_signature_prescaler"==(*_i)->name){h_signature_prescaler = boost::any_cast<double>(val);}
        if("h_signature_threshold"==(*_i)->name){h_signature_threshold = boost::any_cast<double>(val);}
        if("obstacle_heading_threshold"==(*_i)->name){obstacle_heading_threshold = boost::any_cast<double>(val);}
        if("viapoints_all_candidates"==(*_i)->name){viapoints_all_candidates = boost::any_cast<bool>(val);}
        if("visualize_hc_graph"==(*_i)->name){visualize_hc_graph = boost::any_cast<bool>(val);}
      }
    }

    bool enable_multithreading;
int max_number_classes;
double selection_cost_hysteresis;
double selection_prefer_initial_plan;
double selection_obst_cost_scale;
double selection_viapoint_cost_scale;
bool selection_alternative_time_cost;
double switching_blocking_period;
int roadmap_graph_no_samples;
double roadmap_graph_area_width;
double roadmap_graph_area_length_scale;
double h_signature_prescaler;
double h_signature_threshold;
double obstacle_heading_threshold;
bool viapoints_all_candidates;
bool visualize_hc_graph;

    bool state;
    std::string name;

    
}hcplanning;

class RECOVERY
{
  public:
    RECOVERY()
    {
      state = true;
      name = "Recovery";
    }

    void setParams(HATebLocalPlannerReconfigureConfig &config, const std::vector<AbstractParamDescriptionConstPtr> params)
    {
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator _i = params.begin(); _i != params.end(); ++_i)
      {
        boost::any val;
        (*_i)->getValue(config, val);

        if("shrink_horizon_backup"==(*_i)->name){shrink_horizon_backup = boost::any_cast<bool>(val);}
        if("oscillation_recovery"==(*_i)->name){oscillation_recovery = boost::any_cast<bool>(val);}
      }
    }

    bool shrink_horizon_backup;
bool oscillation_recovery;

    bool state;
    std::string name;

    
}recovery;

class VISUALIZATION
{
  public:
    VISUALIZATION()
    {
      state = true;
      name = "Visualization";
    }

    void setParams(HATebLocalPlannerReconfigureConfig &config, const std::vector<AbstractParamDescriptionConstPtr> params)
    {
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator _i = params.begin(); _i != params.end(); ++_i)
      {
        boost::any val;
        (*_i)->getValue(config, val);

        if("publish_robot_global_plan"==(*_i)->name){publish_robot_global_plan = boost::any_cast<bool>(val);}
        if("publish_robot_local_plan"==(*_i)->name){publish_robot_local_plan = boost::any_cast<bool>(val);}
        if("publish_robot_local_plan_poses"==(*_i)->name){publish_robot_local_plan_poses = boost::any_cast<bool>(val);}
        if("publish_robot_local_plan_fp_poses"==(*_i)->name){publish_robot_local_plan_fp_poses = boost::any_cast<bool>(val);}
        if("publish_agents_global_plans"==(*_i)->name){publish_agents_global_plans = boost::any_cast<bool>(val);}
        if("publish_agents_local_plans"==(*_i)->name){publish_agents_local_plans = boost::any_cast<bool>(val);}
        if("publish_agents_local_plan_poses"==(*_i)->name){publish_agents_local_plan_poses = boost::any_cast<bool>(val);}
        if("publish_agents_local_plan_fp_poses"==(*_i)->name){publish_agents_local_plan_fp_poses = boost::any_cast<bool>(val);}
        if("pose_array_z_scale"==(*_i)->name){pose_array_z_scale = boost::any_cast<double>(val);}
      }
    }

    bool publish_robot_global_plan;
bool publish_robot_local_plan;
bool publish_robot_local_plan_poses;
bool publish_robot_local_plan_fp_poses;
bool publish_agents_global_plans;
bool publish_agents_local_plans;
bool publish_agents_local_plan_poses;
bool publish_agents_local_plan_fp_poses;
double pose_array_z_scale;

    bool state;
    std::string name;

    
}visualization;

}groups;



//#line 21 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      bool teb_autosize;
//#line 25 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      double dt_ref;
//#line 29 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      double dt_hysteresis;
//#line 33 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      bool global_plan_overwrite_orientation;
//#line 37 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      bool allow_init_with_backwards_motion;
//#line 41 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      double max_global_plan_lookahead_dist;
//#line 45 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      double force_reinit_new_goal_dist;
//#line 49 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      double force_reinit_new_goal_angular;
//#line 53 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      int feasibility_check_no_poses;
//#line 57 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      bool exact_arc_length;
//#line 61 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      bool publish_feedback;
//#line 65 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      double visualize_with_time_as_z_axis_scale;
//#line 68 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      double horizon_reduction_amount;
//#line 71 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      double teb_init_skip_dist;
//#line 78 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      double global_plan_viapoint_sep;
//#line 82 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      bool via_points_ordered;
//#line 89 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      double max_vel_x;
//#line 93 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      double max_vel_x_backwards;
//#line 97 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      double max_vel_theta;
//#line 101 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      double acc_lim_x;
//#line 105 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      double acc_lim_theta;
//#line 109 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      bool is_footprint_dynamic;
//#line 113 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      bool is_real;
//#line 121 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      double min_turning_radius;
//#line 125 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      double wheelbase;
//#line 129 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      bool cmd_angle_instead_rotvel;
//#line 137 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      double max_vel_y;
//#line 141 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      double acc_lim_y;
//#line 147 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      double max_agent_vel_x;
//#line 150 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      double nominal_agent_vel_x;
//#line 153 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      double max_agent_vel_x_backwards;
//#line 156 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      double max_agent_vel_theta;
//#line 159 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      double agent_acc_lim_x;
//#line 162 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      double agent_acc_lim_theta;
//#line 165 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      int num_moving_avg;
//#line 171 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      double max_agent_vel_y;
//#line 175 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      double agent_acc_lim_y;
//#line 183 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      double xy_goal_tolerance;
//#line 187 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      double yaw_goal_tolerance;
//#line 191 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      bool free_goal_vel;
//#line 198 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      double min_obstacle_dist;
//#line 201 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      bool use_nonlinear_obstacle_penalty;
//#line 204 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      double obstacle_cost_mult;
//#line 207 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      double inflation_dist;
//#line 211 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      double dynamic_obstacle_inflation_dist;
//#line 215 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      bool include_dynamic_obstacles;
//#line 219 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      bool include_costmap_obstacles;
//#line 223 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      bool legacy_obstacle_association;
//#line 227 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      double obstacle_association_force_inclusion_factor;
//#line 231 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      double obstacle_association_cutoff_factor;
//#line 235 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      double costmap_obstacles_behind_robot_dist;
//#line 239 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      int obstacle_poses_affected;
//#line 247 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      int no_inner_iterations;
//#line 251 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      int no_outer_iterations;
//#line 255 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      bool optimization_activate;
//#line 259 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      bool optimization_verbose;
//#line 263 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      double penalty_epsilon;
//#line 266 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      double time_penalty_epsilon;
//#line 270 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      bool cap_optimaltime_penalty;
//#line 274 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      double weight_max_vel_x;
//#line 278 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      double weight_max_vel_y;
//#line 282 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      double weight_max_vel_theta;
//#line 286 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      double weight_acc_lim_x;
//#line 290 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      double weight_acc_lim_y;
//#line 294 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      double weight_acc_lim_theta;
//#line 298 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      double weight_kinematics_nh;
//#line 302 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      double weight_kinematics_forward_drive;
//#line 306 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      double weight_kinematics_turning_radius;
//#line 310 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      double weight_optimaltime;
//#line 314 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      double weight_shortest_path;
//#line 318 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      double weight_obstacle;
//#line 322 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      double weight_inflation;
//#line 326 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      double weight_dynamic_obstacle;
//#line 330 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      double weight_dynamic_obstacle_inflation;
//#line 334 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      double weight_viapoint;
//#line 338 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      double weight_adapt_factor;
//#line 342 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      double obstacle_cost_exponent;
//#line 345 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      double weight_max_agent_vel_x;
//#line 348 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      double weight_max_agent_vel_y;
//#line 351 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      double weight_nominal_agent_vel_x;
//#line 354 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      double weight_max_agent_vel_theta;
//#line 357 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      double weight_agent_acc_lim_x;
//#line 360 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      double weight_agent_acc_lim_y;
//#line 363 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      double weight_agent_acc_lim_theta;
//#line 366 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      double weight_agent_optimaltime;
//#line 369 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      double weight_agent_viapoint;
//#line 372 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      double weight_agent_robot_safety;
//#line 375 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      double weight_agent_agent_safety;
//#line 378 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      double weight_agent_robot_ttc;
//#line 381 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      double weight_agent_robot_ttcplus;
//#line 384 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      double weight_agent_robot_rel_vel;
//#line 387 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      double weight_agent_robot_visibility;
//#line 390 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      double agent_robot_ttc_scale_alpha;
//#line 393 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      double agent_robot_ttcplus_scale_alpha;
//#line 396 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      double weight_invisible_human;
//#line 399 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      double fov;
//#line 403 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      bool disable_warm_start;
//#line 407 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      bool disable_rapid_omega_chage;
//#line 411 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      double omega_chage_time_seperation;
//#line 423 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      int planning_mode;
//#line 426 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      bool use_agent_robot_safety_c;
//#line 429 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      bool use_agent_agent_safety_c;
//#line 432 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      bool use_agent_robot_ttc_c;
//#line 435 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      bool scale_agent_robot_ttc_c;
//#line 438 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      bool use_agent_robot_rel_vel_c;
//#line 441 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      bool use_agent_robot_visi_c;
//#line 444 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      bool use_agent_robot_ttcplus_c;
//#line 447 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      bool add_invisible_humans;
//#line 450 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      bool scale_agent_robot_ttcplus_c;
//#line 453 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      bool use_agent_elastic_vel;
//#line 456 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      bool use_external_prediction;
//#line 459 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      bool predict_agent_behind_robot;
//#line 462 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      bool predict_agent_goal;
//#line 465 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      double min_agent_robot_dist;
//#line 468 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      double min_agent_agent_dist;
//#line 471 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      double ttc_threshold;
//#line 474 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      double rel_vel_cost_threshold;
//#line 477 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      double invisible_human_threshold;
//#line 480 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      double visibility_cost_threshold;
//#line 483 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      double agent_pose_prediction_reset_time;
//#line 486 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      double ttcplus_threshold;
//#line 489 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      double ttcplus_timer;
//#line 496 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      int approach_id;
//#line 497 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      double approach_dist;
//#line 498 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      double approach_angle;
//#line 499 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      double approach_dist_tolerance;
//#line 500 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      double approach_angle_tolerance;
//#line 506 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      bool enable_multithreading;
//#line 510 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      int max_number_classes;
//#line 514 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      double selection_cost_hysteresis;
//#line 519 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      double selection_prefer_initial_plan;
//#line 523 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      double selection_obst_cost_scale;
//#line 527 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      double selection_viapoint_cost_scale;
//#line 531 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      bool selection_alternative_time_cost;
//#line 535 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      double switching_blocking_period;
//#line 539 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      int roadmap_graph_no_samples;
//#line 543 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      double roadmap_graph_area_width;
//#line 547 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      double roadmap_graph_area_length_scale;
//#line 551 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      double h_signature_prescaler;
//#line 555 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      double h_signature_threshold;
//#line 559 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      double obstacle_heading_threshold;
//#line 563 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      bool viapoints_all_candidates;
//#line 567 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      bool visualize_hc_graph;
//#line 575 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      bool shrink_horizon_backup;
//#line 579 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      bool oscillation_recovery;
//#line 587 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      bool publish_robot_global_plan;
//#line 588 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      bool publish_robot_local_plan;
//#line 589 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      bool publish_robot_local_plan_poses;
//#line 590 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      bool publish_robot_local_plan_fp_poses;
//#line 591 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      bool publish_agents_global_plans;
//#line 592 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      bool publish_agents_local_plans;
//#line 593 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      bool publish_agents_local_plan_poses;
//#line 594 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      bool publish_agents_local_plan_fp_poses;
//#line 595 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      double pose_array_z_scale;
//#line 231 "/opt/ros/noetic/share/dynamic_reconfigure/cmake/../templates/ConfigType.h.template"

    bool __fromMessage__(dynamic_reconfigure::Config &msg)
    {
      const std::vector<AbstractParamDescriptionConstPtr> &__param_descriptions__ = __getParamDescriptions__();
      const std::vector<AbstractGroupDescriptionConstPtr> &__group_descriptions__ = __getGroupDescriptions__();

      int count = 0;
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator i = __param_descriptions__.begin(); i != __param_descriptions__.end(); ++i)
        if ((*i)->fromMessage(msg, *this))
          count++;

      for (std::vector<AbstractGroupDescriptionConstPtr>::const_iterator i = __group_descriptions__.begin(); i != __group_descriptions__.end(); i ++)
      {
        if ((*i)->id == 0)
        {
          boost::any n = boost::any(this);
          (*i)->updateParams(n, *this);
          (*i)->fromMessage(msg, n);
        }
      }

      if (count != dynamic_reconfigure::ConfigTools::size(msg))
      {
        ROS_ERROR("HATebLocalPlannerReconfigureConfig::__fromMessage__ called with an unexpected parameter.");
        ROS_ERROR("Booleans:");
        for (unsigned int i = 0; i < msg.bools.size(); i++)
          ROS_ERROR("  %s", msg.bools[i].name.c_str());
        ROS_ERROR("Integers:");
        for (unsigned int i = 0; i < msg.ints.size(); i++)
          ROS_ERROR("  %s", msg.ints[i].name.c_str());
        ROS_ERROR("Doubles:");
        for (unsigned int i = 0; i < msg.doubles.size(); i++)
          ROS_ERROR("  %s", msg.doubles[i].name.c_str());
        ROS_ERROR("Strings:");
        for (unsigned int i = 0; i < msg.strs.size(); i++)
          ROS_ERROR("  %s", msg.strs[i].name.c_str());
        // @todo Check that there are no duplicates. Make this error more
        // explicit.
        return false;
      }
      return true;
    }

    // This version of __toMessage__ is used during initialization of
    // statics when __getParamDescriptions__ can't be called yet.
    void __toMessage__(dynamic_reconfigure::Config &msg, const std::vector<AbstractParamDescriptionConstPtr> &__param_descriptions__, const std::vector<AbstractGroupDescriptionConstPtr> &__group_descriptions__) const
    {
      dynamic_reconfigure::ConfigTools::clear(msg);
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator i = __param_descriptions__.begin(); i != __param_descriptions__.end(); ++i)
        (*i)->toMessage(msg, *this);

      for (std::vector<AbstractGroupDescriptionConstPtr>::const_iterator i = __group_descriptions__.begin(); i != __group_descriptions__.end(); ++i)
      {
        if((*i)->id == 0)
        {
          (*i)->toMessage(msg, *this);
        }
      }
    }

    void __toMessage__(dynamic_reconfigure::Config &msg) const
    {
      const std::vector<AbstractParamDescriptionConstPtr> &__param_descriptions__ = __getParamDescriptions__();
      const std::vector<AbstractGroupDescriptionConstPtr> &__group_descriptions__ = __getGroupDescriptions__();
      __toMessage__(msg, __param_descriptions__, __group_descriptions__);
    }

    void __toServer__(const ros::NodeHandle &nh) const
    {
      const std::vector<AbstractParamDescriptionConstPtr> &__param_descriptions__ = __getParamDescriptions__();
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator i = __param_descriptions__.begin(); i != __param_descriptions__.end(); ++i)
        (*i)->toServer(nh, *this);
    }

    void __fromServer__(const ros::NodeHandle &nh)
    {
      static bool setup=false;

      const std::vector<AbstractParamDescriptionConstPtr> &__param_descriptions__ = __getParamDescriptions__();
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator i = __param_descriptions__.begin(); i != __param_descriptions__.end(); ++i)
        (*i)->fromServer(nh, *this);

      const std::vector<AbstractGroupDescriptionConstPtr> &__group_descriptions__ = __getGroupDescriptions__();
      for (std::vector<AbstractGroupDescriptionConstPtr>::const_iterator i = __group_descriptions__.begin(); i != __group_descriptions__.end(); i++){
        if (!setup && (*i)->id == 0) {
          setup = true;
          boost::any n = boost::any(this);
          (*i)->setInitialState(n);
        }
      }
    }

    void __clamp__()
    {
      const std::vector<AbstractParamDescriptionConstPtr> &__param_descriptions__ = __getParamDescriptions__();
      const HATebLocalPlannerReconfigureConfig &__max__ = __getMax__();
      const HATebLocalPlannerReconfigureConfig &__min__ = __getMin__();
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator i = __param_descriptions__.begin(); i != __param_descriptions__.end(); ++i)
        (*i)->clamp(*this, __max__, __min__);
    }

    uint32_t __level__(const HATebLocalPlannerReconfigureConfig &config) const
    {
      const std::vector<AbstractParamDescriptionConstPtr> &__param_descriptions__ = __getParamDescriptions__();
      uint32_t level = 0;
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator i = __param_descriptions__.begin(); i != __param_descriptions__.end(); ++i)
        (*i)->calcLevel(level, config, *this);
      return level;
    }

    static const dynamic_reconfigure::ConfigDescription &__getDescriptionMessage__();
    static const HATebLocalPlannerReconfigureConfig &__getDefault__();
    static const HATebLocalPlannerReconfigureConfig &__getMax__();
    static const HATebLocalPlannerReconfigureConfig &__getMin__();
    static const std::vector<AbstractParamDescriptionConstPtr> &__getParamDescriptions__();
    static const std::vector<AbstractGroupDescriptionConstPtr> &__getGroupDescriptions__();

  private:
    static const HATebLocalPlannerReconfigureConfigStatics *__get_statics__();
  };

  template <> // Max and min are ignored for strings.
  inline void HATebLocalPlannerReconfigureConfig::ParamDescription<std::string>::clamp(HATebLocalPlannerReconfigureConfig &config, const HATebLocalPlannerReconfigureConfig &max, const HATebLocalPlannerReconfigureConfig &min) const
  {
    (void) config;
    (void) min;
    (void) max;
    return;
  }

  class HATebLocalPlannerReconfigureConfigStatics
  {
    friend class HATebLocalPlannerReconfigureConfig;

    HATebLocalPlannerReconfigureConfigStatics()
    {
HATebLocalPlannerReconfigureConfig::GroupDescription<HATebLocalPlannerReconfigureConfig::DEFAULT, HATebLocalPlannerReconfigureConfig> Default("Default", "", 0, 0, true, &HATebLocalPlannerReconfigureConfig::groups);
HATebLocalPlannerReconfigureConfig::GroupDescription<HATebLocalPlannerReconfigureConfig::DEFAULT::TRAJECTORY, HATebLocalPlannerReconfigureConfig::DEFAULT> Trajectory("Trajectory", "tab", 0, 1, true, &HATebLocalPlannerReconfigureConfig::DEFAULT::trajectory);
//#line 21 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      __min__.teb_autosize = 0;
//#line 21 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      __max__.teb_autosize = 1;
//#line 21 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      __default__.teb_autosize = 1;
//#line 21 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      Trajectory.abstract_parameters.push_back(HATebLocalPlannerReconfigureConfig::AbstractParamDescriptionConstPtr(new HATebLocalPlannerReconfigureConfig::ParamDescription<bool>("teb_autosize", "bool", 0, "Enable the automatic resizing of the trajectory during optimization (based on the temporal resolution of the trajectory, recommended)", "", &HATebLocalPlannerReconfigureConfig::teb_autosize)));
//#line 21 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      __param_descriptions__.push_back(HATebLocalPlannerReconfigureConfig::AbstractParamDescriptionConstPtr(new HATebLocalPlannerReconfigureConfig::ParamDescription<bool>("teb_autosize", "bool", 0, "Enable the automatic resizing of the trajectory during optimization (based on the temporal resolution of the trajectory, recommended)", "", &HATebLocalPlannerReconfigureConfig::teb_autosize)));
//#line 25 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      __min__.dt_ref = 0.01;
//#line 25 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      __max__.dt_ref = 1.0;
//#line 25 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      __default__.dt_ref = 0.3;
//#line 25 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      Trajectory.abstract_parameters.push_back(HATebLocalPlannerReconfigureConfig::AbstractParamDescriptionConstPtr(new HATebLocalPlannerReconfigureConfig::ParamDescription<double>("dt_ref", "double", 0, "Temporal resolution of the planned trajectory (usually it is set to the magnitude of the 1/control_rate)", "", &HATebLocalPlannerReconfigureConfig::dt_ref)));
//#line 25 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      __param_descriptions__.push_back(HATebLocalPlannerReconfigureConfig::AbstractParamDescriptionConstPtr(new HATebLocalPlannerReconfigureConfig::ParamDescription<double>("dt_ref", "double", 0, "Temporal resolution of the planned trajectory (usually it is set to the magnitude of the 1/control_rate)", "", &HATebLocalPlannerReconfigureConfig::dt_ref)));
//#line 29 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      __min__.dt_hysteresis = 0.002;
//#line 29 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      __max__.dt_hysteresis = 0.5;
//#line 29 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      __default__.dt_hysteresis = 0.1;
//#line 29 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      Trajectory.abstract_parameters.push_back(HATebLocalPlannerReconfigureConfig::AbstractParamDescriptionConstPtr(new HATebLocalPlannerReconfigureConfig::ParamDescription<double>("dt_hysteresis", "double", 0, "Hysteresis that is utilized for automatic resizing depending on the current temporal resolution (dt): usually 10% of dt_ref", "", &HATebLocalPlannerReconfigureConfig::dt_hysteresis)));
//#line 29 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      __param_descriptions__.push_back(HATebLocalPlannerReconfigureConfig::AbstractParamDescriptionConstPtr(new HATebLocalPlannerReconfigureConfig::ParamDescription<double>("dt_hysteresis", "double", 0, "Hysteresis that is utilized for automatic resizing depending on the current temporal resolution (dt): usually 10% of dt_ref", "", &HATebLocalPlannerReconfigureConfig::dt_hysteresis)));
//#line 33 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      __min__.global_plan_overwrite_orientation = 0;
//#line 33 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      __max__.global_plan_overwrite_orientation = 1;
//#line 33 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      __default__.global_plan_overwrite_orientation = 1;
//#line 33 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      Trajectory.abstract_parameters.push_back(HATebLocalPlannerReconfigureConfig::AbstractParamDescriptionConstPtr(new HATebLocalPlannerReconfigureConfig::ParamDescription<bool>("global_plan_overwrite_orientation", "bool", 0, "Some global planners are not considering the orientation at local subgoals between start and global goal, therefore determine it automatically", "", &HATebLocalPlannerReconfigureConfig::global_plan_overwrite_orientation)));
//#line 33 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      __param_descriptions__.push_back(HATebLocalPlannerReconfigureConfig::AbstractParamDescriptionConstPtr(new HATebLocalPlannerReconfigureConfig::ParamDescription<bool>("global_plan_overwrite_orientation", "bool", 0, "Some global planners are not considering the orientation at local subgoals between start and global goal, therefore determine it automatically", "", &HATebLocalPlannerReconfigureConfig::global_plan_overwrite_orientation)));
//#line 37 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      __min__.allow_init_with_backwards_motion = 0;
//#line 37 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      __max__.allow_init_with_backwards_motion = 1;
//#line 37 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      __default__.allow_init_with_backwards_motion = 0;
//#line 37 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      Trajectory.abstract_parameters.push_back(HATebLocalPlannerReconfigureConfig::AbstractParamDescriptionConstPtr(new HATebLocalPlannerReconfigureConfig::ParamDescription<bool>("allow_init_with_backwards_motion", "bool", 0, "If true, the underlying trajectories might be initialized with backwards motions in case the goal is behind the start within the local costmap (this is only recommended if the robot is equipped with rear sensors)", "", &HATebLocalPlannerReconfigureConfig::allow_init_with_backwards_motion)));
//#line 37 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      __param_descriptions__.push_back(HATebLocalPlannerReconfigureConfig::AbstractParamDescriptionConstPtr(new HATebLocalPlannerReconfigureConfig::ParamDescription<bool>("allow_init_with_backwards_motion", "bool", 0, "If true, the underlying trajectories might be initialized with backwards motions in case the goal is behind the start within the local costmap (this is only recommended if the robot is equipped with rear sensors)", "", &HATebLocalPlannerReconfigureConfig::allow_init_with_backwards_motion)));
//#line 41 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      __min__.max_global_plan_lookahead_dist = 0.0;
//#line 41 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      __max__.max_global_plan_lookahead_dist = 50.0;
//#line 41 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      __default__.max_global_plan_lookahead_dist = 3.0;
//#line 41 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      Trajectory.abstract_parameters.push_back(HATebLocalPlannerReconfigureConfig::AbstractParamDescriptionConstPtr(new HATebLocalPlannerReconfigureConfig::ParamDescription<double>("max_global_plan_lookahead_dist", "double", 0, "Specify maximum length (cumulative Euclidean distances) of the subset of the global plan taken into account for optimization [if 0 or negative: disabled; the length is also bounded by the local costmap size]", "", &HATebLocalPlannerReconfigureConfig::max_global_plan_lookahead_dist)));
//#line 41 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      __param_descriptions__.push_back(HATebLocalPlannerReconfigureConfig::AbstractParamDescriptionConstPtr(new HATebLocalPlannerReconfigureConfig::ParamDescription<double>("max_global_plan_lookahead_dist", "double", 0, "Specify maximum length (cumulative Euclidean distances) of the subset of the global plan taken into account for optimization [if 0 or negative: disabled; the length is also bounded by the local costmap size]", "", &HATebLocalPlannerReconfigureConfig::max_global_plan_lookahead_dist)));
//#line 45 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      __min__.force_reinit_new_goal_dist = 0.0;
//#line 45 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      __max__.force_reinit_new_goal_dist = 10.0;
//#line 45 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      __default__.force_reinit_new_goal_dist = 1.0;
//#line 45 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      Trajectory.abstract_parameters.push_back(HATebLocalPlannerReconfigureConfig::AbstractParamDescriptionConstPtr(new HATebLocalPlannerReconfigureConfig::ParamDescription<double>("force_reinit_new_goal_dist", "double", 0, "Force the planner to reinitialize the trajectory if a previous goal is updated with a seperation of more than the specified value in meters (skip hot-starting)", "", &HATebLocalPlannerReconfigureConfig::force_reinit_new_goal_dist)));
//#line 45 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      __param_descriptions__.push_back(HATebLocalPlannerReconfigureConfig::AbstractParamDescriptionConstPtr(new HATebLocalPlannerReconfigureConfig::ParamDescription<double>("force_reinit_new_goal_dist", "double", 0, "Force the planner to reinitialize the trajectory if a previous goal is updated with a seperation of more than the specified value in meters (skip hot-starting)", "", &HATebLocalPlannerReconfigureConfig::force_reinit_new_goal_dist)));
//#line 49 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      __min__.force_reinit_new_goal_angular = 0.0;
//#line 49 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      __max__.force_reinit_new_goal_angular = 4.0;
//#line 49 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      __default__.force_reinit_new_goal_angular = 0.78;
//#line 49 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      Trajectory.abstract_parameters.push_back(HATebLocalPlannerReconfigureConfig::AbstractParamDescriptionConstPtr(new HATebLocalPlannerReconfigureConfig::ParamDescription<double>("force_reinit_new_goal_angular", "double", 0, "Force the planner to reinitialize the trajectory if a previous goal is updated with a rotational difference of more than the specified value in radians (skip hot-starting)", "", &HATebLocalPlannerReconfigureConfig::force_reinit_new_goal_angular)));
//#line 49 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      __param_descriptions__.push_back(HATebLocalPlannerReconfigureConfig::AbstractParamDescriptionConstPtr(new HATebLocalPlannerReconfigureConfig::ParamDescription<double>("force_reinit_new_goal_angular", "double", 0, "Force the planner to reinitialize the trajectory if a previous goal is updated with a rotational difference of more than the specified value in radians (skip hot-starting)", "", &HATebLocalPlannerReconfigureConfig::force_reinit_new_goal_angular)));
//#line 53 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      __min__.feasibility_check_no_poses = 0;
//#line 53 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      __max__.feasibility_check_no_poses = 50;
//#line 53 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      __default__.feasibility_check_no_poses = 5;
//#line 53 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      Trajectory.abstract_parameters.push_back(HATebLocalPlannerReconfigureConfig::AbstractParamDescriptionConstPtr(new HATebLocalPlannerReconfigureConfig::ParamDescription<int>("feasibility_check_no_poses", "int", 0, "Specify up to which pose on the predicted plan the feasibility should be checked each sampling interval", "", &HATebLocalPlannerReconfigureConfig::feasibility_check_no_poses)));
//#line 53 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      __param_descriptions__.push_back(HATebLocalPlannerReconfigureConfig::AbstractParamDescriptionConstPtr(new HATebLocalPlannerReconfigureConfig::ParamDescription<int>("feasibility_check_no_poses", "int", 0, "Specify up to which pose on the predicted plan the feasibility should be checked each sampling interval", "", &HATebLocalPlannerReconfigureConfig::feasibility_check_no_poses)));
//#line 57 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      __min__.exact_arc_length = 0;
//#line 57 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      __max__.exact_arc_length = 1;
//#line 57 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      __default__.exact_arc_length = 0;
//#line 57 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      Trajectory.abstract_parameters.push_back(HATebLocalPlannerReconfigureConfig::AbstractParamDescriptionConstPtr(new HATebLocalPlannerReconfigureConfig::ParamDescription<bool>("exact_arc_length", "bool", 0, "If true, the planner uses the exact arc length in velocity, acceleration and turning rate computations [-> increased cpu time], otherwise the euclidean approximation is used.", "", &HATebLocalPlannerReconfigureConfig::exact_arc_length)));
//#line 57 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      __param_descriptions__.push_back(HATebLocalPlannerReconfigureConfig::AbstractParamDescriptionConstPtr(new HATebLocalPlannerReconfigureConfig::ParamDescription<bool>("exact_arc_length", "bool", 0, "If true, the planner uses the exact arc length in velocity, acceleration and turning rate computations [-> increased cpu time], otherwise the euclidean approximation is used.", "", &HATebLocalPlannerReconfigureConfig::exact_arc_length)));
//#line 61 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      __min__.publish_feedback = 0;
//#line 61 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      __max__.publish_feedback = 1;
//#line 61 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      __default__.publish_feedback = 0;
//#line 61 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      Trajectory.abstract_parameters.push_back(HATebLocalPlannerReconfigureConfig::AbstractParamDescriptionConstPtr(new HATebLocalPlannerReconfigureConfig::ParamDescription<bool>("publish_feedback", "bool", 0, "Publish planner feedback containing the full trajectory and a list of active obstacles (should be enabled only for evaluation or debugging purposes)", "", &HATebLocalPlannerReconfigureConfig::publish_feedback)));
//#line 61 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      __param_descriptions__.push_back(HATebLocalPlannerReconfigureConfig::AbstractParamDescriptionConstPtr(new HATebLocalPlannerReconfigureConfig::ParamDescription<bool>("publish_feedback", "bool", 0, "Publish planner feedback containing the full trajectory and a list of active obstacles (should be enabled only for evaluation or debugging purposes)", "", &HATebLocalPlannerReconfigureConfig::publish_feedback)));
//#line 65 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      __min__.visualize_with_time_as_z_axis_scale = 0.0;
//#line 65 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      __max__.visualize_with_time_as_z_axis_scale = 1.0;
//#line 65 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      __default__.visualize_with_time_as_z_axis_scale = 0.0;
//#line 65 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      Trajectory.abstract_parameters.push_back(HATebLocalPlannerReconfigureConfig::AbstractParamDescriptionConstPtr(new HATebLocalPlannerReconfigureConfig::ParamDescription<double>("visualize_with_time_as_z_axis_scale", "double", 0, "If this value is bigger than 0, the trajectory and obstacles are visualized in 3d using the time as the z-axis scaled by this value. Most useful for dynamic obstacles.", "", &HATebLocalPlannerReconfigureConfig::visualize_with_time_as_z_axis_scale)));
//#line 65 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      __param_descriptions__.push_back(HATebLocalPlannerReconfigureConfig::AbstractParamDescriptionConstPtr(new HATebLocalPlannerReconfigureConfig::ParamDescription<double>("visualize_with_time_as_z_axis_scale", "double", 0, "If this value is bigger than 0, the trajectory and obstacles are visualized in 3d using the time as the z-axis scaled by this value. Most useful for dynamic obstacles.", "", &HATebLocalPlannerReconfigureConfig::visualize_with_time_as_z_axis_scale)));
//#line 68 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      __min__.horizon_reduction_amount = 0.0;
//#line 68 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      __max__.horizon_reduction_amount = 1.0;
//#line 68 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      __default__.horizon_reduction_amount = 0.5;
//#line 68 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      Trajectory.abstract_parameters.push_back(HATebLocalPlannerReconfigureConfig::AbstractParamDescriptionConstPtr(new HATebLocalPlannerReconfigureConfig::ParamDescription<double>("horizon_reduction_amount", "double", 0, "Value by which the horizon should be reduced", "", &HATebLocalPlannerReconfigureConfig::horizon_reduction_amount)));
//#line 68 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      __param_descriptions__.push_back(HATebLocalPlannerReconfigureConfig::AbstractParamDescriptionConstPtr(new HATebLocalPlannerReconfigureConfig::ParamDescription<double>("horizon_reduction_amount", "double", 0, "Value by which the horizon should be reduced", "", &HATebLocalPlannerReconfigureConfig::horizon_reduction_amount)));
//#line 71 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      __min__.teb_init_skip_dist = 0.0;
//#line 71 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      __max__.teb_init_skip_dist = 5.0;
//#line 71 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      __default__.teb_init_skip_dist = 0.4;
//#line 71 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      Trajectory.abstract_parameters.push_back(HATebLocalPlannerReconfigureConfig::AbstractParamDescriptionConstPtr(new HATebLocalPlannerReconfigureConfig::ParamDescription<double>("teb_init_skip_dist", "double", 0, "Distance for skipping points while initializing elastic band", "", &HATebLocalPlannerReconfigureConfig::teb_init_skip_dist)));
//#line 71 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      __param_descriptions__.push_back(HATebLocalPlannerReconfigureConfig::AbstractParamDescriptionConstPtr(new HATebLocalPlannerReconfigureConfig::ParamDescription<double>("teb_init_skip_dist", "double", 0, "Distance for skipping points while initializing elastic band", "", &HATebLocalPlannerReconfigureConfig::teb_init_skip_dist)));
//#line 124 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Trajectory.convertParams();
//#line 124 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.groups.push_back(HATebLocalPlannerReconfigureConfig::AbstractGroupDescriptionConstPtr(new HATebLocalPlannerReconfigureConfig::GroupDescription<HATebLocalPlannerReconfigureConfig::DEFAULT::TRAJECTORY, HATebLocalPlannerReconfigureConfig::DEFAULT>(Trajectory)));
//#line 124 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __group_descriptions__.push_back(HATebLocalPlannerReconfigureConfig::AbstractGroupDescriptionConstPtr(new HATebLocalPlannerReconfigureConfig::GroupDescription<HATebLocalPlannerReconfigureConfig::DEFAULT::TRAJECTORY, HATebLocalPlannerReconfigureConfig::DEFAULT>(Trajectory)));
HATebLocalPlannerReconfigureConfig::GroupDescription<HATebLocalPlannerReconfigureConfig::DEFAULT::VIAPOINTS, HATebLocalPlannerReconfigureConfig::DEFAULT> ViaPoints("ViaPoints", "tab", 0, 2, true, &HATebLocalPlannerReconfigureConfig::DEFAULT::viapoints);
//#line 78 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      __min__.global_plan_viapoint_sep = -0.1;
//#line 78 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      __max__.global_plan_viapoint_sep = 5.0;
//#line 78 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      __default__.global_plan_viapoint_sep = -0.1;
//#line 78 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      ViaPoints.abstract_parameters.push_back(HATebLocalPlannerReconfigureConfig::AbstractParamDescriptionConstPtr(new HATebLocalPlannerReconfigureConfig::ParamDescription<double>("global_plan_viapoint_sep", "double", 0, "Min. separation between each two consecutive via-points extracted from the global plan [if negative: disabled]", "", &HATebLocalPlannerReconfigureConfig::global_plan_viapoint_sep)));
//#line 78 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      __param_descriptions__.push_back(HATebLocalPlannerReconfigureConfig::AbstractParamDescriptionConstPtr(new HATebLocalPlannerReconfigureConfig::ParamDescription<double>("global_plan_viapoint_sep", "double", 0, "Min. separation between each two consecutive via-points extracted from the global plan [if negative: disabled]", "", &HATebLocalPlannerReconfigureConfig::global_plan_viapoint_sep)));
//#line 82 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      __min__.via_points_ordered = 0;
//#line 82 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      __max__.via_points_ordered = 1;
//#line 82 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      __default__.via_points_ordered = 0;
//#line 82 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      ViaPoints.abstract_parameters.push_back(HATebLocalPlannerReconfigureConfig::AbstractParamDescriptionConstPtr(new HATebLocalPlannerReconfigureConfig::ParamDescription<bool>("via_points_ordered", "bool", 0, "If true, the planner adheres to the order of via-points in the storage container", "", &HATebLocalPlannerReconfigureConfig::via_points_ordered)));
//#line 82 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      __param_descriptions__.push_back(HATebLocalPlannerReconfigureConfig::AbstractParamDescriptionConstPtr(new HATebLocalPlannerReconfigureConfig::ParamDescription<bool>("via_points_ordered", "bool", 0, "If true, the planner adheres to the order of via-points in the storage container", "", &HATebLocalPlannerReconfigureConfig::via_points_ordered)));
//#line 124 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      ViaPoints.convertParams();
//#line 124 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.groups.push_back(HATebLocalPlannerReconfigureConfig::AbstractGroupDescriptionConstPtr(new HATebLocalPlannerReconfigureConfig::GroupDescription<HATebLocalPlannerReconfigureConfig::DEFAULT::VIAPOINTS, HATebLocalPlannerReconfigureConfig::DEFAULT>(ViaPoints)));
//#line 124 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __group_descriptions__.push_back(HATebLocalPlannerReconfigureConfig::AbstractGroupDescriptionConstPtr(new HATebLocalPlannerReconfigureConfig::GroupDescription<HATebLocalPlannerReconfigureConfig::DEFAULT::VIAPOINTS, HATebLocalPlannerReconfigureConfig::DEFAULT>(ViaPoints)));
HATebLocalPlannerReconfigureConfig::GroupDescription<HATebLocalPlannerReconfigureConfig::DEFAULT::ROBOT, HATebLocalPlannerReconfigureConfig::DEFAULT> Robot("Robot", "tab", 0, 3, true, &HATebLocalPlannerReconfigureConfig::DEFAULT::robot);
//#line 89 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      __min__.max_vel_x = 0.01;
//#line 89 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      __max__.max_vel_x = 100.0;
//#line 89 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      __default__.max_vel_x = 0.4;
//#line 89 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      Robot.abstract_parameters.push_back(HATebLocalPlannerReconfigureConfig::AbstractParamDescriptionConstPtr(new HATebLocalPlannerReconfigureConfig::ParamDescription<double>("max_vel_x", "double", 0, "Maximum translational velocity of the robot", "", &HATebLocalPlannerReconfigureConfig::max_vel_x)));
//#line 89 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      __param_descriptions__.push_back(HATebLocalPlannerReconfigureConfig::AbstractParamDescriptionConstPtr(new HATebLocalPlannerReconfigureConfig::ParamDescription<double>("max_vel_x", "double", 0, "Maximum translational velocity of the robot", "", &HATebLocalPlannerReconfigureConfig::max_vel_x)));
//#line 93 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      __min__.max_vel_x_backwards = 0.01;
//#line 93 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      __max__.max_vel_x_backwards = 100.0;
//#line 93 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      __default__.max_vel_x_backwards = 0.2;
//#line 93 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      Robot.abstract_parameters.push_back(HATebLocalPlannerReconfigureConfig::AbstractParamDescriptionConstPtr(new HATebLocalPlannerReconfigureConfig::ParamDescription<double>("max_vel_x_backwards", "double", 0, "Maximum translational velocity of the robot for driving backwards", "", &HATebLocalPlannerReconfigureConfig::max_vel_x_backwards)));
//#line 93 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      __param_descriptions__.push_back(HATebLocalPlannerReconfigureConfig::AbstractParamDescriptionConstPtr(new HATebLocalPlannerReconfigureConfig::ParamDescription<double>("max_vel_x_backwards", "double", 0, "Maximum translational velocity of the robot for driving backwards", "", &HATebLocalPlannerReconfigureConfig::max_vel_x_backwards)));
//#line 97 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      __min__.max_vel_theta = 0.01;
//#line 97 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      __max__.max_vel_theta = 100.0;
//#line 97 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      __default__.max_vel_theta = 0.3;
//#line 97 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      Robot.abstract_parameters.push_back(HATebLocalPlannerReconfigureConfig::AbstractParamDescriptionConstPtr(new HATebLocalPlannerReconfigureConfig::ParamDescription<double>("max_vel_theta", "double", 0, "Maximum angular velocity of the robot", "", &HATebLocalPlannerReconfigureConfig::max_vel_theta)));
//#line 97 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      __param_descriptions__.push_back(HATebLocalPlannerReconfigureConfig::AbstractParamDescriptionConstPtr(new HATebLocalPlannerReconfigureConfig::ParamDescription<double>("max_vel_theta", "double", 0, "Maximum angular velocity of the robot", "", &HATebLocalPlannerReconfigureConfig::max_vel_theta)));
//#line 101 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      __min__.acc_lim_x = 0.01;
//#line 101 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      __max__.acc_lim_x = 100.0;
//#line 101 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      __default__.acc_lim_x = 0.5;
//#line 101 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      Robot.abstract_parameters.push_back(HATebLocalPlannerReconfigureConfig::AbstractParamDescriptionConstPtr(new HATebLocalPlannerReconfigureConfig::ParamDescription<double>("acc_lim_x", "double", 0, "Maximum translational acceleration of the robot", "", &HATebLocalPlannerReconfigureConfig::acc_lim_x)));
//#line 101 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      __param_descriptions__.push_back(HATebLocalPlannerReconfigureConfig::AbstractParamDescriptionConstPtr(new HATebLocalPlannerReconfigureConfig::ParamDescription<double>("acc_lim_x", "double", 0, "Maximum translational acceleration of the robot", "", &HATebLocalPlannerReconfigureConfig::acc_lim_x)));
//#line 105 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      __min__.acc_lim_theta = 0.01;
//#line 105 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      __max__.acc_lim_theta = 100.0;
//#line 105 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      __default__.acc_lim_theta = 0.5;
//#line 105 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      Robot.abstract_parameters.push_back(HATebLocalPlannerReconfigureConfig::AbstractParamDescriptionConstPtr(new HATebLocalPlannerReconfigureConfig::ParamDescription<double>("acc_lim_theta", "double", 0, "Maximum angular acceleration of the robot", "", &HATebLocalPlannerReconfigureConfig::acc_lim_theta)));
//#line 105 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      __param_descriptions__.push_back(HATebLocalPlannerReconfigureConfig::AbstractParamDescriptionConstPtr(new HATebLocalPlannerReconfigureConfig::ParamDescription<double>("acc_lim_theta", "double", 0, "Maximum angular acceleration of the robot", "", &HATebLocalPlannerReconfigureConfig::acc_lim_theta)));
//#line 109 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      __min__.is_footprint_dynamic = 0;
//#line 109 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      __max__.is_footprint_dynamic = 1;
//#line 109 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      __default__.is_footprint_dynamic = 0;
//#line 109 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      Robot.abstract_parameters.push_back(HATebLocalPlannerReconfigureConfig::AbstractParamDescriptionConstPtr(new HATebLocalPlannerReconfigureConfig::ParamDescription<bool>("is_footprint_dynamic", "bool", 0, "If true, updated the footprint before checking trajectory feasibility", "", &HATebLocalPlannerReconfigureConfig::is_footprint_dynamic)));
//#line 109 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      __param_descriptions__.push_back(HATebLocalPlannerReconfigureConfig::AbstractParamDescriptionConstPtr(new HATebLocalPlannerReconfigureConfig::ParamDescription<bool>("is_footprint_dynamic", "bool", 0, "If true, updated the footprint before checking trajectory feasibility", "", &HATebLocalPlannerReconfigureConfig::is_footprint_dynamic)));
//#line 113 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      __min__.is_real = 0;
//#line 113 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      __max__.is_real = 1;
//#line 113 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      __default__.is_real = 0;
//#line 113 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      Robot.abstract_parameters.push_back(HATebLocalPlannerReconfigureConfig::AbstractParamDescriptionConstPtr(new HATebLocalPlannerReconfigureConfig::ParamDescription<bool>("is_real", "bool", 0, "Whether the robot is real(or gazebo) or simulated", "", &HATebLocalPlannerReconfigureConfig::is_real)));
//#line 113 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      __param_descriptions__.push_back(HATebLocalPlannerReconfigureConfig::AbstractParamDescriptionConstPtr(new HATebLocalPlannerReconfigureConfig::ParamDescription<bool>("is_real", "bool", 0, "Whether the robot is real(or gazebo) or simulated", "", &HATebLocalPlannerReconfigureConfig::is_real)));
HATebLocalPlannerReconfigureConfig::GroupDescription<HATebLocalPlannerReconfigureConfig::DEFAULT::ROBOT::CARLIKE, HATebLocalPlannerReconfigureConfig::DEFAULT::ROBOT> Carlike("Carlike", "hide", 3, 4, true, &HATebLocalPlannerReconfigureConfig::DEFAULT::ROBOT::carlike);
//#line 121 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      __min__.min_turning_radius = 0.0;
//#line 121 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      __max__.min_turning_radius = 50.0;
//#line 121 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      __default__.min_turning_radius = 0.0;
//#line 121 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      Carlike.abstract_parameters.push_back(HATebLocalPlannerReconfigureConfig::AbstractParamDescriptionConstPtr(new HATebLocalPlannerReconfigureConfig::ParamDescription<double>("min_turning_radius", "double", 0, "Minimum turning radius of a carlike robot (diff-drive robot: zero)", "", &HATebLocalPlannerReconfigureConfig::min_turning_radius)));
//#line 121 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      __param_descriptions__.push_back(HATebLocalPlannerReconfigureConfig::AbstractParamDescriptionConstPtr(new HATebLocalPlannerReconfigureConfig::ParamDescription<double>("min_turning_radius", "double", 0, "Minimum turning radius of a carlike robot (diff-drive robot: zero)", "", &HATebLocalPlannerReconfigureConfig::min_turning_radius)));
//#line 125 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      __min__.wheelbase = -10.0;
//#line 125 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      __max__.wheelbase = 10.0;
//#line 125 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      __default__.wheelbase = 1.0;
//#line 125 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      Carlike.abstract_parameters.push_back(HATebLocalPlannerReconfigureConfig::AbstractParamDescriptionConstPtr(new HATebLocalPlannerReconfigureConfig::ParamDescription<double>("wheelbase", "double", 0, "The distance between the drive shaft and steering axle (only required for a carlike robot with 'cmd_angle_instead_rotvel' enabled); The value might be negative for back-wheeled robots!", "", &HATebLocalPlannerReconfigureConfig::wheelbase)));
//#line 125 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      __param_descriptions__.push_back(HATebLocalPlannerReconfigureConfig::AbstractParamDescriptionConstPtr(new HATebLocalPlannerReconfigureConfig::ParamDescription<double>("wheelbase", "double", 0, "The distance between the drive shaft and steering axle (only required for a carlike robot with 'cmd_angle_instead_rotvel' enabled); The value might be negative for back-wheeled robots!", "", &HATebLocalPlannerReconfigureConfig::wheelbase)));
//#line 129 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      __min__.cmd_angle_instead_rotvel = 0;
//#line 129 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      __max__.cmd_angle_instead_rotvel = 1;
//#line 129 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      __default__.cmd_angle_instead_rotvel = 0;
//#line 129 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      Carlike.abstract_parameters.push_back(HATebLocalPlannerReconfigureConfig::AbstractParamDescriptionConstPtr(new HATebLocalPlannerReconfigureConfig::ParamDescription<bool>("cmd_angle_instead_rotvel", "bool", 0, "Substitute the rotational velocity in the commanded velocity message by the corresponding steering angle (check 'axles_distance')", "", &HATebLocalPlannerReconfigureConfig::cmd_angle_instead_rotvel)));
//#line 129 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      __param_descriptions__.push_back(HATebLocalPlannerReconfigureConfig::AbstractParamDescriptionConstPtr(new HATebLocalPlannerReconfigureConfig::ParamDescription<bool>("cmd_angle_instead_rotvel", "bool", 0, "Substitute the rotational velocity in the commanded velocity message by the corresponding steering angle (check 'axles_distance')", "", &HATebLocalPlannerReconfigureConfig::cmd_angle_instead_rotvel)));
//#line 124 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Carlike.convertParams();
//#line 124 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Robot.groups.push_back(HATebLocalPlannerReconfigureConfig::AbstractGroupDescriptionConstPtr(new HATebLocalPlannerReconfigureConfig::GroupDescription<HATebLocalPlannerReconfigureConfig::DEFAULT::ROBOT::CARLIKE, HATebLocalPlannerReconfigureConfig::DEFAULT::ROBOT>(Carlike)));
//#line 124 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __group_descriptions__.push_back(HATebLocalPlannerReconfigureConfig::AbstractGroupDescriptionConstPtr(new HATebLocalPlannerReconfigureConfig::GroupDescription<HATebLocalPlannerReconfigureConfig::DEFAULT::ROBOT::CARLIKE, HATebLocalPlannerReconfigureConfig::DEFAULT::ROBOT>(Carlike)));
HATebLocalPlannerReconfigureConfig::GroupDescription<HATebLocalPlannerReconfigureConfig::DEFAULT::ROBOT::OMNIDIRECTIONAL, HATebLocalPlannerReconfigureConfig::DEFAULT::ROBOT> Omnidirectional("Omnidirectional", "hide", 3, 5, true, &HATebLocalPlannerReconfigureConfig::DEFAULT::ROBOT::omnidirectional);
//#line 137 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      __min__.max_vel_y = 0.0;
//#line 137 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      __max__.max_vel_y = 100.0;
//#line 137 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      __default__.max_vel_y = 0.0;
//#line 137 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      Omnidirectional.abstract_parameters.push_back(HATebLocalPlannerReconfigureConfig::AbstractParamDescriptionConstPtr(new HATebLocalPlannerReconfigureConfig::ParamDescription<double>("max_vel_y", "double", 0, "Maximum strafing velocity of the robot (should be zero for non-holonomic robots!)", "", &HATebLocalPlannerReconfigureConfig::max_vel_y)));
//#line 137 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      __param_descriptions__.push_back(HATebLocalPlannerReconfigureConfig::AbstractParamDescriptionConstPtr(new HATebLocalPlannerReconfigureConfig::ParamDescription<double>("max_vel_y", "double", 0, "Maximum strafing velocity of the robot (should be zero for non-holonomic robots!)", "", &HATebLocalPlannerReconfigureConfig::max_vel_y)));
//#line 141 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      __min__.acc_lim_y = 0.01;
//#line 141 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      __max__.acc_lim_y = 100.0;
//#line 141 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      __default__.acc_lim_y = 0.5;
//#line 141 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      Omnidirectional.abstract_parameters.push_back(HATebLocalPlannerReconfigureConfig::AbstractParamDescriptionConstPtr(new HATebLocalPlannerReconfigureConfig::ParamDescription<double>("acc_lim_y", "double", 0, "Maximum strafing acceleration of the robot", "", &HATebLocalPlannerReconfigureConfig::acc_lim_y)));
//#line 141 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      __param_descriptions__.push_back(HATebLocalPlannerReconfigureConfig::AbstractParamDescriptionConstPtr(new HATebLocalPlannerReconfigureConfig::ParamDescription<double>("acc_lim_y", "double", 0, "Maximum strafing acceleration of the robot", "", &HATebLocalPlannerReconfigureConfig::acc_lim_y)));
//#line 124 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Omnidirectional.convertParams();
//#line 124 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Robot.groups.push_back(HATebLocalPlannerReconfigureConfig::AbstractGroupDescriptionConstPtr(new HATebLocalPlannerReconfigureConfig::GroupDescription<HATebLocalPlannerReconfigureConfig::DEFAULT::ROBOT::OMNIDIRECTIONAL, HATebLocalPlannerReconfigureConfig::DEFAULT::ROBOT>(Omnidirectional)));
//#line 124 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __group_descriptions__.push_back(HATebLocalPlannerReconfigureConfig::AbstractGroupDescriptionConstPtr(new HATebLocalPlannerReconfigureConfig::GroupDescription<HATebLocalPlannerReconfigureConfig::DEFAULT::ROBOT::OMNIDIRECTIONAL, HATebLocalPlannerReconfigureConfig::DEFAULT::ROBOT>(Omnidirectional)));
//#line 124 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Robot.convertParams();
//#line 124 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.groups.push_back(HATebLocalPlannerReconfigureConfig::AbstractGroupDescriptionConstPtr(new HATebLocalPlannerReconfigureConfig::GroupDescription<HATebLocalPlannerReconfigureConfig::DEFAULT::ROBOT, HATebLocalPlannerReconfigureConfig::DEFAULT>(Robot)));
//#line 124 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __group_descriptions__.push_back(HATebLocalPlannerReconfigureConfig::AbstractGroupDescriptionConstPtr(new HATebLocalPlannerReconfigureConfig::GroupDescription<HATebLocalPlannerReconfigureConfig::DEFAULT::ROBOT, HATebLocalPlannerReconfigureConfig::DEFAULT>(Robot)));
HATebLocalPlannerReconfigureConfig::GroupDescription<HATebLocalPlannerReconfigureConfig::DEFAULT::OTHER_AGENTS, HATebLocalPlannerReconfigureConfig::DEFAULT> Other_Agents("Other_Agents", "tab", 0, 6, true, &HATebLocalPlannerReconfigureConfig::DEFAULT::other_agents);
//#line 147 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      __min__.max_agent_vel_x = 0.0;
//#line 147 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      __max__.max_agent_vel_x = 4.0;
//#line 147 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      __default__.max_agent_vel_x = 0.4;
//#line 147 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      Other_Agents.abstract_parameters.push_back(HATebLocalPlannerReconfigureConfig::AbstractParamDescriptionConstPtr(new HATebLocalPlannerReconfigureConfig::ParamDescription<double>("max_agent_vel_x", "double", 0, "Maximum linear velocity for agents", "", &HATebLocalPlannerReconfigureConfig::max_agent_vel_x)));
//#line 147 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      __param_descriptions__.push_back(HATebLocalPlannerReconfigureConfig::AbstractParamDescriptionConstPtr(new HATebLocalPlannerReconfigureConfig::ParamDescription<double>("max_agent_vel_x", "double", 0, "Maximum linear velocity for agents", "", &HATebLocalPlannerReconfigureConfig::max_agent_vel_x)));
//#line 150 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      __min__.nominal_agent_vel_x = 0.0;
//#line 150 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      __max__.nominal_agent_vel_x = 4.0;
//#line 150 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      __default__.nominal_agent_vel_x = 0.2;
//#line 150 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      Other_Agents.abstract_parameters.push_back(HATebLocalPlannerReconfigureConfig::AbstractParamDescriptionConstPtr(new HATebLocalPlannerReconfigureConfig::ParamDescription<double>("nominal_agent_vel_x", "double", 0, "Nominal linear velocity for agents", "", &HATebLocalPlannerReconfigureConfig::nominal_agent_vel_x)));
//#line 150 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      __param_descriptions__.push_back(HATebLocalPlannerReconfigureConfig::AbstractParamDescriptionConstPtr(new HATebLocalPlannerReconfigureConfig::ParamDescription<double>("nominal_agent_vel_x", "double", 0, "Nominal linear velocity for agents", "", &HATebLocalPlannerReconfigureConfig::nominal_agent_vel_x)));
//#line 153 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      __min__.max_agent_vel_x_backwards = 0.0;
//#line 153 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      __max__.max_agent_vel_x_backwards = 4.0;
//#line 153 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      __default__.max_agent_vel_x_backwards = 0.001;
//#line 153 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      Other_Agents.abstract_parameters.push_back(HATebLocalPlannerReconfigureConfig::AbstractParamDescriptionConstPtr(new HATebLocalPlannerReconfigureConfig::ParamDescription<double>("max_agent_vel_x_backwards", "double", 0, "Maxium backward velocity for agents", "", &HATebLocalPlannerReconfigureConfig::max_agent_vel_x_backwards)));
//#line 153 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      __param_descriptions__.push_back(HATebLocalPlannerReconfigureConfig::AbstractParamDescriptionConstPtr(new HATebLocalPlannerReconfigureConfig::ParamDescription<double>("max_agent_vel_x_backwards", "double", 0, "Maxium backward velocity for agents", "", &HATebLocalPlannerReconfigureConfig::max_agent_vel_x_backwards)));
//#line 156 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      __min__.max_agent_vel_theta = 0.0;
//#line 156 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      __max__.max_agent_vel_theta = 4.0;
//#line 156 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      __default__.max_agent_vel_theta = 0.3;
//#line 156 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      Other_Agents.abstract_parameters.push_back(HATebLocalPlannerReconfigureConfig::AbstractParamDescriptionConstPtr(new HATebLocalPlannerReconfigureConfig::ParamDescription<double>("max_agent_vel_theta", "double", 0, "Maxium angular velocity for agents", "", &HATebLocalPlannerReconfigureConfig::max_agent_vel_theta)));
//#line 156 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      __param_descriptions__.push_back(HATebLocalPlannerReconfigureConfig::AbstractParamDescriptionConstPtr(new HATebLocalPlannerReconfigureConfig::ParamDescription<double>("max_agent_vel_theta", "double", 0, "Maxium angular velocity for agents", "", &HATebLocalPlannerReconfigureConfig::max_agent_vel_theta)));
//#line 159 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      __min__.agent_acc_lim_x = 0.0;
//#line 159 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      __max__.agent_acc_lim_x = 4.0;
//#line 159 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      __default__.agent_acc_lim_x = 0.6;
//#line 159 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      Other_Agents.abstract_parameters.push_back(HATebLocalPlannerReconfigureConfig::AbstractParamDescriptionConstPtr(new HATebLocalPlannerReconfigureConfig::ParamDescription<double>("agent_acc_lim_x", "double", 0, "Maxium linear acceleration for agents", "", &HATebLocalPlannerReconfigureConfig::agent_acc_lim_x)));
//#line 159 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      __param_descriptions__.push_back(HATebLocalPlannerReconfigureConfig::AbstractParamDescriptionConstPtr(new HATebLocalPlannerReconfigureConfig::ParamDescription<double>("agent_acc_lim_x", "double", 0, "Maxium linear acceleration for agents", "", &HATebLocalPlannerReconfigureConfig::agent_acc_lim_x)));
//#line 162 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      __min__.agent_acc_lim_theta = 0.0;
//#line 162 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      __max__.agent_acc_lim_theta = 4.0;
//#line 162 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      __default__.agent_acc_lim_theta = 0.8;
//#line 162 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      Other_Agents.abstract_parameters.push_back(HATebLocalPlannerReconfigureConfig::AbstractParamDescriptionConstPtr(new HATebLocalPlannerReconfigureConfig::ParamDescription<double>("agent_acc_lim_theta", "double", 0, "Maxium angular acceleration for agents", "", &HATebLocalPlannerReconfigureConfig::agent_acc_lim_theta)));
//#line 162 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      __param_descriptions__.push_back(HATebLocalPlannerReconfigureConfig::AbstractParamDescriptionConstPtr(new HATebLocalPlannerReconfigureConfig::ParamDescription<double>("agent_acc_lim_theta", "double", 0, "Maxium angular acceleration for agents", "", &HATebLocalPlannerReconfigureConfig::agent_acc_lim_theta)));
//#line 165 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      __min__.num_moving_avg = 1;
//#line 165 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      __max__.num_moving_avg = 100;
//#line 165 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      __default__.num_moving_avg = 5;
//#line 165 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      Other_Agents.abstract_parameters.push_back(HATebLocalPlannerReconfigureConfig::AbstractParamDescriptionConstPtr(new HATebLocalPlannerReconfigureConfig::ParamDescription<int>("num_moving_avg", "int", 0, "Number of instants for moving average", "", &HATebLocalPlannerReconfigureConfig::num_moving_avg)));
//#line 165 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      __param_descriptions__.push_back(HATebLocalPlannerReconfigureConfig::AbstractParamDescriptionConstPtr(new HATebLocalPlannerReconfigureConfig::ParamDescription<int>("num_moving_avg", "int", 0, "Number of instants for moving average", "", &HATebLocalPlannerReconfigureConfig::num_moving_avg)));
//#line 171 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      __min__.max_agent_vel_y = 0.0;
//#line 171 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      __max__.max_agent_vel_y = 4.0;
//#line 171 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      __default__.max_agent_vel_y = 0.4;
//#line 171 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      Other_Agents.abstract_parameters.push_back(HATebLocalPlannerReconfigureConfig::AbstractParamDescriptionConstPtr(new HATebLocalPlannerReconfigureConfig::ParamDescription<double>("max_agent_vel_y", "double", 0, "Maximum linear velocity for agents", "", &HATebLocalPlannerReconfigureConfig::max_agent_vel_y)));
//#line 171 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      __param_descriptions__.push_back(HATebLocalPlannerReconfigureConfig::AbstractParamDescriptionConstPtr(new HATebLocalPlannerReconfigureConfig::ParamDescription<double>("max_agent_vel_y", "double", 0, "Maximum linear velocity for agents", "", &HATebLocalPlannerReconfigureConfig::max_agent_vel_y)));
//#line 175 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      __min__.agent_acc_lim_y = 0.0;
//#line 175 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      __max__.agent_acc_lim_y = 4.0;
//#line 175 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      __default__.agent_acc_lim_y = 0.3;
//#line 175 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      Other_Agents.abstract_parameters.push_back(HATebLocalPlannerReconfigureConfig::AbstractParamDescriptionConstPtr(new HATebLocalPlannerReconfigureConfig::ParamDescription<double>("agent_acc_lim_y", "double", 0, "Maxium linear acceleration for agents", "", &HATebLocalPlannerReconfigureConfig::agent_acc_lim_y)));
//#line 175 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      __param_descriptions__.push_back(HATebLocalPlannerReconfigureConfig::AbstractParamDescriptionConstPtr(new HATebLocalPlannerReconfigureConfig::ParamDescription<double>("agent_acc_lim_y", "double", 0, "Maxium linear acceleration for agents", "", &HATebLocalPlannerReconfigureConfig::agent_acc_lim_y)));
//#line 124 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Other_Agents.convertParams();
//#line 124 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.groups.push_back(HATebLocalPlannerReconfigureConfig::AbstractGroupDescriptionConstPtr(new HATebLocalPlannerReconfigureConfig::GroupDescription<HATebLocalPlannerReconfigureConfig::DEFAULT::OTHER_AGENTS, HATebLocalPlannerReconfigureConfig::DEFAULT>(Other_Agents)));
//#line 124 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __group_descriptions__.push_back(HATebLocalPlannerReconfigureConfig::AbstractGroupDescriptionConstPtr(new HATebLocalPlannerReconfigureConfig::GroupDescription<HATebLocalPlannerReconfigureConfig::DEFAULT::OTHER_AGENTS, HATebLocalPlannerReconfigureConfig::DEFAULT>(Other_Agents)));
HATebLocalPlannerReconfigureConfig::GroupDescription<HATebLocalPlannerReconfigureConfig::DEFAULT::GOALTOLERANCE, HATebLocalPlannerReconfigureConfig::DEFAULT> GoalTolerance("GoalTolerance", "tab", 0, 7, true, &HATebLocalPlannerReconfigureConfig::DEFAULT::goaltolerance);
//#line 183 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      __min__.xy_goal_tolerance = 0.001;
//#line 183 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      __max__.xy_goal_tolerance = 10.0;
//#line 183 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      __default__.xy_goal_tolerance = 0.2;
//#line 183 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      GoalTolerance.abstract_parameters.push_back(HATebLocalPlannerReconfigureConfig::AbstractParamDescriptionConstPtr(new HATebLocalPlannerReconfigureConfig::ParamDescription<double>("xy_goal_tolerance", "double", 0, "Allowed final euclidean distance to the goal position", "", &HATebLocalPlannerReconfigureConfig::xy_goal_tolerance)));
//#line 183 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      __param_descriptions__.push_back(HATebLocalPlannerReconfigureConfig::AbstractParamDescriptionConstPtr(new HATebLocalPlannerReconfigureConfig::ParamDescription<double>("xy_goal_tolerance", "double", 0, "Allowed final euclidean distance to the goal position", "", &HATebLocalPlannerReconfigureConfig::xy_goal_tolerance)));
//#line 187 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      __min__.yaw_goal_tolerance = 0.001;
//#line 187 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      __max__.yaw_goal_tolerance = 3.2;
//#line 187 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      __default__.yaw_goal_tolerance = 0.1;
//#line 187 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      GoalTolerance.abstract_parameters.push_back(HATebLocalPlannerReconfigureConfig::AbstractParamDescriptionConstPtr(new HATebLocalPlannerReconfigureConfig::ParamDescription<double>("yaw_goal_tolerance", "double", 0, "Allowed final orientation error to the goal orientation", "", &HATebLocalPlannerReconfigureConfig::yaw_goal_tolerance)));
//#line 187 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      __param_descriptions__.push_back(HATebLocalPlannerReconfigureConfig::AbstractParamDescriptionConstPtr(new HATebLocalPlannerReconfigureConfig::ParamDescription<double>("yaw_goal_tolerance", "double", 0, "Allowed final orientation error to the goal orientation", "", &HATebLocalPlannerReconfigureConfig::yaw_goal_tolerance)));
//#line 191 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      __min__.free_goal_vel = 0;
//#line 191 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      __max__.free_goal_vel = 1;
//#line 191 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      __default__.free_goal_vel = 0;
//#line 191 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      GoalTolerance.abstract_parameters.push_back(HATebLocalPlannerReconfigureConfig::AbstractParamDescriptionConstPtr(new HATebLocalPlannerReconfigureConfig::ParamDescription<bool>("free_goal_vel", "bool", 0, "Allow the robot's velocity to be nonzero for planning purposes (the robot can arrive at the goal with max speed)", "", &HATebLocalPlannerReconfigureConfig::free_goal_vel)));
//#line 191 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      __param_descriptions__.push_back(HATebLocalPlannerReconfigureConfig::AbstractParamDescriptionConstPtr(new HATebLocalPlannerReconfigureConfig::ParamDescription<bool>("free_goal_vel", "bool", 0, "Allow the robot's velocity to be nonzero for planning purposes (the robot can arrive at the goal with max speed)", "", &HATebLocalPlannerReconfigureConfig::free_goal_vel)));
//#line 124 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      GoalTolerance.convertParams();
//#line 124 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.groups.push_back(HATebLocalPlannerReconfigureConfig::AbstractGroupDescriptionConstPtr(new HATebLocalPlannerReconfigureConfig::GroupDescription<HATebLocalPlannerReconfigureConfig::DEFAULT::GOALTOLERANCE, HATebLocalPlannerReconfigureConfig::DEFAULT>(GoalTolerance)));
//#line 124 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __group_descriptions__.push_back(HATebLocalPlannerReconfigureConfig::AbstractGroupDescriptionConstPtr(new HATebLocalPlannerReconfigureConfig::GroupDescription<HATebLocalPlannerReconfigureConfig::DEFAULT::GOALTOLERANCE, HATebLocalPlannerReconfigureConfig::DEFAULT>(GoalTolerance)));
HATebLocalPlannerReconfigureConfig::GroupDescription<HATebLocalPlannerReconfigureConfig::DEFAULT::OBSTACLES, HATebLocalPlannerReconfigureConfig::DEFAULT> Obstacles("Obstacles", "tab", 0, 8, true, &HATebLocalPlannerReconfigureConfig::DEFAULT::obstacles);
//#line 198 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      __min__.min_obstacle_dist = 0.0;
//#line 198 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      __max__.min_obstacle_dist = 10.0;
//#line 198 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      __default__.min_obstacle_dist = 0.5;
//#line 198 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      Obstacles.abstract_parameters.push_back(HATebLocalPlannerReconfigureConfig::AbstractParamDescriptionConstPtr(new HATebLocalPlannerReconfigureConfig::ParamDescription<double>("min_obstacle_dist", "double", 0, "Minimum desired separation from obstacles", "", &HATebLocalPlannerReconfigureConfig::min_obstacle_dist)));
//#line 198 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      __param_descriptions__.push_back(HATebLocalPlannerReconfigureConfig::AbstractParamDescriptionConstPtr(new HATebLocalPlannerReconfigureConfig::ParamDescription<double>("min_obstacle_dist", "double", 0, "Minimum desired separation from obstacles", "", &HATebLocalPlannerReconfigureConfig::min_obstacle_dist)));
//#line 201 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      __min__.use_nonlinear_obstacle_penalty = 0;
//#line 201 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      __max__.use_nonlinear_obstacle_penalty = 1;
//#line 201 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      __default__.use_nonlinear_obstacle_penalty = 1;
//#line 201 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      Obstacles.abstract_parameters.push_back(HATebLocalPlannerReconfigureConfig::AbstractParamDescriptionConstPtr(new HATebLocalPlannerReconfigureConfig::ParamDescription<bool>("use_nonlinear_obstacle_penalty", "bool", 0, "Weather to use inverse function for obstacle penalty (linear otherwise)", "", &HATebLocalPlannerReconfigureConfig::use_nonlinear_obstacle_penalty)));
//#line 201 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      __param_descriptions__.push_back(HATebLocalPlannerReconfigureConfig::AbstractParamDescriptionConstPtr(new HATebLocalPlannerReconfigureConfig::ParamDescription<bool>("use_nonlinear_obstacle_penalty", "bool", 0, "Weather to use inverse function for obstacle penalty (linear otherwise)", "", &HATebLocalPlannerReconfigureConfig::use_nonlinear_obstacle_penalty)));
//#line 204 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      __min__.obstacle_cost_mult = 0.0;
//#line 204 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      __max__.obstacle_cost_mult = 10.0;
//#line 204 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      __default__.obstacle_cost_mult = 1.0;
//#line 204 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      Obstacles.abstract_parameters.push_back(HATebLocalPlannerReconfigureConfig::AbstractParamDescriptionConstPtr(new HATebLocalPlannerReconfigureConfig::ParamDescription<double>("obstacle_cost_mult", "double", 0, "Multiplier for obstacle cost", "", &HATebLocalPlannerReconfigureConfig::obstacle_cost_mult)));
//#line 204 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      __param_descriptions__.push_back(HATebLocalPlannerReconfigureConfig::AbstractParamDescriptionConstPtr(new HATebLocalPlannerReconfigureConfig::ParamDescription<double>("obstacle_cost_mult", "double", 0, "Multiplier for obstacle cost", "", &HATebLocalPlannerReconfigureConfig::obstacle_cost_mult)));
//#line 207 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      __min__.inflation_dist = 0.0;
//#line 207 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      __max__.inflation_dist = 15.0;
//#line 207 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      __default__.inflation_dist = 0.6;
//#line 207 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      Obstacles.abstract_parameters.push_back(HATebLocalPlannerReconfigureConfig::AbstractParamDescriptionConstPtr(new HATebLocalPlannerReconfigureConfig::ParamDescription<double>("inflation_dist", "double", 0, "Buffer zone around obstacles with non-zero penalty costs (should be larger than min_obstacle_dist in order to take effect)", "", &HATebLocalPlannerReconfigureConfig::inflation_dist)));
//#line 207 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      __param_descriptions__.push_back(HATebLocalPlannerReconfigureConfig::AbstractParamDescriptionConstPtr(new HATebLocalPlannerReconfigureConfig::ParamDescription<double>("inflation_dist", "double", 0, "Buffer zone around obstacles with non-zero penalty costs (should be larger than min_obstacle_dist in order to take effect)", "", &HATebLocalPlannerReconfigureConfig::inflation_dist)));
//#line 211 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      __min__.dynamic_obstacle_inflation_dist = 0.0;
//#line 211 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      __max__.dynamic_obstacle_inflation_dist = 15.0;
//#line 211 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      __default__.dynamic_obstacle_inflation_dist = 0.6;
//#line 211 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      Obstacles.abstract_parameters.push_back(HATebLocalPlannerReconfigureConfig::AbstractParamDescriptionConstPtr(new HATebLocalPlannerReconfigureConfig::ParamDescription<double>("dynamic_obstacle_inflation_dist", "double", 0, "Buffer zone around predicted locations of dynamic obstacles with non-zero penalty costs (should be larger than min_obstacle_dist in order to take effect)", "", &HATebLocalPlannerReconfigureConfig::dynamic_obstacle_inflation_dist)));
//#line 211 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      __param_descriptions__.push_back(HATebLocalPlannerReconfigureConfig::AbstractParamDescriptionConstPtr(new HATebLocalPlannerReconfigureConfig::ParamDescription<double>("dynamic_obstacle_inflation_dist", "double", 0, "Buffer zone around predicted locations of dynamic obstacles with non-zero penalty costs (should be larger than min_obstacle_dist in order to take effect)", "", &HATebLocalPlannerReconfigureConfig::dynamic_obstacle_inflation_dist)));
//#line 215 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      __min__.include_dynamic_obstacles = 0;
//#line 215 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      __max__.include_dynamic_obstacles = 1;
//#line 215 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      __default__.include_dynamic_obstacles = 1;
//#line 215 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      Obstacles.abstract_parameters.push_back(HATebLocalPlannerReconfigureConfig::AbstractParamDescriptionConstPtr(new HATebLocalPlannerReconfigureConfig::ParamDescription<bool>("include_dynamic_obstacles", "bool", 0, "Specify whether the movement of dynamic obstacles should be predicted by a constant velocity model (this also changes the homotopy class search). If false, all obstacles are considered to be static.", "", &HATebLocalPlannerReconfigureConfig::include_dynamic_obstacles)));
//#line 215 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      __param_descriptions__.push_back(HATebLocalPlannerReconfigureConfig::AbstractParamDescriptionConstPtr(new HATebLocalPlannerReconfigureConfig::ParamDescription<bool>("include_dynamic_obstacles", "bool", 0, "Specify whether the movement of dynamic obstacles should be predicted by a constant velocity model (this also changes the homotopy class search). If false, all obstacles are considered to be static.", "", &HATebLocalPlannerReconfigureConfig::include_dynamic_obstacles)));
//#line 219 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      __min__.include_costmap_obstacles = 0;
//#line 219 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      __max__.include_costmap_obstacles = 1;
//#line 219 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      __default__.include_costmap_obstacles = 1;
//#line 219 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      Obstacles.abstract_parameters.push_back(HATebLocalPlannerReconfigureConfig::AbstractParamDescriptionConstPtr(new HATebLocalPlannerReconfigureConfig::ParamDescription<bool>("include_costmap_obstacles", "bool", 0, "Specify whether the obstacles in the costmap should be taken into account directly (this is necessary if no seperate clustering and detection is implemented)", "", &HATebLocalPlannerReconfigureConfig::include_costmap_obstacles)));
//#line 219 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      __param_descriptions__.push_back(HATebLocalPlannerReconfigureConfig::AbstractParamDescriptionConstPtr(new HATebLocalPlannerReconfigureConfig::ParamDescription<bool>("include_costmap_obstacles", "bool", 0, "Specify whether the obstacles in the costmap should be taken into account directly (this is necessary if no seperate clustering and detection is implemented)", "", &HATebLocalPlannerReconfigureConfig::include_costmap_obstacles)));
//#line 223 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      __min__.legacy_obstacle_association = 0;
//#line 223 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      __max__.legacy_obstacle_association = 1;
//#line 223 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      __default__.legacy_obstacle_association = 0;
//#line 223 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      Obstacles.abstract_parameters.push_back(HATebLocalPlannerReconfigureConfig::AbstractParamDescriptionConstPtr(new HATebLocalPlannerReconfigureConfig::ParamDescription<bool>("legacy_obstacle_association", "bool", 0, "If true, the old association strategy is used (for each obstacle, find the nearest TEB pose), otherwise the new one (for each teb pose, find only 'relevant' obstacles).", "", &HATebLocalPlannerReconfigureConfig::legacy_obstacle_association)));
//#line 223 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      __param_descriptions__.push_back(HATebLocalPlannerReconfigureConfig::AbstractParamDescriptionConstPtr(new HATebLocalPlannerReconfigureConfig::ParamDescription<bool>("legacy_obstacle_association", "bool", 0, "If true, the old association strategy is used (for each obstacle, find the nearest TEB pose), otherwise the new one (for each teb pose, find only 'relevant' obstacles).", "", &HATebLocalPlannerReconfigureConfig::legacy_obstacle_association)));
//#line 227 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      __min__.obstacle_association_force_inclusion_factor = 0.0;
//#line 227 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      __max__.obstacle_association_force_inclusion_factor = 100.0;
//#line 227 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      __default__.obstacle_association_force_inclusion_factor = 1.5;
//#line 227 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      Obstacles.abstract_parameters.push_back(HATebLocalPlannerReconfigureConfig::AbstractParamDescriptionConstPtr(new HATebLocalPlannerReconfigureConfig::ParamDescription<double>("obstacle_association_force_inclusion_factor", "double", 0, "The non-legacy obstacle association technique tries to connect only relevant obstacles with the discretized trajectory during optimization, all obstacles within a specifed distance are forced to be included (as a multiple of min_obstacle_dist), e.g. choose 2.0 in order to consider obstacles within a radius of 2.0*min_obstacle_dist.", "", &HATebLocalPlannerReconfigureConfig::obstacle_association_force_inclusion_factor)));
//#line 227 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      __param_descriptions__.push_back(HATebLocalPlannerReconfigureConfig::AbstractParamDescriptionConstPtr(new HATebLocalPlannerReconfigureConfig::ParamDescription<double>("obstacle_association_force_inclusion_factor", "double", 0, "The non-legacy obstacle association technique tries to connect only relevant obstacles with the discretized trajectory during optimization, all obstacles within a specifed distance are forced to be included (as a multiple of min_obstacle_dist), e.g. choose 2.0 in order to consider obstacles within a radius of 2.0*min_obstacle_dist.", "", &HATebLocalPlannerReconfigureConfig::obstacle_association_force_inclusion_factor)));
//#line 231 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      __min__.obstacle_association_cutoff_factor = 1.0;
//#line 231 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      __max__.obstacle_association_cutoff_factor = 100.0;
//#line 231 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      __default__.obstacle_association_cutoff_factor = 5.0;
//#line 231 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      Obstacles.abstract_parameters.push_back(HATebLocalPlannerReconfigureConfig::AbstractParamDescriptionConstPtr(new HATebLocalPlannerReconfigureConfig::ParamDescription<double>("obstacle_association_cutoff_factor", "double", 0, "See obstacle_association_force_inclusion_factor, but beyond a multiple of [value]*min_obstacle_dist all obstacles are ignored during optimization. obstacle_association_force_inclusion_factor is processed first.", "", &HATebLocalPlannerReconfigureConfig::obstacle_association_cutoff_factor)));
//#line 231 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      __param_descriptions__.push_back(HATebLocalPlannerReconfigureConfig::AbstractParamDescriptionConstPtr(new HATebLocalPlannerReconfigureConfig::ParamDescription<double>("obstacle_association_cutoff_factor", "double", 0, "See obstacle_association_force_inclusion_factor, but beyond a multiple of [value]*min_obstacle_dist all obstacles are ignored during optimization. obstacle_association_force_inclusion_factor is processed first.", "", &HATebLocalPlannerReconfigureConfig::obstacle_association_cutoff_factor)));
//#line 235 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      __min__.costmap_obstacles_behind_robot_dist = 0.0;
//#line 235 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      __max__.costmap_obstacles_behind_robot_dist = 20.0;
//#line 235 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      __default__.costmap_obstacles_behind_robot_dist = 1.5;
//#line 235 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      Obstacles.abstract_parameters.push_back(HATebLocalPlannerReconfigureConfig::AbstractParamDescriptionConstPtr(new HATebLocalPlannerReconfigureConfig::ParamDescription<double>("costmap_obstacles_behind_robot_dist", "double", 0, "Limit the occupied local costmap obstacles taken into account for planning behind the robot (specify distance in meters)", "", &HATebLocalPlannerReconfigureConfig::costmap_obstacles_behind_robot_dist)));
//#line 235 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      __param_descriptions__.push_back(HATebLocalPlannerReconfigureConfig::AbstractParamDescriptionConstPtr(new HATebLocalPlannerReconfigureConfig::ParamDescription<double>("costmap_obstacles_behind_robot_dist", "double", 0, "Limit the occupied local costmap obstacles taken into account for planning behind the robot (specify distance in meters)", "", &HATebLocalPlannerReconfigureConfig::costmap_obstacles_behind_robot_dist)));
//#line 239 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      __min__.obstacle_poses_affected = 0;
//#line 239 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      __max__.obstacle_poses_affected = 200;
//#line 239 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      __default__.obstacle_poses_affected = 30;
//#line 239 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      Obstacles.abstract_parameters.push_back(HATebLocalPlannerReconfigureConfig::AbstractParamDescriptionConstPtr(new HATebLocalPlannerReconfigureConfig::ParamDescription<int>("obstacle_poses_affected", "int", 0, "The obstacle position is attached to the closest pose on the trajectory to reduce computational effort, but take a number of neighbors into account as well", "", &HATebLocalPlannerReconfigureConfig::obstacle_poses_affected)));
//#line 239 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      __param_descriptions__.push_back(HATebLocalPlannerReconfigureConfig::AbstractParamDescriptionConstPtr(new HATebLocalPlannerReconfigureConfig::ParamDescription<int>("obstacle_poses_affected", "int", 0, "The obstacle position is attached to the closest pose on the trajectory to reduce computational effort, but take a number of neighbors into account as well", "", &HATebLocalPlannerReconfigureConfig::obstacle_poses_affected)));
//#line 124 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Obstacles.convertParams();
//#line 124 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.groups.push_back(HATebLocalPlannerReconfigureConfig::AbstractGroupDescriptionConstPtr(new HATebLocalPlannerReconfigureConfig::GroupDescription<HATebLocalPlannerReconfigureConfig::DEFAULT::OBSTACLES, HATebLocalPlannerReconfigureConfig::DEFAULT>(Obstacles)));
//#line 124 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __group_descriptions__.push_back(HATebLocalPlannerReconfigureConfig::AbstractGroupDescriptionConstPtr(new HATebLocalPlannerReconfigureConfig::GroupDescription<HATebLocalPlannerReconfigureConfig::DEFAULT::OBSTACLES, HATebLocalPlannerReconfigureConfig::DEFAULT>(Obstacles)));
HATebLocalPlannerReconfigureConfig::GroupDescription<HATebLocalPlannerReconfigureConfig::DEFAULT::OPTIMIZATION, HATebLocalPlannerReconfigureConfig::DEFAULT> Optimization("Optimization", "tab", 0, 9, true, &HATebLocalPlannerReconfigureConfig::DEFAULT::optimization);
//#line 247 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      __min__.no_inner_iterations = 1;
//#line 247 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      __max__.no_inner_iterations = 100;
//#line 247 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      __default__.no_inner_iterations = 5;
//#line 247 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      Optimization.abstract_parameters.push_back(HATebLocalPlannerReconfigureConfig::AbstractParamDescriptionConstPtr(new HATebLocalPlannerReconfigureConfig::ParamDescription<int>("no_inner_iterations", "int", 0, "Number of solver iterations called in each outerloop iteration", "", &HATebLocalPlannerReconfigureConfig::no_inner_iterations)));
//#line 247 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      __param_descriptions__.push_back(HATebLocalPlannerReconfigureConfig::AbstractParamDescriptionConstPtr(new HATebLocalPlannerReconfigureConfig::ParamDescription<int>("no_inner_iterations", "int", 0, "Number of solver iterations called in each outerloop iteration", "", &HATebLocalPlannerReconfigureConfig::no_inner_iterations)));
//#line 251 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      __min__.no_outer_iterations = 1;
//#line 251 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      __max__.no_outer_iterations = 100;
//#line 251 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      __default__.no_outer_iterations = 4;
//#line 251 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      Optimization.abstract_parameters.push_back(HATebLocalPlannerReconfigureConfig::AbstractParamDescriptionConstPtr(new HATebLocalPlannerReconfigureConfig::ParamDescription<int>("no_outer_iterations", "int", 0, "Each outerloop iteration automatically resizes the trajectory and invokes the internal optimizer with no_inner_iterations", "", &HATebLocalPlannerReconfigureConfig::no_outer_iterations)));
//#line 251 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      __param_descriptions__.push_back(HATebLocalPlannerReconfigureConfig::AbstractParamDescriptionConstPtr(new HATebLocalPlannerReconfigureConfig::ParamDescription<int>("no_outer_iterations", "int", 0, "Each outerloop iteration automatically resizes the trajectory and invokes the internal optimizer with no_inner_iterations", "", &HATebLocalPlannerReconfigureConfig::no_outer_iterations)));
//#line 255 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      __min__.optimization_activate = 0;
//#line 255 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      __max__.optimization_activate = 1;
//#line 255 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      __default__.optimization_activate = 1;
//#line 255 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      Optimization.abstract_parameters.push_back(HATebLocalPlannerReconfigureConfig::AbstractParamDescriptionConstPtr(new HATebLocalPlannerReconfigureConfig::ParamDescription<bool>("optimization_activate", "bool", 0, "Activate the optimization", "", &HATebLocalPlannerReconfigureConfig::optimization_activate)));
//#line 255 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      __param_descriptions__.push_back(HATebLocalPlannerReconfigureConfig::AbstractParamDescriptionConstPtr(new HATebLocalPlannerReconfigureConfig::ParamDescription<bool>("optimization_activate", "bool", 0, "Activate the optimization", "", &HATebLocalPlannerReconfigureConfig::optimization_activate)));
//#line 259 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      __min__.optimization_verbose = 0;
//#line 259 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      __max__.optimization_verbose = 1;
//#line 259 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      __default__.optimization_verbose = 0;
//#line 259 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      Optimization.abstract_parameters.push_back(HATebLocalPlannerReconfigureConfig::AbstractParamDescriptionConstPtr(new HATebLocalPlannerReconfigureConfig::ParamDescription<bool>("optimization_verbose", "bool", 0, "Print verbose information", "", &HATebLocalPlannerReconfigureConfig::optimization_verbose)));
//#line 259 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      __param_descriptions__.push_back(HATebLocalPlannerReconfigureConfig::AbstractParamDescriptionConstPtr(new HATebLocalPlannerReconfigureConfig::ParamDescription<bool>("optimization_verbose", "bool", 0, "Print verbose information", "", &HATebLocalPlannerReconfigureConfig::optimization_verbose)));
//#line 263 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      __min__.penalty_epsilon = 0.0;
//#line 263 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      __max__.penalty_epsilon = 1.0;
//#line 263 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      __default__.penalty_epsilon = 0.1;
//#line 263 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      Optimization.abstract_parameters.push_back(HATebLocalPlannerReconfigureConfig::AbstractParamDescriptionConstPtr(new HATebLocalPlannerReconfigureConfig::ParamDescription<double>("penalty_epsilon", "double", 0, "Add a small safty margin to penalty functions for hard-constraint approximations", "", &HATebLocalPlannerReconfigureConfig::penalty_epsilon)));
//#line 263 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      __param_descriptions__.push_back(HATebLocalPlannerReconfigureConfig::AbstractParamDescriptionConstPtr(new HATebLocalPlannerReconfigureConfig::ParamDescription<double>("penalty_epsilon", "double", 0, "Add a small safty margin to penalty functions for hard-constraint approximations", "", &HATebLocalPlannerReconfigureConfig::penalty_epsilon)));
//#line 266 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      __min__.time_penalty_epsilon = 0.0;
//#line 266 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      __max__.time_penalty_epsilon = 1.0;
//#line 266 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      __default__.time_penalty_epsilon = 0.1;
//#line 266 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      Optimization.abstract_parameters.push_back(HATebLocalPlannerReconfigureConfig::AbstractParamDescriptionConstPtr(new HATebLocalPlannerReconfigureConfig::ParamDescription<double>("time_penalty_epsilon", "double", 0, "Add a safty margin to penalty functions for time optimality contraint", "", &HATebLocalPlannerReconfigureConfig::time_penalty_epsilon)));
//#line 266 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      __param_descriptions__.push_back(HATebLocalPlannerReconfigureConfig::AbstractParamDescriptionConstPtr(new HATebLocalPlannerReconfigureConfig::ParamDescription<double>("time_penalty_epsilon", "double", 0, "Add a safty margin to penalty functions for time optimality contraint", "", &HATebLocalPlannerReconfigureConfig::time_penalty_epsilon)));
//#line 270 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      __min__.cap_optimaltime_penalty = 0;
//#line 270 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      __max__.cap_optimaltime_penalty = 1;
//#line 270 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      __default__.cap_optimaltime_penalty = 1;
//#line 270 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      Optimization.abstract_parameters.push_back(HATebLocalPlannerReconfigureConfig::AbstractParamDescriptionConstPtr(new HATebLocalPlannerReconfigureConfig::ParamDescription<bool>("cap_optimaltime_penalty", "bool", 0, "Weather to cap optimal time penalty with initial time between teb vertices", "", &HATebLocalPlannerReconfigureConfig::cap_optimaltime_penalty)));
//#line 270 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      __param_descriptions__.push_back(HATebLocalPlannerReconfigureConfig::AbstractParamDescriptionConstPtr(new HATebLocalPlannerReconfigureConfig::ParamDescription<bool>("cap_optimaltime_penalty", "bool", 0, "Weather to cap optimal time penalty with initial time between teb vertices", "", &HATebLocalPlannerReconfigureConfig::cap_optimaltime_penalty)));
//#line 274 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      __min__.weight_max_vel_x = 0.0;
//#line 274 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      __max__.weight_max_vel_x = 1000.0;
//#line 274 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      __default__.weight_max_vel_x = 2.0;
//#line 274 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      Optimization.abstract_parameters.push_back(HATebLocalPlannerReconfigureConfig::AbstractParamDescriptionConstPtr(new HATebLocalPlannerReconfigureConfig::ParamDescription<double>("weight_max_vel_x", "double", 0, "Optimization weight for satisfying the maximum allowed translational velocity", "", &HATebLocalPlannerReconfigureConfig::weight_max_vel_x)));
//#line 274 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      __param_descriptions__.push_back(HATebLocalPlannerReconfigureConfig::AbstractParamDescriptionConstPtr(new HATebLocalPlannerReconfigureConfig::ParamDescription<double>("weight_max_vel_x", "double", 0, "Optimization weight for satisfying the maximum allowed translational velocity", "", &HATebLocalPlannerReconfigureConfig::weight_max_vel_x)));
//#line 278 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      __min__.weight_max_vel_y = 0.0;
//#line 278 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      __max__.weight_max_vel_y = 1000.0;
//#line 278 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      __default__.weight_max_vel_y = 2.0;
//#line 278 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      Optimization.abstract_parameters.push_back(HATebLocalPlannerReconfigureConfig::AbstractParamDescriptionConstPtr(new HATebLocalPlannerReconfigureConfig::ParamDescription<double>("weight_max_vel_y", "double", 0, "Optimization weight for satisfying the maximum allowed strafing velocity (in use only for holonomic robots)", "", &HATebLocalPlannerReconfigureConfig::weight_max_vel_y)));
//#line 278 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      __param_descriptions__.push_back(HATebLocalPlannerReconfigureConfig::AbstractParamDescriptionConstPtr(new HATebLocalPlannerReconfigureConfig::ParamDescription<double>("weight_max_vel_y", "double", 0, "Optimization weight for satisfying the maximum allowed strafing velocity (in use only for holonomic robots)", "", &HATebLocalPlannerReconfigureConfig::weight_max_vel_y)));
//#line 282 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      __min__.weight_max_vel_theta = 0.0;
//#line 282 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      __max__.weight_max_vel_theta = 1000.0;
//#line 282 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      __default__.weight_max_vel_theta = 1.0;
//#line 282 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      Optimization.abstract_parameters.push_back(HATebLocalPlannerReconfigureConfig::AbstractParamDescriptionConstPtr(new HATebLocalPlannerReconfigureConfig::ParamDescription<double>("weight_max_vel_theta", "double", 0, "Optimization weight for satisfying the maximum allowed angular velocity", "", &HATebLocalPlannerReconfigureConfig::weight_max_vel_theta)));
//#line 282 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      __param_descriptions__.push_back(HATebLocalPlannerReconfigureConfig::AbstractParamDescriptionConstPtr(new HATebLocalPlannerReconfigureConfig::ParamDescription<double>("weight_max_vel_theta", "double", 0, "Optimization weight for satisfying the maximum allowed angular velocity", "", &HATebLocalPlannerReconfigureConfig::weight_max_vel_theta)));
//#line 286 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      __min__.weight_acc_lim_x = 0.0;
//#line 286 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      __max__.weight_acc_lim_x = 1000.0;
//#line 286 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      __default__.weight_acc_lim_x = 1.0;
//#line 286 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      Optimization.abstract_parameters.push_back(HATebLocalPlannerReconfigureConfig::AbstractParamDescriptionConstPtr(new HATebLocalPlannerReconfigureConfig::ParamDescription<double>("weight_acc_lim_x", "double", 0, "Optimization weight for satisfying the maximum allowed translational acceleration", "", &HATebLocalPlannerReconfigureConfig::weight_acc_lim_x)));
//#line 286 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      __param_descriptions__.push_back(HATebLocalPlannerReconfigureConfig::AbstractParamDescriptionConstPtr(new HATebLocalPlannerReconfigureConfig::ParamDescription<double>("weight_acc_lim_x", "double", 0, "Optimization weight for satisfying the maximum allowed translational acceleration", "", &HATebLocalPlannerReconfigureConfig::weight_acc_lim_x)));
//#line 290 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      __min__.weight_acc_lim_y = 0.0;
//#line 290 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      __max__.weight_acc_lim_y = 1000.0;
//#line 290 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      __default__.weight_acc_lim_y = 1.0;
//#line 290 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      Optimization.abstract_parameters.push_back(HATebLocalPlannerReconfigureConfig::AbstractParamDescriptionConstPtr(new HATebLocalPlannerReconfigureConfig::ParamDescription<double>("weight_acc_lim_y", "double", 0, "Optimization weight for satisfying the maximum allowed strafing acceleration (in use only for holonomic robots)", "", &HATebLocalPlannerReconfigureConfig::weight_acc_lim_y)));
//#line 290 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      __param_descriptions__.push_back(HATebLocalPlannerReconfigureConfig::AbstractParamDescriptionConstPtr(new HATebLocalPlannerReconfigureConfig::ParamDescription<double>("weight_acc_lim_y", "double", 0, "Optimization weight for satisfying the maximum allowed strafing acceleration (in use only for holonomic robots)", "", &HATebLocalPlannerReconfigureConfig::weight_acc_lim_y)));
//#line 294 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      __min__.weight_acc_lim_theta = 0.0;
//#line 294 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      __max__.weight_acc_lim_theta = 1000.0;
//#line 294 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      __default__.weight_acc_lim_theta = 1.0;
//#line 294 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      Optimization.abstract_parameters.push_back(HATebLocalPlannerReconfigureConfig::AbstractParamDescriptionConstPtr(new HATebLocalPlannerReconfigureConfig::ParamDescription<double>("weight_acc_lim_theta", "double", 0, "Optimization weight for satisfying the maximum allowed angular acceleration", "", &HATebLocalPlannerReconfigureConfig::weight_acc_lim_theta)));
//#line 294 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      __param_descriptions__.push_back(HATebLocalPlannerReconfigureConfig::AbstractParamDescriptionConstPtr(new HATebLocalPlannerReconfigureConfig::ParamDescription<double>("weight_acc_lim_theta", "double", 0, "Optimization weight for satisfying the maximum allowed angular acceleration", "", &HATebLocalPlannerReconfigureConfig::weight_acc_lim_theta)));
//#line 298 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      __min__.weight_kinematics_nh = 0.0;
//#line 298 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      __max__.weight_kinematics_nh = 10000.0;
//#line 298 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      __default__.weight_kinematics_nh = 1000.0;
//#line 298 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      Optimization.abstract_parameters.push_back(HATebLocalPlannerReconfigureConfig::AbstractParamDescriptionConstPtr(new HATebLocalPlannerReconfigureConfig::ParamDescription<double>("weight_kinematics_nh", "double", 0, "Optimization weight for satisfying the non-holonomic kinematics", "", &HATebLocalPlannerReconfigureConfig::weight_kinematics_nh)));
//#line 298 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      __param_descriptions__.push_back(HATebLocalPlannerReconfigureConfig::AbstractParamDescriptionConstPtr(new HATebLocalPlannerReconfigureConfig::ParamDescription<double>("weight_kinematics_nh", "double", 0, "Optimization weight for satisfying the non-holonomic kinematics", "", &HATebLocalPlannerReconfigureConfig::weight_kinematics_nh)));
//#line 302 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      __min__.weight_kinematics_forward_drive = 0.0;
//#line 302 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      __max__.weight_kinematics_forward_drive = 1000.0;
//#line 302 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      __default__.weight_kinematics_forward_drive = 1.0;
//#line 302 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      Optimization.abstract_parameters.push_back(HATebLocalPlannerReconfigureConfig::AbstractParamDescriptionConstPtr(new HATebLocalPlannerReconfigureConfig::ParamDescription<double>("weight_kinematics_forward_drive", "double", 0, "Optimization weight for forcing the robot to choose only forward directions (positive transl. velocities, only diffdrive robot)", "", &HATebLocalPlannerReconfigureConfig::weight_kinematics_forward_drive)));
//#line 302 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      __param_descriptions__.push_back(HATebLocalPlannerReconfigureConfig::AbstractParamDescriptionConstPtr(new HATebLocalPlannerReconfigureConfig::ParamDescription<double>("weight_kinematics_forward_drive", "double", 0, "Optimization weight for forcing the robot to choose only forward directions (positive transl. velocities, only diffdrive robot)", "", &HATebLocalPlannerReconfigureConfig::weight_kinematics_forward_drive)));
//#line 306 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      __min__.weight_kinematics_turning_radius = 0.0;
//#line 306 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      __max__.weight_kinematics_turning_radius = 1000.0;
//#line 306 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      __default__.weight_kinematics_turning_radius = 1.0;
//#line 306 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      Optimization.abstract_parameters.push_back(HATebLocalPlannerReconfigureConfig::AbstractParamDescriptionConstPtr(new HATebLocalPlannerReconfigureConfig::ParamDescription<double>("weight_kinematics_turning_radius", "double", 0, "Optimization weight for enforcing a minimum turning radius (carlike robots)", "", &HATebLocalPlannerReconfigureConfig::weight_kinematics_turning_radius)));
//#line 306 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      __param_descriptions__.push_back(HATebLocalPlannerReconfigureConfig::AbstractParamDescriptionConstPtr(new HATebLocalPlannerReconfigureConfig::ParamDescription<double>("weight_kinematics_turning_radius", "double", 0, "Optimization weight for enforcing a minimum turning radius (carlike robots)", "", &HATebLocalPlannerReconfigureConfig::weight_kinematics_turning_radius)));
//#line 310 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      __min__.weight_optimaltime = 0.0;
//#line 310 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      __max__.weight_optimaltime = 1000.0;
//#line 310 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      __default__.weight_optimaltime = 1.0;
//#line 310 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      Optimization.abstract_parameters.push_back(HATebLocalPlannerReconfigureConfig::AbstractParamDescriptionConstPtr(new HATebLocalPlannerReconfigureConfig::ParamDescription<double>("weight_optimaltime", "double", 0, "Optimization weight for contracting the trajectory w.r.t. transition time", "", &HATebLocalPlannerReconfigureConfig::weight_optimaltime)));
//#line 310 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      __param_descriptions__.push_back(HATebLocalPlannerReconfigureConfig::AbstractParamDescriptionConstPtr(new HATebLocalPlannerReconfigureConfig::ParamDescription<double>("weight_optimaltime", "double", 0, "Optimization weight for contracting the trajectory w.r.t. transition time", "", &HATebLocalPlannerReconfigureConfig::weight_optimaltime)));
//#line 314 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      __min__.weight_shortest_path = 0.0;
//#line 314 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      __max__.weight_shortest_path = 100.0;
//#line 314 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      __default__.weight_shortest_path = 0.0;
//#line 314 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      Optimization.abstract_parameters.push_back(HATebLocalPlannerReconfigureConfig::AbstractParamDescriptionConstPtr(new HATebLocalPlannerReconfigureConfig::ParamDescription<double>("weight_shortest_path", "double", 0, "Optimization weight for contracting the trajectory w.r.t. path length", "", &HATebLocalPlannerReconfigureConfig::weight_shortest_path)));
//#line 314 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      __param_descriptions__.push_back(HATebLocalPlannerReconfigureConfig::AbstractParamDescriptionConstPtr(new HATebLocalPlannerReconfigureConfig::ParamDescription<double>("weight_shortest_path", "double", 0, "Optimization weight for contracting the trajectory w.r.t. path length", "", &HATebLocalPlannerReconfigureConfig::weight_shortest_path)));
//#line 318 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      __min__.weight_obstacle = 0.0;
//#line 318 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      __max__.weight_obstacle = 1000.0;
//#line 318 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      __default__.weight_obstacle = 50.0;
//#line 318 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      Optimization.abstract_parameters.push_back(HATebLocalPlannerReconfigureConfig::AbstractParamDescriptionConstPtr(new HATebLocalPlannerReconfigureConfig::ParamDescription<double>("weight_obstacle", "double", 0, "Optimization weight for satisfying a minimum seperation from obstacles", "", &HATebLocalPlannerReconfigureConfig::weight_obstacle)));
//#line 318 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      __param_descriptions__.push_back(HATebLocalPlannerReconfigureConfig::AbstractParamDescriptionConstPtr(new HATebLocalPlannerReconfigureConfig::ParamDescription<double>("weight_obstacle", "double", 0, "Optimization weight for satisfying a minimum seperation from obstacles", "", &HATebLocalPlannerReconfigureConfig::weight_obstacle)));
//#line 322 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      __min__.weight_inflation = 0.0;
//#line 322 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      __max__.weight_inflation = 10.0;
//#line 322 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      __default__.weight_inflation = 0.1;
//#line 322 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      Optimization.abstract_parameters.push_back(HATebLocalPlannerReconfigureConfig::AbstractParamDescriptionConstPtr(new HATebLocalPlannerReconfigureConfig::ParamDescription<double>("weight_inflation", "double", 0, "Optimization weight for the inflation penalty (should be small)", "", &HATebLocalPlannerReconfigureConfig::weight_inflation)));
//#line 322 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      __param_descriptions__.push_back(HATebLocalPlannerReconfigureConfig::AbstractParamDescriptionConstPtr(new HATebLocalPlannerReconfigureConfig::ParamDescription<double>("weight_inflation", "double", 0, "Optimization weight for the inflation penalty (should be small)", "", &HATebLocalPlannerReconfigureConfig::weight_inflation)));
//#line 326 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      __min__.weight_dynamic_obstacle = 0.0;
//#line 326 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      __max__.weight_dynamic_obstacle = 1000.0;
//#line 326 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      __default__.weight_dynamic_obstacle = 50.0;
//#line 326 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      Optimization.abstract_parameters.push_back(HATebLocalPlannerReconfigureConfig::AbstractParamDescriptionConstPtr(new HATebLocalPlannerReconfigureConfig::ParamDescription<double>("weight_dynamic_obstacle", "double", 0, "Optimization weight for satisfying a minimum seperation from dynamic obstacles", "", &HATebLocalPlannerReconfigureConfig::weight_dynamic_obstacle)));
//#line 326 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      __param_descriptions__.push_back(HATebLocalPlannerReconfigureConfig::AbstractParamDescriptionConstPtr(new HATebLocalPlannerReconfigureConfig::ParamDescription<double>("weight_dynamic_obstacle", "double", 0, "Optimization weight for satisfying a minimum seperation from dynamic obstacles", "", &HATebLocalPlannerReconfigureConfig::weight_dynamic_obstacle)));
//#line 330 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      __min__.weight_dynamic_obstacle_inflation = 0.0;
//#line 330 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      __max__.weight_dynamic_obstacle_inflation = 10.0;
//#line 330 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      __default__.weight_dynamic_obstacle_inflation = 0.1;
//#line 330 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      Optimization.abstract_parameters.push_back(HATebLocalPlannerReconfigureConfig::AbstractParamDescriptionConstPtr(new HATebLocalPlannerReconfigureConfig::ParamDescription<double>("weight_dynamic_obstacle_inflation", "double", 0, "Optimization weight for the inflation penalty of dynamic obstacles (should be small)", "", &HATebLocalPlannerReconfigureConfig::weight_dynamic_obstacle_inflation)));
//#line 330 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      __param_descriptions__.push_back(HATebLocalPlannerReconfigureConfig::AbstractParamDescriptionConstPtr(new HATebLocalPlannerReconfigureConfig::ParamDescription<double>("weight_dynamic_obstacle_inflation", "double", 0, "Optimization weight for the inflation penalty of dynamic obstacles (should be small)", "", &HATebLocalPlannerReconfigureConfig::weight_dynamic_obstacle_inflation)));
//#line 334 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      __min__.weight_viapoint = 0.0;
//#line 334 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      __max__.weight_viapoint = 1000.0;
//#line 334 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      __default__.weight_viapoint = 1.0;
//#line 334 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      Optimization.abstract_parameters.push_back(HATebLocalPlannerReconfigureConfig::AbstractParamDescriptionConstPtr(new HATebLocalPlannerReconfigureConfig::ParamDescription<double>("weight_viapoint", "double", 0, "Optimization weight for minimizing the distance to via-points", "", &HATebLocalPlannerReconfigureConfig::weight_viapoint)));
//#line 334 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      __param_descriptions__.push_back(HATebLocalPlannerReconfigureConfig::AbstractParamDescriptionConstPtr(new HATebLocalPlannerReconfigureConfig::ParamDescription<double>("weight_viapoint", "double", 0, "Optimization weight for minimizing the distance to via-points", "", &HATebLocalPlannerReconfigureConfig::weight_viapoint)));
//#line 338 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      __min__.weight_adapt_factor = 1.0;
//#line 338 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      __max__.weight_adapt_factor = 100.0;
//#line 338 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      __default__.weight_adapt_factor = 2.0;
//#line 338 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      Optimization.abstract_parameters.push_back(HATebLocalPlannerReconfigureConfig::AbstractParamDescriptionConstPtr(new HATebLocalPlannerReconfigureConfig::ParamDescription<double>("weight_adapt_factor", "double", 0, "Some special weights (currently 'weight_obstacle') are repeatedly scaled by this factor in each outer TEB iteration (weight_new: weight_old * factor); Increasing weights iteratively instead of setting a huge value a-priori leads to better numerical conditions of the underlying optimization problem.", "", &HATebLocalPlannerReconfigureConfig::weight_adapt_factor)));
//#line 338 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      __param_descriptions__.push_back(HATebLocalPlannerReconfigureConfig::AbstractParamDescriptionConstPtr(new HATebLocalPlannerReconfigureConfig::ParamDescription<double>("weight_adapt_factor", "double", 0, "Some special weights (currently 'weight_obstacle') are repeatedly scaled by this factor in each outer TEB iteration (weight_new: weight_old * factor); Increasing weights iteratively instead of setting a huge value a-priori leads to better numerical conditions of the underlying optimization problem.", "", &HATebLocalPlannerReconfigureConfig::weight_adapt_factor)));
//#line 342 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      __min__.obstacle_cost_exponent = 0.01;
//#line 342 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      __max__.obstacle_cost_exponent = 100.0;
//#line 342 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      __default__.obstacle_cost_exponent = 1.0;
//#line 342 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      Optimization.abstract_parameters.push_back(HATebLocalPlannerReconfigureConfig::AbstractParamDescriptionConstPtr(new HATebLocalPlannerReconfigureConfig::ParamDescription<double>("obstacle_cost_exponent", "double", 0, "Exponent for nonlinear obstacle cost (cost = linear_cost * obstacle_cost_exponent). Set to 1 to disable nonlinear cost (default)", "", &HATebLocalPlannerReconfigureConfig::obstacle_cost_exponent)));
//#line 342 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      __param_descriptions__.push_back(HATebLocalPlannerReconfigureConfig::AbstractParamDescriptionConstPtr(new HATebLocalPlannerReconfigureConfig::ParamDescription<double>("obstacle_cost_exponent", "double", 0, "Exponent for nonlinear obstacle cost (cost = linear_cost * obstacle_cost_exponent). Set to 1 to disable nonlinear cost (default)", "", &HATebLocalPlannerReconfigureConfig::obstacle_cost_exponent)));
//#line 345 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      __min__.weight_max_agent_vel_x = 2.0;
//#line 345 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      __max__.weight_max_agent_vel_x = 1000.0;
//#line 345 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      __default__.weight_max_agent_vel_x = 0.0;
//#line 345 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      Optimization.abstract_parameters.push_back(HATebLocalPlannerReconfigureConfig::AbstractParamDescriptionConstPtr(new HATebLocalPlannerReconfigureConfig::ParamDescription<double>("weight_max_agent_vel_x", "double", 0, "Optimization weight for satisfying the maximum allowed translational velocity in x axis for agent", "", &HATebLocalPlannerReconfigureConfig::weight_max_agent_vel_x)));
//#line 345 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      __param_descriptions__.push_back(HATebLocalPlannerReconfigureConfig::AbstractParamDescriptionConstPtr(new HATebLocalPlannerReconfigureConfig::ParamDescription<double>("weight_max_agent_vel_x", "double", 0, "Optimization weight for satisfying the maximum allowed translational velocity in x axis for agent", "", &HATebLocalPlannerReconfigureConfig::weight_max_agent_vel_x)));
//#line 348 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      __min__.weight_max_agent_vel_y = 2.0;
//#line 348 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      __max__.weight_max_agent_vel_y = 1000.0;
//#line 348 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      __default__.weight_max_agent_vel_y = 0.0;
//#line 348 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      Optimization.abstract_parameters.push_back(HATebLocalPlannerReconfigureConfig::AbstractParamDescriptionConstPtr(new HATebLocalPlannerReconfigureConfig::ParamDescription<double>("weight_max_agent_vel_y", "double", 0, "Optimization weight for satisfying the maximum allowed translational velocity in y axis for agent", "", &HATebLocalPlannerReconfigureConfig::weight_max_agent_vel_y)));
//#line 348 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      __param_descriptions__.push_back(HATebLocalPlannerReconfigureConfig::AbstractParamDescriptionConstPtr(new HATebLocalPlannerReconfigureConfig::ParamDescription<double>("weight_max_agent_vel_y", "double", 0, "Optimization weight for satisfying the maximum allowed translational velocity in y axis for agent", "", &HATebLocalPlannerReconfigureConfig::weight_max_agent_vel_y)));
//#line 351 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      __min__.weight_nominal_agent_vel_x = 2.0;
//#line 351 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      __max__.weight_nominal_agent_vel_x = 1000.0;
//#line 351 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      __default__.weight_nominal_agent_vel_x = 0.0;
//#line 351 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      Optimization.abstract_parameters.push_back(HATebLocalPlannerReconfigureConfig::AbstractParamDescriptionConstPtr(new HATebLocalPlannerReconfigureConfig::ParamDescription<double>("weight_nominal_agent_vel_x", "double", 0, "Optimization weight for satisfying the nominal translational velocity for agent", "", &HATebLocalPlannerReconfigureConfig::weight_nominal_agent_vel_x)));
//#line 351 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      __param_descriptions__.push_back(HATebLocalPlannerReconfigureConfig::AbstractParamDescriptionConstPtr(new HATebLocalPlannerReconfigureConfig::ParamDescription<double>("weight_nominal_agent_vel_x", "double", 0, "Optimization weight for satisfying the nominal translational velocity for agent", "", &HATebLocalPlannerReconfigureConfig::weight_nominal_agent_vel_x)));
//#line 354 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      __min__.weight_max_agent_vel_theta = 2.0;
//#line 354 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      __max__.weight_max_agent_vel_theta = 1000.0;
//#line 354 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      __default__.weight_max_agent_vel_theta = 0.0;
//#line 354 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      Optimization.abstract_parameters.push_back(HATebLocalPlannerReconfigureConfig::AbstractParamDescriptionConstPtr(new HATebLocalPlannerReconfigureConfig::ParamDescription<double>("weight_max_agent_vel_theta", "double", 0, "Optimization weight for satisfying the maximum allowed rotational velocity for agent", "", &HATebLocalPlannerReconfigureConfig::weight_max_agent_vel_theta)));
//#line 354 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      __param_descriptions__.push_back(HATebLocalPlannerReconfigureConfig::AbstractParamDescriptionConstPtr(new HATebLocalPlannerReconfigureConfig::ParamDescription<double>("weight_max_agent_vel_theta", "double", 0, "Optimization weight for satisfying the maximum allowed rotational velocity for agent", "", &HATebLocalPlannerReconfigureConfig::weight_max_agent_vel_theta)));
//#line 357 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      __min__.weight_agent_acc_lim_x = 2.0;
//#line 357 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      __max__.weight_agent_acc_lim_x = 1000.0;
//#line 357 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      __default__.weight_agent_acc_lim_x = 0.0;
//#line 357 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      Optimization.abstract_parameters.push_back(HATebLocalPlannerReconfigureConfig::AbstractParamDescriptionConstPtr(new HATebLocalPlannerReconfigureConfig::ParamDescription<double>("weight_agent_acc_lim_x", "double", 0, "Optimization weight for satisfying the maximum allowed translational acceleration in x for agent", "", &HATebLocalPlannerReconfigureConfig::weight_agent_acc_lim_x)));
//#line 357 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      __param_descriptions__.push_back(HATebLocalPlannerReconfigureConfig::AbstractParamDescriptionConstPtr(new HATebLocalPlannerReconfigureConfig::ParamDescription<double>("weight_agent_acc_lim_x", "double", 0, "Optimization weight for satisfying the maximum allowed translational acceleration in x for agent", "", &HATebLocalPlannerReconfigureConfig::weight_agent_acc_lim_x)));
//#line 360 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      __min__.weight_agent_acc_lim_y = 2.0;
//#line 360 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      __max__.weight_agent_acc_lim_y = 1000.0;
//#line 360 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      __default__.weight_agent_acc_lim_y = 0.0;
//#line 360 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      Optimization.abstract_parameters.push_back(HATebLocalPlannerReconfigureConfig::AbstractParamDescriptionConstPtr(new HATebLocalPlannerReconfigureConfig::ParamDescription<double>("weight_agent_acc_lim_y", "double", 0, "Optimization weight for satisfying the maximum allowed translational acceleration in y for agent", "", &HATebLocalPlannerReconfigureConfig::weight_agent_acc_lim_y)));
//#line 360 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      __param_descriptions__.push_back(HATebLocalPlannerReconfigureConfig::AbstractParamDescriptionConstPtr(new HATebLocalPlannerReconfigureConfig::ParamDescription<double>("weight_agent_acc_lim_y", "double", 0, "Optimization weight for satisfying the maximum allowed translational acceleration in y for agent", "", &HATebLocalPlannerReconfigureConfig::weight_agent_acc_lim_y)));
//#line 363 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      __min__.weight_agent_acc_lim_theta = 2.0;
//#line 363 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      __max__.weight_agent_acc_lim_theta = 1000.0;
//#line 363 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      __default__.weight_agent_acc_lim_theta = 0.0;
//#line 363 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      Optimization.abstract_parameters.push_back(HATebLocalPlannerReconfigureConfig::AbstractParamDescriptionConstPtr(new HATebLocalPlannerReconfigureConfig::ParamDescription<double>("weight_agent_acc_lim_theta", "double", 0, "Optimization weight for satisfying the maximum allowed rotational acceleration for agent", "", &HATebLocalPlannerReconfigureConfig::weight_agent_acc_lim_theta)));
//#line 363 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      __param_descriptions__.push_back(HATebLocalPlannerReconfigureConfig::AbstractParamDescriptionConstPtr(new HATebLocalPlannerReconfigureConfig::ParamDescription<double>("weight_agent_acc_lim_theta", "double", 0, "Optimization weight for satisfying the maximum allowed rotational acceleration for agent", "", &HATebLocalPlannerReconfigureConfig::weight_agent_acc_lim_theta)));
//#line 366 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      __min__.weight_agent_optimaltime = 0.0;
//#line 366 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      __max__.weight_agent_optimaltime = 1000.0;
//#line 366 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      __default__.weight_agent_optimaltime = 1.0;
//#line 366 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      Optimization.abstract_parameters.push_back(HATebLocalPlannerReconfigureConfig::AbstractParamDescriptionConstPtr(new HATebLocalPlannerReconfigureConfig::ParamDescription<double>("weight_agent_optimaltime", "double", 0, "Optimization weight for contracting the trajectory w.r.t transition time for agent", "", &HATebLocalPlannerReconfigureConfig::weight_agent_optimaltime)));
//#line 366 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      __param_descriptions__.push_back(HATebLocalPlannerReconfigureConfig::AbstractParamDescriptionConstPtr(new HATebLocalPlannerReconfigureConfig::ParamDescription<double>("weight_agent_optimaltime", "double", 0, "Optimization weight for contracting the trajectory w.r.t transition time for agent", "", &HATebLocalPlannerReconfigureConfig::weight_agent_optimaltime)));
//#line 369 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      __min__.weight_agent_viapoint = 0.0;
//#line 369 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      __max__.weight_agent_viapoint = 1000.0;
//#line 369 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      __default__.weight_agent_viapoint = 1.0;
//#line 369 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      Optimization.abstract_parameters.push_back(HATebLocalPlannerReconfigureConfig::AbstractParamDescriptionConstPtr(new HATebLocalPlannerReconfigureConfig::ParamDescription<double>("weight_agent_viapoint", "double", 0, "Optimization weight for minimizing the distance from agent to its via-points", "", &HATebLocalPlannerReconfigureConfig::weight_agent_viapoint)));
//#line 369 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      __param_descriptions__.push_back(HATebLocalPlannerReconfigureConfig::AbstractParamDescriptionConstPtr(new HATebLocalPlannerReconfigureConfig::ParamDescription<double>("weight_agent_viapoint", "double", 0, "Optimization weight for minimizing the distance from agent to its via-points", "", &HATebLocalPlannerReconfigureConfig::weight_agent_viapoint)));
//#line 372 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      __min__.weight_agent_robot_safety = 0.0;
//#line 372 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      __max__.weight_agent_robot_safety = 1000.0;
//#line 372 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      __default__.weight_agent_robot_safety = 20.0;
//#line 372 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      Optimization.abstract_parameters.push_back(HATebLocalPlannerReconfigureConfig::AbstractParamDescriptionConstPtr(new HATebLocalPlannerReconfigureConfig::ParamDescription<double>("weight_agent_robot_safety", "double", 0, "Optimization weight for satisfying a minimum seperation between agent and robot", "", &HATebLocalPlannerReconfigureConfig::weight_agent_robot_safety)));
//#line 372 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      __param_descriptions__.push_back(HATebLocalPlannerReconfigureConfig::AbstractParamDescriptionConstPtr(new HATebLocalPlannerReconfigureConfig::ParamDescription<double>("weight_agent_robot_safety", "double", 0, "Optimization weight for satisfying a minimum seperation between agent and robot", "", &HATebLocalPlannerReconfigureConfig::weight_agent_robot_safety)));
//#line 375 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      __min__.weight_agent_agent_safety = 0.0;
//#line 375 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      __max__.weight_agent_agent_safety = 1000.0;
//#line 375 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      __default__.weight_agent_agent_safety = 20.0;
//#line 375 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      Optimization.abstract_parameters.push_back(HATebLocalPlannerReconfigureConfig::AbstractParamDescriptionConstPtr(new HATebLocalPlannerReconfigureConfig::ParamDescription<double>("weight_agent_agent_safety", "double", 0, "Optimization weight for satisfying a minimum seperation between each pair of agent", "", &HATebLocalPlannerReconfigureConfig::weight_agent_agent_safety)));
//#line 375 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      __param_descriptions__.push_back(HATebLocalPlannerReconfigureConfig::AbstractParamDescriptionConstPtr(new HATebLocalPlannerReconfigureConfig::ParamDescription<double>("weight_agent_agent_safety", "double", 0, "Optimization weight for satisfying a minimum seperation between each pair of agent", "", &HATebLocalPlannerReconfigureConfig::weight_agent_agent_safety)));
//#line 378 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      __min__.weight_agent_robot_ttc = 0.0;
//#line 378 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      __max__.weight_agent_robot_ttc = 1000.0;
//#line 378 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      __default__.weight_agent_robot_ttc = 20.0;
//#line 378 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      Optimization.abstract_parameters.push_back(HATebLocalPlannerReconfigureConfig::AbstractParamDescriptionConstPtr(new HATebLocalPlannerReconfigureConfig::ParamDescription<double>("weight_agent_robot_ttc", "double", 0, "Optimization weight for agent-robot time-to-collision checking", "", &HATebLocalPlannerReconfigureConfig::weight_agent_robot_ttc)));
//#line 378 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      __param_descriptions__.push_back(HATebLocalPlannerReconfigureConfig::AbstractParamDescriptionConstPtr(new HATebLocalPlannerReconfigureConfig::ParamDescription<double>("weight_agent_robot_ttc", "double", 0, "Optimization weight for agent-robot time-to-collision checking", "", &HATebLocalPlannerReconfigureConfig::weight_agent_robot_ttc)));
//#line 381 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      __min__.weight_agent_robot_ttcplus = 0.0;
//#line 381 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      __max__.weight_agent_robot_ttcplus = 1000.0;
//#line 381 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      __default__.weight_agent_robot_ttcplus = 20.0;
//#line 381 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      Optimization.abstract_parameters.push_back(HATebLocalPlannerReconfigureConfig::AbstractParamDescriptionConstPtr(new HATebLocalPlannerReconfigureConfig::ParamDescription<double>("weight_agent_robot_ttcplus", "double", 0, "Optimization weight for agent-robot time-to-collision-plus checking", "", &HATebLocalPlannerReconfigureConfig::weight_agent_robot_ttcplus)));
//#line 381 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      __param_descriptions__.push_back(HATebLocalPlannerReconfigureConfig::AbstractParamDescriptionConstPtr(new HATebLocalPlannerReconfigureConfig::ParamDescription<double>("weight_agent_robot_ttcplus", "double", 0, "Optimization weight for agent-robot time-to-collision-plus checking", "", &HATebLocalPlannerReconfigureConfig::weight_agent_robot_ttcplus)));
//#line 384 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      __min__.weight_agent_robot_rel_vel = 0.0;
//#line 384 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      __max__.weight_agent_robot_rel_vel = 1000.0;
//#line 384 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      __default__.weight_agent_robot_rel_vel = 20.0;
//#line 384 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      Optimization.abstract_parameters.push_back(HATebLocalPlannerReconfigureConfig::AbstractParamDescriptionConstPtr(new HATebLocalPlannerReconfigureConfig::ParamDescription<double>("weight_agent_robot_rel_vel", "double", 0, "Optimization weight for agent-robot relative velocity costs", "", &HATebLocalPlannerReconfigureConfig::weight_agent_robot_rel_vel)));
//#line 384 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      __param_descriptions__.push_back(HATebLocalPlannerReconfigureConfig::AbstractParamDescriptionConstPtr(new HATebLocalPlannerReconfigureConfig::ParamDescription<double>("weight_agent_robot_rel_vel", "double", 0, "Optimization weight for agent-robot relative velocity costs", "", &HATebLocalPlannerReconfigureConfig::weight_agent_robot_rel_vel)));
//#line 387 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      __min__.weight_agent_robot_visibility = 0.0;
//#line 387 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      __max__.weight_agent_robot_visibility = 1000.0;
//#line 387 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      __default__.weight_agent_robot_visibility = 20.0;
//#line 387 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      Optimization.abstract_parameters.push_back(HATebLocalPlannerReconfigureConfig::AbstractParamDescriptionConstPtr(new HATebLocalPlannerReconfigureConfig::ParamDescription<double>("weight_agent_robot_visibility", "double", 0, "Optimization weight for agent-robot visibility costs", "", &HATebLocalPlannerReconfigureConfig::weight_agent_robot_visibility)));
//#line 387 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      __param_descriptions__.push_back(HATebLocalPlannerReconfigureConfig::AbstractParamDescriptionConstPtr(new HATebLocalPlannerReconfigureConfig::ParamDescription<double>("weight_agent_robot_visibility", "double", 0, "Optimization weight for agent-robot visibility costs", "", &HATebLocalPlannerReconfigureConfig::weight_agent_robot_visibility)));
//#line 390 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      __min__.agent_robot_ttc_scale_alpha = 0.0;
//#line 390 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      __max__.agent_robot_ttc_scale_alpha = 1000.0;
//#line 390 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      __default__.agent_robot_ttc_scale_alpha = 1.0;
//#line 390 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      Optimization.abstract_parameters.push_back(HATebLocalPlannerReconfigureConfig::AbstractParamDescriptionConstPtr(new HATebLocalPlannerReconfigureConfig::ParamDescription<double>("agent_robot_ttc_scale_alpha", "double", 0, "Scale alpha for for agent-robot time-to-collision scaling", "", &HATebLocalPlannerReconfigureConfig::agent_robot_ttc_scale_alpha)));
//#line 390 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      __param_descriptions__.push_back(HATebLocalPlannerReconfigureConfig::AbstractParamDescriptionConstPtr(new HATebLocalPlannerReconfigureConfig::ParamDescription<double>("agent_robot_ttc_scale_alpha", "double", 0, "Scale alpha for for agent-robot time-to-collision scaling", "", &HATebLocalPlannerReconfigureConfig::agent_robot_ttc_scale_alpha)));
//#line 393 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      __min__.agent_robot_ttcplus_scale_alpha = 0.0;
//#line 393 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      __max__.agent_robot_ttcplus_scale_alpha = 1000.0;
//#line 393 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      __default__.agent_robot_ttcplus_scale_alpha = 1.0;
//#line 393 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      Optimization.abstract_parameters.push_back(HATebLocalPlannerReconfigureConfig::AbstractParamDescriptionConstPtr(new HATebLocalPlannerReconfigureConfig::ParamDescription<double>("agent_robot_ttcplus_scale_alpha", "double", 0, "Scale alpha for for agent-robot time-to-collision plus scaling", "", &HATebLocalPlannerReconfigureConfig::agent_robot_ttcplus_scale_alpha)));
//#line 393 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      __param_descriptions__.push_back(HATebLocalPlannerReconfigureConfig::AbstractParamDescriptionConstPtr(new HATebLocalPlannerReconfigureConfig::ParamDescription<double>("agent_robot_ttcplus_scale_alpha", "double", 0, "Scale alpha for for agent-robot time-to-collision plus scaling", "", &HATebLocalPlannerReconfigureConfig::agent_robot_ttcplus_scale_alpha)));
//#line 396 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      __min__.weight_invisible_human = 0.0;
//#line 396 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      __max__.weight_invisible_human = 1000.0;
//#line 396 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      __default__.weight_invisible_human = 20.0;
//#line 396 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      Optimization.abstract_parameters.push_back(HATebLocalPlannerReconfigureConfig::AbstractParamDescriptionConstPtr(new HATebLocalPlannerReconfigureConfig::ParamDescription<double>("weight_invisible_human", "double", 0, "Optimization weight for invisible humans' costs", "", &HATebLocalPlannerReconfigureConfig::weight_invisible_human)));
//#line 396 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      __param_descriptions__.push_back(HATebLocalPlannerReconfigureConfig::AbstractParamDescriptionConstPtr(new HATebLocalPlannerReconfigureConfig::ParamDescription<double>("weight_invisible_human", "double", 0, "Optimization weight for invisible humans' costs", "", &HATebLocalPlannerReconfigureConfig::weight_invisible_human)));
//#line 399 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      __min__.fov = 0.0;
//#line 399 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      __max__.fov = 360.0;
//#line 399 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      __default__.fov = 90.0;
//#line 399 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      Optimization.abstract_parameters.push_back(HATebLocalPlannerReconfigureConfig::AbstractParamDescriptionConstPtr(new HATebLocalPlannerReconfigureConfig::ParamDescription<double>("fov", "double", 0, "Horizontal field of view of the agent (degrees). Used for the visibility constraint. If the robot is in the field of view,the visibility constraint is 0 else it increase.", "", &HATebLocalPlannerReconfigureConfig::fov)));
//#line 399 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      __param_descriptions__.push_back(HATebLocalPlannerReconfigureConfig::AbstractParamDescriptionConstPtr(new HATebLocalPlannerReconfigureConfig::ParamDescription<double>("fov", "double", 0, "Horizontal field of view of the agent (degrees). Used for the visibility constraint. If the robot is in the field of view,the visibility constraint is 0 else it increase.", "", &HATebLocalPlannerReconfigureConfig::fov)));
//#line 403 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      __min__.disable_warm_start = 0;
//#line 403 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      __max__.disable_warm_start = 1;
//#line 403 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      __default__.disable_warm_start = 0;
//#line 403 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      Optimization.abstract_parameters.push_back(HATebLocalPlannerReconfigureConfig::AbstractParamDescriptionConstPtr(new HATebLocalPlannerReconfigureConfig::ParamDescription<bool>("disable_warm_start", "bool", 0, "Whether to use warm start for already initiated bands", "", &HATebLocalPlannerReconfigureConfig::disable_warm_start)));
//#line 403 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      __param_descriptions__.push_back(HATebLocalPlannerReconfigureConfig::AbstractParamDescriptionConstPtr(new HATebLocalPlannerReconfigureConfig::ParamDescription<bool>("disable_warm_start", "bool", 0, "Whether to use warm start for already initiated bands", "", &HATebLocalPlannerReconfigureConfig::disable_warm_start)));
//#line 407 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      __min__.disable_rapid_omega_chage = 0;
//#line 407 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      __max__.disable_rapid_omega_chage = 1;
//#line 407 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      __default__.disable_rapid_omega_chage = 1;
//#line 407 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      Optimization.abstract_parameters.push_back(HATebLocalPlannerReconfigureConfig::AbstractParamDescriptionConstPtr(new HATebLocalPlannerReconfigureConfig::ParamDescription<bool>("disable_rapid_omega_chage", "bool", 0, "Wheter to disble rapid change of omega value of controller command in post-processing", "", &HATebLocalPlannerReconfigureConfig::disable_rapid_omega_chage)));
//#line 407 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      __param_descriptions__.push_back(HATebLocalPlannerReconfigureConfig::AbstractParamDescriptionConstPtr(new HATebLocalPlannerReconfigureConfig::ParamDescription<bool>("disable_rapid_omega_chage", "bool", 0, "Wheter to disble rapid change of omega value of controller command in post-processing", "", &HATebLocalPlannerReconfigureConfig::disable_rapid_omega_chage)));
//#line 411 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      __min__.omega_chage_time_seperation = 0.0;
//#line 411 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      __max__.omega_chage_time_seperation = 10.0;
//#line 411 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      __default__.omega_chage_time_seperation = 1.0;
//#line 411 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      Optimization.abstract_parameters.push_back(HATebLocalPlannerReconfigureConfig::AbstractParamDescriptionConstPtr(new HATebLocalPlannerReconfigureConfig::ParamDescription<double>("omega_chage_time_seperation", "double", 0, "Minimal amount of time to wait before allowing rapid change in omeag value for controller command in post-processing", "", &HATebLocalPlannerReconfigureConfig::omega_chage_time_seperation)));
//#line 411 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      __param_descriptions__.push_back(HATebLocalPlannerReconfigureConfig::AbstractParamDescriptionConstPtr(new HATebLocalPlannerReconfigureConfig::ParamDescription<double>("omega_chage_time_seperation", "double", 0, "Minimal amount of time to wait before allowing rapid change in omeag value for controller command in post-processing", "", &HATebLocalPlannerReconfigureConfig::omega_chage_time_seperation)));
//#line 124 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Optimization.convertParams();
//#line 124 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.groups.push_back(HATebLocalPlannerReconfigureConfig::AbstractGroupDescriptionConstPtr(new HATebLocalPlannerReconfigureConfig::GroupDescription<HATebLocalPlannerReconfigureConfig::DEFAULT::OPTIMIZATION, HATebLocalPlannerReconfigureConfig::DEFAULT>(Optimization)));
//#line 124 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __group_descriptions__.push_back(HATebLocalPlannerReconfigureConfig::AbstractGroupDescriptionConstPtr(new HATebLocalPlannerReconfigureConfig::GroupDescription<HATebLocalPlannerReconfigureConfig::DEFAULT::OPTIMIZATION, HATebLocalPlannerReconfigureConfig::DEFAULT>(Optimization)));
HATebLocalPlannerReconfigureConfig::GroupDescription<HATebLocalPlannerReconfigureConfig::DEFAULT::HATEB_CONSTRAINTS, HATebLocalPlannerReconfigureConfig::DEFAULT> Hateb_constraints("Hateb_constraints", "tab", 0, 10, true, &HATebLocalPlannerReconfigureConfig::DEFAULT::hateb_constraints);
//#line 423 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      __min__.planning_mode = 0;
//#line 423 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      __max__.planning_mode = 2;
//#line 423 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      __default__.planning_mode = 1;
//#line 423 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      Hateb_constraints.abstract_parameters.push_back(HATebLocalPlannerReconfigureConfig::AbstractParamDescriptionConstPtr(new HATebLocalPlannerReconfigureConfig::ParamDescription<int>("planning_mode", "int", 0, "Mode under which planner should run, 0=no-agents/humans, 1=normal, 2=approach", "{'enum': [{'name': 'DisregardHumans', 'type': 'int', 'value': 0, 'srcline': 419, 'srcfile': '/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg', 'description': 'Plan without considering agents/humans in the area', 'ctype': 'int', 'cconsttype': 'const int'}, {'name': 'HumanAware', 'type': 'int', 'value': 1, 'srcline': 420, 'srcfile': '/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg', 'description': 'Human-Aware planning with mutiple elastic bands', 'ctype': 'int', 'cconsttype': 'const int'}, {'name': 'Approach', 'type': 'int', 'value': 2, 'srcline': 421, 'srcfile': '/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg', 'description': 'Plan for approach behavior', 'ctype': 'int', 'cconsttype': 'const int'}], 'enum_description': 'An enum to set the planning mode'}", &HATebLocalPlannerReconfigureConfig::planning_mode)));
//#line 423 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      __param_descriptions__.push_back(HATebLocalPlannerReconfigureConfig::AbstractParamDescriptionConstPtr(new HATebLocalPlannerReconfigureConfig::ParamDescription<int>("planning_mode", "int", 0, "Mode under which planner should run, 0=no-agents/humans, 1=normal, 2=approach", "{'enum': [{'name': 'DisregardHumans', 'type': 'int', 'value': 0, 'srcline': 419, 'srcfile': '/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg', 'description': 'Plan without considering agents/humans in the area', 'ctype': 'int', 'cconsttype': 'const int'}, {'name': 'HumanAware', 'type': 'int', 'value': 1, 'srcline': 420, 'srcfile': '/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg', 'description': 'Human-Aware planning with mutiple elastic bands', 'ctype': 'int', 'cconsttype': 'const int'}, {'name': 'Approach', 'type': 'int', 'value': 2, 'srcline': 421, 'srcfile': '/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg', 'description': 'Plan for approach behavior', 'ctype': 'int', 'cconsttype': 'const int'}], 'enum_description': 'An enum to set the planning mode'}", &HATebLocalPlannerReconfigureConfig::planning_mode)));
//#line 426 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      __min__.use_agent_robot_safety_c = 0;
//#line 426 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      __max__.use_agent_robot_safety_c = 1;
//#line 426 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      __default__.use_agent_robot_safety_c = 0;
//#line 426 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      Hateb_constraints.abstract_parameters.push_back(HATebLocalPlannerReconfigureConfig::AbstractParamDescriptionConstPtr(new HATebLocalPlannerReconfigureConfig::ParamDescription<bool>("use_agent_robot_safety_c", "bool", 0, "Whether to use agent-robot safety constraints", "", &HATebLocalPlannerReconfigureConfig::use_agent_robot_safety_c)));
//#line 426 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      __param_descriptions__.push_back(HATebLocalPlannerReconfigureConfig::AbstractParamDescriptionConstPtr(new HATebLocalPlannerReconfigureConfig::ParamDescription<bool>("use_agent_robot_safety_c", "bool", 0, "Whether to use agent-robot safety constraints", "", &HATebLocalPlannerReconfigureConfig::use_agent_robot_safety_c)));
//#line 429 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      __min__.use_agent_agent_safety_c = 0;
//#line 429 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      __max__.use_agent_agent_safety_c = 1;
//#line 429 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      __default__.use_agent_agent_safety_c = 1;
//#line 429 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      Hateb_constraints.abstract_parameters.push_back(HATebLocalPlannerReconfigureConfig::AbstractParamDescriptionConstPtr(new HATebLocalPlannerReconfigureConfig::ParamDescription<bool>("use_agent_agent_safety_c", "bool", 0, "Whether to use agent-agent safety constraints", "", &HATebLocalPlannerReconfigureConfig::use_agent_agent_safety_c)));
//#line 429 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      __param_descriptions__.push_back(HATebLocalPlannerReconfigureConfig::AbstractParamDescriptionConstPtr(new HATebLocalPlannerReconfigureConfig::ParamDescription<bool>("use_agent_agent_safety_c", "bool", 0, "Whether to use agent-agent safety constraints", "", &HATebLocalPlannerReconfigureConfig::use_agent_agent_safety_c)));
//#line 432 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      __min__.use_agent_robot_ttc_c = 0;
//#line 432 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      __max__.use_agent_robot_ttc_c = 1;
//#line 432 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      __default__.use_agent_robot_ttc_c = 1;
//#line 432 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      Hateb_constraints.abstract_parameters.push_back(HATebLocalPlannerReconfigureConfig::AbstractParamDescriptionConstPtr(new HATebLocalPlannerReconfigureConfig::ParamDescription<bool>("use_agent_robot_ttc_c", "bool", 0, "Whether to use agent-robot time-to-collision constraints", "", &HATebLocalPlannerReconfigureConfig::use_agent_robot_ttc_c)));
//#line 432 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      __param_descriptions__.push_back(HATebLocalPlannerReconfigureConfig::AbstractParamDescriptionConstPtr(new HATebLocalPlannerReconfigureConfig::ParamDescription<bool>("use_agent_robot_ttc_c", "bool", 0, "Whether to use agent-robot time-to-collision constraints", "", &HATebLocalPlannerReconfigureConfig::use_agent_robot_ttc_c)));
//#line 435 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      __min__.scale_agent_robot_ttc_c = 0;
//#line 435 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      __max__.scale_agent_robot_ttc_c = 1;
//#line 435 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      __default__.scale_agent_robot_ttc_c = 1;
//#line 435 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      Hateb_constraints.abstract_parameters.push_back(HATebLocalPlannerReconfigureConfig::AbstractParamDescriptionConstPtr(new HATebLocalPlannerReconfigureConfig::ParamDescription<bool>("scale_agent_robot_ttc_c", "bool", 0, "Whether to scale up-down agent-robot time-to-collision constraints with distance", "", &HATebLocalPlannerReconfigureConfig::scale_agent_robot_ttc_c)));
//#line 435 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      __param_descriptions__.push_back(HATebLocalPlannerReconfigureConfig::AbstractParamDescriptionConstPtr(new HATebLocalPlannerReconfigureConfig::ParamDescription<bool>("scale_agent_robot_ttc_c", "bool", 0, "Whether to scale up-down agent-robot time-to-collision constraints with distance", "", &HATebLocalPlannerReconfigureConfig::scale_agent_robot_ttc_c)));
//#line 438 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      __min__.use_agent_robot_rel_vel_c = 0;
//#line 438 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      __max__.use_agent_robot_rel_vel_c = 1;
//#line 438 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      __default__.use_agent_robot_rel_vel_c = 1;
//#line 438 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      Hateb_constraints.abstract_parameters.push_back(HATebLocalPlannerReconfigureConfig::AbstractParamDescriptionConstPtr(new HATebLocalPlannerReconfigureConfig::ParamDescription<bool>("use_agent_robot_rel_vel_c", "bool", 0, "Whether to use agent-robot relative velocity constraints", "", &HATebLocalPlannerReconfigureConfig::use_agent_robot_rel_vel_c)));
//#line 438 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      __param_descriptions__.push_back(HATebLocalPlannerReconfigureConfig::AbstractParamDescriptionConstPtr(new HATebLocalPlannerReconfigureConfig::ParamDescription<bool>("use_agent_robot_rel_vel_c", "bool", 0, "Whether to use agent-robot relative velocity constraints", "", &HATebLocalPlannerReconfigureConfig::use_agent_robot_rel_vel_c)));
//#line 441 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      __min__.use_agent_robot_visi_c = 0;
//#line 441 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      __max__.use_agent_robot_visi_c = 1;
//#line 441 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      __default__.use_agent_robot_visi_c = 1;
//#line 441 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      Hateb_constraints.abstract_parameters.push_back(HATebLocalPlannerReconfigureConfig::AbstractParamDescriptionConstPtr(new HATebLocalPlannerReconfigureConfig::ParamDescription<bool>("use_agent_robot_visi_c", "bool", 0, "Whether to use agent-robot visibility constraints", "", &HATebLocalPlannerReconfigureConfig::use_agent_robot_visi_c)));
//#line 441 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      __param_descriptions__.push_back(HATebLocalPlannerReconfigureConfig::AbstractParamDescriptionConstPtr(new HATebLocalPlannerReconfigureConfig::ParamDescription<bool>("use_agent_robot_visi_c", "bool", 0, "Whether to use agent-robot visibility constraints", "", &HATebLocalPlannerReconfigureConfig::use_agent_robot_visi_c)));
//#line 444 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      __min__.use_agent_robot_ttcplus_c = 0;
//#line 444 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      __max__.use_agent_robot_ttcplus_c = 1;
//#line 444 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      __default__.use_agent_robot_ttcplus_c = 0;
//#line 444 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      Hateb_constraints.abstract_parameters.push_back(HATebLocalPlannerReconfigureConfig::AbstractParamDescriptionConstPtr(new HATebLocalPlannerReconfigureConfig::ParamDescription<bool>("use_agent_robot_ttcplus_c", "bool", 0, "Whether to use agent-robot time-to-collision plus constraints", "", &HATebLocalPlannerReconfigureConfig::use_agent_robot_ttcplus_c)));
//#line 444 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      __param_descriptions__.push_back(HATebLocalPlannerReconfigureConfig::AbstractParamDescriptionConstPtr(new HATebLocalPlannerReconfigureConfig::ParamDescription<bool>("use_agent_robot_ttcplus_c", "bool", 0, "Whether to use agent-robot time-to-collision plus constraints", "", &HATebLocalPlannerReconfigureConfig::use_agent_robot_ttcplus_c)));
//#line 447 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      __min__.add_invisible_humans = 0;
//#line 447 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      __max__.add_invisible_humans = 1;
//#line 447 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      __default__.add_invisible_humans = 1;
//#line 447 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      Hateb_constraints.abstract_parameters.push_back(HATebLocalPlannerReconfigureConfig::AbstractParamDescriptionConstPtr(new HATebLocalPlannerReconfigureConfig::ParamDescription<bool>("add_invisible_humans", "bool", 0, "Whether to use invisible humans constraint or not", "", &HATebLocalPlannerReconfigureConfig::add_invisible_humans)));
//#line 447 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      __param_descriptions__.push_back(HATebLocalPlannerReconfigureConfig::AbstractParamDescriptionConstPtr(new HATebLocalPlannerReconfigureConfig::ParamDescription<bool>("add_invisible_humans", "bool", 0, "Whether to use invisible humans constraint or not", "", &HATebLocalPlannerReconfigureConfig::add_invisible_humans)));
//#line 450 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      __min__.scale_agent_robot_ttcplus_c = 0;
//#line 450 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      __max__.scale_agent_robot_ttcplus_c = 1;
//#line 450 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      __default__.scale_agent_robot_ttcplus_c = 1;
//#line 450 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      Hateb_constraints.abstract_parameters.push_back(HATebLocalPlannerReconfigureConfig::AbstractParamDescriptionConstPtr(new HATebLocalPlannerReconfigureConfig::ParamDescription<bool>("scale_agent_robot_ttcplus_c", "bool", 0, "Whether to scale up-down agent-robot time-to-collision plus constraints with distance", "", &HATebLocalPlannerReconfigureConfig::scale_agent_robot_ttcplus_c)));
//#line 450 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      __param_descriptions__.push_back(HATebLocalPlannerReconfigureConfig::AbstractParamDescriptionConstPtr(new HATebLocalPlannerReconfigureConfig::ParamDescription<bool>("scale_agent_robot_ttcplus_c", "bool", 0, "Whether to scale up-down agent-robot time-to-collision plus constraints with distance", "", &HATebLocalPlannerReconfigureConfig::scale_agent_robot_ttcplus_c)));
//#line 453 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      __min__.use_agent_elastic_vel = 0;
//#line 453 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      __max__.use_agent_elastic_vel = 1;
//#line 453 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      __default__.use_agent_elastic_vel = 1;
//#line 453 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      Hateb_constraints.abstract_parameters.push_back(HATebLocalPlannerReconfigureConfig::AbstractParamDescriptionConstPtr(new HATebLocalPlannerReconfigureConfig::ParamDescription<bool>("use_agent_elastic_vel", "bool", 0, "Whether to use elasticity in velocity for agent", "", &HATebLocalPlannerReconfigureConfig::use_agent_elastic_vel)));
//#line 453 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      __param_descriptions__.push_back(HATebLocalPlannerReconfigureConfig::AbstractParamDescriptionConstPtr(new HATebLocalPlannerReconfigureConfig::ParamDescription<bool>("use_agent_elastic_vel", "bool", 0, "Whether to use elasticity in velocity for agent", "", &HATebLocalPlannerReconfigureConfig::use_agent_elastic_vel)));
//#line 456 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      __min__.use_external_prediction = 0;
//#line 456 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      __max__.use_external_prediction = 1;
//#line 456 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      __default__.use_external_prediction = 0;
//#line 456 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      Hateb_constraints.abstract_parameters.push_back(HATebLocalPlannerReconfigureConfig::AbstractParamDescriptionConstPtr(new HATebLocalPlannerReconfigureConfig::ParamDescription<bool>("use_external_prediction", "bool", 0, "Whether to use external prediction or velocity-obstacle method", "", &HATebLocalPlannerReconfigureConfig::use_external_prediction)));
//#line 456 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      __param_descriptions__.push_back(HATebLocalPlannerReconfigureConfig::AbstractParamDescriptionConstPtr(new HATebLocalPlannerReconfigureConfig::ParamDescription<bool>("use_external_prediction", "bool", 0, "Whether to use external prediction or velocity-obstacle method", "", &HATebLocalPlannerReconfigureConfig::use_external_prediction)));
//#line 459 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      __min__.predict_agent_behind_robot = 0;
//#line 459 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      __max__.predict_agent_behind_robot = 1;
//#line 459 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      __default__.predict_agent_behind_robot = 0;
//#line 459 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      Hateb_constraints.abstract_parameters.push_back(HATebLocalPlannerReconfigureConfig::AbstractParamDescriptionConstPtr(new HATebLocalPlannerReconfigureConfig::ParamDescription<bool>("predict_agent_behind_robot", "bool", 0, "Whether to predict agent goal pose behind the robot for external prediction", "", &HATebLocalPlannerReconfigureConfig::predict_agent_behind_robot)));
//#line 459 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      __param_descriptions__.push_back(HATebLocalPlannerReconfigureConfig::AbstractParamDescriptionConstPtr(new HATebLocalPlannerReconfigureConfig::ParamDescription<bool>("predict_agent_behind_robot", "bool", 0, "Whether to predict agent goal pose behind the robot for external prediction", "", &HATebLocalPlannerReconfigureConfig::predict_agent_behind_robot)));
//#line 462 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      __min__.predict_agent_goal = 0;
//#line 462 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      __max__.predict_agent_goal = 1;
//#line 462 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      __default__.predict_agent_goal = 0;
//#line 462 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      Hateb_constraints.abstract_parameters.push_back(HATebLocalPlannerReconfigureConfig::AbstractParamDescriptionConstPtr(new HATebLocalPlannerReconfigureConfig::ParamDescription<bool>("predict_agent_goal", "bool", 0, "Whether to predict agent goal pose for external prediction", "", &HATebLocalPlannerReconfigureConfig::predict_agent_goal)));
//#line 462 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      __param_descriptions__.push_back(HATebLocalPlannerReconfigureConfig::AbstractParamDescriptionConstPtr(new HATebLocalPlannerReconfigureConfig::ParamDescription<bool>("predict_agent_goal", "bool", 0, "Whether to predict agent goal pose for external prediction", "", &HATebLocalPlannerReconfigureConfig::predict_agent_goal)));
//#line 465 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      __min__.min_agent_robot_dist = 0.0;
//#line 465 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      __max__.min_agent_robot_dist = 5.0;
//#line 465 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      __default__.min_agent_robot_dist = 0.6;
//#line 465 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      Hateb_constraints.abstract_parameters.push_back(HATebLocalPlannerReconfigureConfig::AbstractParamDescriptionConstPtr(new HATebLocalPlannerReconfigureConfig::ParamDescription<double>("min_agent_robot_dist", "double", 0, "Minumum allowed distance between agent and robot", "", &HATebLocalPlannerReconfigureConfig::min_agent_robot_dist)));
//#line 465 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      __param_descriptions__.push_back(HATebLocalPlannerReconfigureConfig::AbstractParamDescriptionConstPtr(new HATebLocalPlannerReconfigureConfig::ParamDescription<double>("min_agent_robot_dist", "double", 0, "Minumum allowed distance between agent and robot", "", &HATebLocalPlannerReconfigureConfig::min_agent_robot_dist)));
//#line 468 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      __min__.min_agent_agent_dist = 0.0;
//#line 468 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      __max__.min_agent_agent_dist = 5.0;
//#line 468 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      __default__.min_agent_agent_dist = 0.2;
//#line 468 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      Hateb_constraints.abstract_parameters.push_back(HATebLocalPlannerReconfigureConfig::AbstractParamDescriptionConstPtr(new HATebLocalPlannerReconfigureConfig::ParamDescription<double>("min_agent_agent_dist", "double", 0, "Minumum allowed distance between two agent", "", &HATebLocalPlannerReconfigureConfig::min_agent_agent_dist)));
//#line 468 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      __param_descriptions__.push_back(HATebLocalPlannerReconfigureConfig::AbstractParamDescriptionConstPtr(new HATebLocalPlannerReconfigureConfig::ParamDescription<double>("min_agent_agent_dist", "double", 0, "Minumum allowed distance between two agent", "", &HATebLocalPlannerReconfigureConfig::min_agent_agent_dist)));
//#line 471 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      __min__.ttc_threshold = 0.0;
//#line 471 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      __max__.ttc_threshold = 100.0;
//#line 471 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      __default__.ttc_threshold = 5.0;
//#line 471 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      Hateb_constraints.abstract_parameters.push_back(HATebLocalPlannerReconfigureConfig::AbstractParamDescriptionConstPtr(new HATebLocalPlannerReconfigureConfig::ParamDescription<double>("ttc_threshold", "double", 0, "Threshold for time-to-collision between agent and robot", "", &HATebLocalPlannerReconfigureConfig::ttc_threshold)));
//#line 471 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      __param_descriptions__.push_back(HATebLocalPlannerReconfigureConfig::AbstractParamDescriptionConstPtr(new HATebLocalPlannerReconfigureConfig::ParamDescription<double>("ttc_threshold", "double", 0, "Threshold for time-to-collision between agent and robot", "", &HATebLocalPlannerReconfigureConfig::ttc_threshold)));
//#line 474 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      __min__.rel_vel_cost_threshold = 0.0;
//#line 474 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      __max__.rel_vel_cost_threshold = 100.0;
//#line 474 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      __default__.rel_vel_cost_threshold = 5.0;
//#line 474 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      Hateb_constraints.abstract_parameters.push_back(HATebLocalPlannerReconfigureConfig::AbstractParamDescriptionConstPtr(new HATebLocalPlannerReconfigureConfig::ParamDescription<double>("rel_vel_cost_threshold", "double", 0, "Threshold for relative velocity costs between agent and robot", "", &HATebLocalPlannerReconfigureConfig::rel_vel_cost_threshold)));
//#line 474 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      __param_descriptions__.push_back(HATebLocalPlannerReconfigureConfig::AbstractParamDescriptionConstPtr(new HATebLocalPlannerReconfigureConfig::ParamDescription<double>("rel_vel_cost_threshold", "double", 0, "Threshold for relative velocity costs between agent and robot", "", &HATebLocalPlannerReconfigureConfig::rel_vel_cost_threshold)));
//#line 477 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      __min__.invisible_human_threshold = 0.0;
//#line 477 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      __max__.invisible_human_threshold = 100.0;
//#line 477 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      __default__.invisible_human_threshold = 5.0;
//#line 477 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      Hateb_constraints.abstract_parameters.push_back(HATebLocalPlannerReconfigureConfig::AbstractParamDescriptionConstPtr(new HATebLocalPlannerReconfigureConfig::ParamDescription<double>("invisible_human_threshold", "double", 0, "Threshold for invisible humans cost", "", &HATebLocalPlannerReconfigureConfig::invisible_human_threshold)));
//#line 477 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      __param_descriptions__.push_back(HATebLocalPlannerReconfigureConfig::AbstractParamDescriptionConstPtr(new HATebLocalPlannerReconfigureConfig::ParamDescription<double>("invisible_human_threshold", "double", 0, "Threshold for invisible humans cost", "", &HATebLocalPlannerReconfigureConfig::invisible_human_threshold)));
//#line 480 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      __min__.visibility_cost_threshold = 0.0;
//#line 480 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      __max__.visibility_cost_threshold = 100.0;
//#line 480 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      __default__.visibility_cost_threshold = 5.0;
//#line 480 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      Hateb_constraints.abstract_parameters.push_back(HATebLocalPlannerReconfigureConfig::AbstractParamDescriptionConstPtr(new HATebLocalPlannerReconfigureConfig::ParamDescription<double>("visibility_cost_threshold", "double", 0, "Threshold for visibility costs between agent and robot", "", &HATebLocalPlannerReconfigureConfig::visibility_cost_threshold)));
//#line 480 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      __param_descriptions__.push_back(HATebLocalPlannerReconfigureConfig::AbstractParamDescriptionConstPtr(new HATebLocalPlannerReconfigureConfig::ParamDescription<double>("visibility_cost_threshold", "double", 0, "Threshold for visibility costs between agent and robot", "", &HATebLocalPlannerReconfigureConfig::visibility_cost_threshold)));
//#line 483 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      __min__.agent_pose_prediction_reset_time = 0.0;
//#line 483 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      __max__.agent_pose_prediction_reset_time = 20.0;
//#line 483 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      __default__.agent_pose_prediction_reset_time = 2.0;
//#line 483 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      Hateb_constraints.abstract_parameters.push_back(HATebLocalPlannerReconfigureConfig::AbstractParamDescriptionConstPtr(new HATebLocalPlannerReconfigureConfig::ParamDescription<double>("agent_pose_prediction_reset_time", "double", 0, "Time since last call to the planner after which agent pose prediction is resetted", "", &HATebLocalPlannerReconfigureConfig::agent_pose_prediction_reset_time)));
//#line 483 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      __param_descriptions__.push_back(HATebLocalPlannerReconfigureConfig::AbstractParamDescriptionConstPtr(new HATebLocalPlannerReconfigureConfig::ParamDescription<double>("agent_pose_prediction_reset_time", "double", 0, "Time since last call to the planner after which agent pose prediction is resetted", "", &HATebLocalPlannerReconfigureConfig::agent_pose_prediction_reset_time)));
//#line 486 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      __min__.ttcplus_threshold = 0.0;
//#line 486 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      __max__.ttcplus_threshold = 100.0;
//#line 486 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      __default__.ttcplus_threshold = 5.0;
//#line 486 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      Hateb_constraints.abstract_parameters.push_back(HATebLocalPlannerReconfigureConfig::AbstractParamDescriptionConstPtr(new HATebLocalPlannerReconfigureConfig::ParamDescription<double>("ttcplus_threshold", "double", 0, "Threshold for time-to-collision plus between agent and robot", "", &HATebLocalPlannerReconfigureConfig::ttcplus_threshold)));
//#line 486 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      __param_descriptions__.push_back(HATebLocalPlannerReconfigureConfig::AbstractParamDescriptionConstPtr(new HATebLocalPlannerReconfigureConfig::ParamDescription<double>("ttcplus_threshold", "double", 0, "Threshold for time-to-collision plus between agent and robot", "", &HATebLocalPlannerReconfigureConfig::ttcplus_threshold)));
//#line 489 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      __min__.ttcplus_timer = 0.0;
//#line 489 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      __max__.ttcplus_timer = 1000.0;
//#line 489 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      __default__.ttcplus_timer = 20.0;
//#line 489 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      Hateb_constraints.abstract_parameters.push_back(HATebLocalPlannerReconfigureConfig::AbstractParamDescriptionConstPtr(new HATebLocalPlannerReconfigureConfig::ParamDescription<double>("ttcplus_timer", "double", 0, "Timer for the ttcplus, how many tenth of second the robot wait before to increase the ttcplus cost", "", &HATebLocalPlannerReconfigureConfig::ttcplus_timer)));
//#line 489 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      __param_descriptions__.push_back(HATebLocalPlannerReconfigureConfig::AbstractParamDescriptionConstPtr(new HATebLocalPlannerReconfigureConfig::ParamDescription<double>("ttcplus_timer", "double", 0, "Timer for the ttcplus, how many tenth of second the robot wait before to increase the ttcplus cost", "", &HATebLocalPlannerReconfigureConfig::ttcplus_timer)));
HATebLocalPlannerReconfigureConfig::GroupDescription<HATebLocalPlannerReconfigureConfig::DEFAULT::HATEB_CONSTRAINTS::APPROACH, HATebLocalPlannerReconfigureConfig::DEFAULT::HATEB_CONSTRAINTS> Approach("Approach", "hide", 10, 11, true, &HATebLocalPlannerReconfigureConfig::DEFAULT::HATEB_CONSTRAINTS::approach);
//#line 496 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      __min__.approach_id = 1;
//#line 496 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      __max__.approach_id = 32767;
//#line 496 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      __default__.approach_id = 1;
//#line 496 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      Approach.abstract_parameters.push_back(HATebLocalPlannerReconfigureConfig::AbstractParamDescriptionConstPtr(new HATebLocalPlannerReconfigureConfig::ParamDescription<int>("approach_id", "int", 0, "ID of the tracked person to approach", "", &HATebLocalPlannerReconfigureConfig::approach_id)));
//#line 496 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      __param_descriptions__.push_back(HATebLocalPlannerReconfigureConfig::AbstractParamDescriptionConstPtr(new HATebLocalPlannerReconfigureConfig::ParamDescription<int>("approach_id", "int", 0, "ID of the tracked person to approach", "", &HATebLocalPlannerReconfigureConfig::approach_id)));
//#line 497 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      __min__.approach_dist = 0.0;
//#line 497 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      __max__.approach_dist = 5.0;
//#line 497 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      __default__.approach_dist = 0.5;
//#line 497 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      Approach.abstract_parameters.push_back(HATebLocalPlannerReconfigureConfig::AbstractParamDescriptionConstPtr(new HATebLocalPlannerReconfigureConfig::ParamDescription<double>("approach_dist", "double", 0, "Goal distance in front of the agent, for approach behavior", "", &HATebLocalPlannerReconfigureConfig::approach_dist)));
//#line 497 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      __param_descriptions__.push_back(HATebLocalPlannerReconfigureConfig::AbstractParamDescriptionConstPtr(new HATebLocalPlannerReconfigureConfig::ParamDescription<double>("approach_dist", "double", 0, "Goal distance in front of the agent, for approach behavior", "", &HATebLocalPlannerReconfigureConfig::approach_dist)));
//#line 498 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      __min__.approach_angle = 0.0;
//#line 498 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      __max__.approach_angle = 6.28;
//#line 498 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      __default__.approach_angle = 3.14;
//#line 498 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      Approach.abstract_parameters.push_back(HATebLocalPlannerReconfigureConfig::AbstractParamDescriptionConstPtr(new HATebLocalPlannerReconfigureConfig::ParamDescription<double>("approach_angle", "double", 0, "Goal angle that defines in-fornt-of-the-agent, for approach behavior", "", &HATebLocalPlannerReconfigureConfig::approach_angle)));
//#line 498 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      __param_descriptions__.push_back(HATebLocalPlannerReconfigureConfig::AbstractParamDescriptionConstPtr(new HATebLocalPlannerReconfigureConfig::ParamDescription<double>("approach_angle", "double", 0, "Goal angle that defines in-fornt-of-the-agent, for approach behavior", "", &HATebLocalPlannerReconfigureConfig::approach_angle)));
//#line 499 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      __min__.approach_dist_tolerance = 0.0;
//#line 499 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      __max__.approach_dist_tolerance = 5.0;
//#line 499 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      __default__.approach_dist_tolerance = 0.2;
//#line 499 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      Approach.abstract_parameters.push_back(HATebLocalPlannerReconfigureConfig::AbstractParamDescriptionConstPtr(new HATebLocalPlannerReconfigureConfig::ParamDescription<double>("approach_dist_tolerance", "double", 0, "Goal distance tolerance for adding new point to the global path of the robot", "", &HATebLocalPlannerReconfigureConfig::approach_dist_tolerance)));
//#line 499 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      __param_descriptions__.push_back(HATebLocalPlannerReconfigureConfig::AbstractParamDescriptionConstPtr(new HATebLocalPlannerReconfigureConfig::ParamDescription<double>("approach_dist_tolerance", "double", 0, "Goal distance tolerance for adding new point to the global path of the robot", "", &HATebLocalPlannerReconfigureConfig::approach_dist_tolerance)));
//#line 500 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      __min__.approach_angle_tolerance = 0.0;
//#line 500 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      __max__.approach_angle_tolerance = 6.28;
//#line 500 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      __default__.approach_angle_tolerance = 0.3;
//#line 500 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      Approach.abstract_parameters.push_back(HATebLocalPlannerReconfigureConfig::AbstractParamDescriptionConstPtr(new HATebLocalPlannerReconfigureConfig::ParamDescription<double>("approach_angle_tolerance", "double", 0, "Goal angle tolerance for adding new point to the global path of the robot", "", &HATebLocalPlannerReconfigureConfig::approach_angle_tolerance)));
//#line 500 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      __param_descriptions__.push_back(HATebLocalPlannerReconfigureConfig::AbstractParamDescriptionConstPtr(new HATebLocalPlannerReconfigureConfig::ParamDescription<double>("approach_angle_tolerance", "double", 0, "Goal angle tolerance for adding new point to the global path of the robot", "", &HATebLocalPlannerReconfigureConfig::approach_angle_tolerance)));
//#line 124 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Approach.convertParams();
//#line 124 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Hateb_constraints.groups.push_back(HATebLocalPlannerReconfigureConfig::AbstractGroupDescriptionConstPtr(new HATebLocalPlannerReconfigureConfig::GroupDescription<HATebLocalPlannerReconfigureConfig::DEFAULT::HATEB_CONSTRAINTS::APPROACH, HATebLocalPlannerReconfigureConfig::DEFAULT::HATEB_CONSTRAINTS>(Approach)));
//#line 124 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __group_descriptions__.push_back(HATebLocalPlannerReconfigureConfig::AbstractGroupDescriptionConstPtr(new HATebLocalPlannerReconfigureConfig::GroupDescription<HATebLocalPlannerReconfigureConfig::DEFAULT::HATEB_CONSTRAINTS::APPROACH, HATebLocalPlannerReconfigureConfig::DEFAULT::HATEB_CONSTRAINTS>(Approach)));
//#line 124 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Hateb_constraints.convertParams();
//#line 124 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.groups.push_back(HATebLocalPlannerReconfigureConfig::AbstractGroupDescriptionConstPtr(new HATebLocalPlannerReconfigureConfig::GroupDescription<HATebLocalPlannerReconfigureConfig::DEFAULT::HATEB_CONSTRAINTS, HATebLocalPlannerReconfigureConfig::DEFAULT>(Hateb_constraints)));
//#line 124 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __group_descriptions__.push_back(HATebLocalPlannerReconfigureConfig::AbstractGroupDescriptionConstPtr(new HATebLocalPlannerReconfigureConfig::GroupDescription<HATebLocalPlannerReconfigureConfig::DEFAULT::HATEB_CONSTRAINTS, HATebLocalPlannerReconfigureConfig::DEFAULT>(Hateb_constraints)));
HATebLocalPlannerReconfigureConfig::GroupDescription<HATebLocalPlannerReconfigureConfig::DEFAULT::HCPLANNING, HATebLocalPlannerReconfigureConfig::DEFAULT> HCPlanning("HCPlanning", "tab", 0, 12, true, &HATebLocalPlannerReconfigureConfig::DEFAULT::hcplanning);
//#line 506 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      __min__.enable_multithreading = 0;
//#line 506 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      __max__.enable_multithreading = 1;
//#line 506 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      __default__.enable_multithreading = 1;
//#line 506 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      HCPlanning.abstract_parameters.push_back(HATebLocalPlannerReconfigureConfig::AbstractParamDescriptionConstPtr(new HATebLocalPlannerReconfigureConfig::ParamDescription<bool>("enable_multithreading", "bool", 0, "Activate multiple threading for planning multiple trajectories in parallel", "", &HATebLocalPlannerReconfigureConfig::enable_multithreading)));
//#line 506 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      __param_descriptions__.push_back(HATebLocalPlannerReconfigureConfig::AbstractParamDescriptionConstPtr(new HATebLocalPlannerReconfigureConfig::ParamDescription<bool>("enable_multithreading", "bool", 0, "Activate multiple threading for planning multiple trajectories in parallel", "", &HATebLocalPlannerReconfigureConfig::enable_multithreading)));
//#line 510 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      __min__.max_number_classes = 1;
//#line 510 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      __max__.max_number_classes = 100;
//#line 510 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      __default__.max_number_classes = 5;
//#line 510 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      HCPlanning.abstract_parameters.push_back(HATebLocalPlannerReconfigureConfig::AbstractParamDescriptionConstPtr(new HATebLocalPlannerReconfigureConfig::ParamDescription<int>("max_number_classes", "int", 0, "Specify the maximum number of allowed alternative homotopy classes (limits computational effort)", "", &HATebLocalPlannerReconfigureConfig::max_number_classes)));
//#line 510 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      __param_descriptions__.push_back(HATebLocalPlannerReconfigureConfig::AbstractParamDescriptionConstPtr(new HATebLocalPlannerReconfigureConfig::ParamDescription<int>("max_number_classes", "int", 0, "Specify the maximum number of allowed alternative homotopy classes (limits computational effort)", "", &HATebLocalPlannerReconfigureConfig::max_number_classes)));
//#line 514 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      __min__.selection_cost_hysteresis = 0.0;
//#line 514 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      __max__.selection_cost_hysteresis = 2.0;
//#line 514 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      __default__.selection_cost_hysteresis = 1.0;
//#line 514 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      HCPlanning.abstract_parameters.push_back(HATebLocalPlannerReconfigureConfig::AbstractParamDescriptionConstPtr(new HATebLocalPlannerReconfigureConfig::ParamDescription<double>("selection_cost_hysteresis", "double", 0, "Specify how much trajectory cost must a new candidate have w.r.t. a previously selected trajectory in order to be selected (selection if new_cost < old_cost*factor)", "", &HATebLocalPlannerReconfigureConfig::selection_cost_hysteresis)));
//#line 514 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      __param_descriptions__.push_back(HATebLocalPlannerReconfigureConfig::AbstractParamDescriptionConstPtr(new HATebLocalPlannerReconfigureConfig::ParamDescription<double>("selection_cost_hysteresis", "double", 0, "Specify how much trajectory cost must a new candidate have w.r.t. a previously selected trajectory in order to be selected (selection if new_cost < old_cost*factor)", "", &HATebLocalPlannerReconfigureConfig::selection_cost_hysteresis)));
//#line 519 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      __min__.selection_prefer_initial_plan = 0.0;
//#line 519 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      __max__.selection_prefer_initial_plan = 1.0;
//#line 519 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      __default__.selection_prefer_initial_plan = 0.95;
//#line 519 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      HCPlanning.abstract_parameters.push_back(HATebLocalPlannerReconfigureConfig::AbstractParamDescriptionConstPtr(new HATebLocalPlannerReconfigureConfig::ParamDescription<double>("selection_prefer_initial_plan", "double", 0, "Specify a cost reduction in the interval (0,1) for the trajectory in the equivalence class of the initial plan.)", "", &HATebLocalPlannerReconfigureConfig::selection_prefer_initial_plan)));
//#line 519 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      __param_descriptions__.push_back(HATebLocalPlannerReconfigureConfig::AbstractParamDescriptionConstPtr(new HATebLocalPlannerReconfigureConfig::ParamDescription<double>("selection_prefer_initial_plan", "double", 0, "Specify a cost reduction in the interval (0,1) for the trajectory in the equivalence class of the initial plan.)", "", &HATebLocalPlannerReconfigureConfig::selection_prefer_initial_plan)));
//#line 523 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      __min__.selection_obst_cost_scale = 0.0;
//#line 523 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      __max__.selection_obst_cost_scale = 1000.0;
//#line 523 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      __default__.selection_obst_cost_scale = 2.0;
//#line 523 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      HCPlanning.abstract_parameters.push_back(HATebLocalPlannerReconfigureConfig::AbstractParamDescriptionConstPtr(new HATebLocalPlannerReconfigureConfig::ParamDescription<double>("selection_obst_cost_scale", "double", 0, "Extra scaling of obstacle cost terms just for selecting the 'best' candidate (new_obst_cost: obst_cost*factor)", "", &HATebLocalPlannerReconfigureConfig::selection_obst_cost_scale)));
//#line 523 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      __param_descriptions__.push_back(HATebLocalPlannerReconfigureConfig::AbstractParamDescriptionConstPtr(new HATebLocalPlannerReconfigureConfig::ParamDescription<double>("selection_obst_cost_scale", "double", 0, "Extra scaling of obstacle cost terms just for selecting the 'best' candidate (new_obst_cost: obst_cost*factor)", "", &HATebLocalPlannerReconfigureConfig::selection_obst_cost_scale)));
//#line 527 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      __min__.selection_viapoint_cost_scale = 0.0;
//#line 527 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      __max__.selection_viapoint_cost_scale = 100.0;
//#line 527 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      __default__.selection_viapoint_cost_scale = 1.0;
//#line 527 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      HCPlanning.abstract_parameters.push_back(HATebLocalPlannerReconfigureConfig::AbstractParamDescriptionConstPtr(new HATebLocalPlannerReconfigureConfig::ParamDescription<double>("selection_viapoint_cost_scale", "double", 0, "Extra scaling of via-point cost terms just for selecting the 'best' candidate. (new_viapt_cost: viapt_cost*factor)", "", &HATebLocalPlannerReconfigureConfig::selection_viapoint_cost_scale)));
//#line 527 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      __param_descriptions__.push_back(HATebLocalPlannerReconfigureConfig::AbstractParamDescriptionConstPtr(new HATebLocalPlannerReconfigureConfig::ParamDescription<double>("selection_viapoint_cost_scale", "double", 0, "Extra scaling of via-point cost terms just for selecting the 'best' candidate. (new_viapt_cost: viapt_cost*factor)", "", &HATebLocalPlannerReconfigureConfig::selection_viapoint_cost_scale)));
//#line 531 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      __min__.selection_alternative_time_cost = 0;
//#line 531 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      __max__.selection_alternative_time_cost = 1;
//#line 531 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      __default__.selection_alternative_time_cost = 0;
//#line 531 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      HCPlanning.abstract_parameters.push_back(HATebLocalPlannerReconfigureConfig::AbstractParamDescriptionConstPtr(new HATebLocalPlannerReconfigureConfig::ParamDescription<bool>("selection_alternative_time_cost", "bool", 0, "If true, time cost is replaced by the total transition time.", "", &HATebLocalPlannerReconfigureConfig::selection_alternative_time_cost)));
//#line 531 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      __param_descriptions__.push_back(HATebLocalPlannerReconfigureConfig::AbstractParamDescriptionConstPtr(new HATebLocalPlannerReconfigureConfig::ParamDescription<bool>("selection_alternative_time_cost", "bool", 0, "If true, time cost is replaced by the total transition time.", "", &HATebLocalPlannerReconfigureConfig::selection_alternative_time_cost)));
//#line 535 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      __min__.switching_blocking_period = 0.0;
//#line 535 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      __max__.switching_blocking_period = 60.0;
//#line 535 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      __default__.switching_blocking_period = 0.0;
//#line 535 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      HCPlanning.abstract_parameters.push_back(HATebLocalPlannerReconfigureConfig::AbstractParamDescriptionConstPtr(new HATebLocalPlannerReconfigureConfig::ParamDescription<double>("switching_blocking_period", "double", 0, "Specify a time duration in seconds that needs to be expired before a switch to new equivalence class is allowed", "", &HATebLocalPlannerReconfigureConfig::switching_blocking_period)));
//#line 535 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      __param_descriptions__.push_back(HATebLocalPlannerReconfigureConfig::AbstractParamDescriptionConstPtr(new HATebLocalPlannerReconfigureConfig::ParamDescription<double>("switching_blocking_period", "double", 0, "Specify a time duration in seconds that needs to be expired before a switch to new equivalence class is allowed", "", &HATebLocalPlannerReconfigureConfig::switching_blocking_period)));
//#line 539 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      __min__.roadmap_graph_no_samples = 1;
//#line 539 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      __max__.roadmap_graph_no_samples = 100;
//#line 539 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      __default__.roadmap_graph_no_samples = 15;
//#line 539 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      HCPlanning.abstract_parameters.push_back(HATebLocalPlannerReconfigureConfig::AbstractParamDescriptionConstPtr(new HATebLocalPlannerReconfigureConfig::ParamDescription<int>("roadmap_graph_no_samples", "int", 0, "Specify the number of samples generated for creating the roadmap graph, if simple_exploration is turend off", "", &HATebLocalPlannerReconfigureConfig::roadmap_graph_no_samples)));
//#line 539 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      __param_descriptions__.push_back(HATebLocalPlannerReconfigureConfig::AbstractParamDescriptionConstPtr(new HATebLocalPlannerReconfigureConfig::ParamDescription<int>("roadmap_graph_no_samples", "int", 0, "Specify the number of samples generated for creating the roadmap graph, if simple_exploration is turend off", "", &HATebLocalPlannerReconfigureConfig::roadmap_graph_no_samples)));
//#line 543 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      __min__.roadmap_graph_area_width = 0.1;
//#line 543 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      __max__.roadmap_graph_area_width = 20.0;
//#line 543 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      __default__.roadmap_graph_area_width = 5.0;
//#line 543 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      HCPlanning.abstract_parameters.push_back(HATebLocalPlannerReconfigureConfig::AbstractParamDescriptionConstPtr(new HATebLocalPlannerReconfigureConfig::ParamDescription<double>("roadmap_graph_area_width", "double", 0, "Specify the width of the area in which sampled will be generated between start and goal [m] (the height equals the start-goal distance)", "", &HATebLocalPlannerReconfigureConfig::roadmap_graph_area_width)));
//#line 543 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      __param_descriptions__.push_back(HATebLocalPlannerReconfigureConfig::AbstractParamDescriptionConstPtr(new HATebLocalPlannerReconfigureConfig::ParamDescription<double>("roadmap_graph_area_width", "double", 0, "Specify the width of the area in which sampled will be generated between start and goal [m] (the height equals the start-goal distance)", "", &HATebLocalPlannerReconfigureConfig::roadmap_graph_area_width)));
//#line 547 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      __min__.roadmap_graph_area_length_scale = 0.5;
//#line 547 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      __max__.roadmap_graph_area_length_scale = 2.0;
//#line 547 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      __default__.roadmap_graph_area_length_scale = 1.0;
//#line 547 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      HCPlanning.abstract_parameters.push_back(HATebLocalPlannerReconfigureConfig::AbstractParamDescriptionConstPtr(new HATebLocalPlannerReconfigureConfig::ParamDescription<double>("roadmap_graph_area_length_scale", "double", 0, "The length of the rectangular region is determined by the distance between start and goal. This parameter further scales the distance such that the geometric center remains equal!)", "", &HATebLocalPlannerReconfigureConfig::roadmap_graph_area_length_scale)));
//#line 547 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      __param_descriptions__.push_back(HATebLocalPlannerReconfigureConfig::AbstractParamDescriptionConstPtr(new HATebLocalPlannerReconfigureConfig::ParamDescription<double>("roadmap_graph_area_length_scale", "double", 0, "The length of the rectangular region is determined by the distance between start and goal. This parameter further scales the distance such that the geometric center remains equal!)", "", &HATebLocalPlannerReconfigureConfig::roadmap_graph_area_length_scale)));
//#line 551 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      __min__.h_signature_prescaler = 0.2;
//#line 551 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      __max__.h_signature_prescaler = 1.0;
//#line 551 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      __default__.h_signature_prescaler = 1.0;
//#line 551 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      HCPlanning.abstract_parameters.push_back(HATebLocalPlannerReconfigureConfig::AbstractParamDescriptionConstPtr(new HATebLocalPlannerReconfigureConfig::ParamDescription<double>("h_signature_prescaler", "double", 0, "Scale number of obstacle value in order to allow huge number of obstacles. Do not choose it extremly low, otherwise obstacles cannot be distinguished from each other (0.2<H<=1)", "", &HATebLocalPlannerReconfigureConfig::h_signature_prescaler)));
//#line 551 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      __param_descriptions__.push_back(HATebLocalPlannerReconfigureConfig::AbstractParamDescriptionConstPtr(new HATebLocalPlannerReconfigureConfig::ParamDescription<double>("h_signature_prescaler", "double", 0, "Scale number of obstacle value in order to allow huge number of obstacles. Do not choose it extremly low, otherwise obstacles cannot be distinguished from each other (0.2<H<=1)", "", &HATebLocalPlannerReconfigureConfig::h_signature_prescaler)));
//#line 555 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      __min__.h_signature_threshold = 0.0;
//#line 555 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      __max__.h_signature_threshold = 1.0;
//#line 555 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      __default__.h_signature_threshold = 0.1;
//#line 555 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      HCPlanning.abstract_parameters.push_back(HATebLocalPlannerReconfigureConfig::AbstractParamDescriptionConstPtr(new HATebLocalPlannerReconfigureConfig::ParamDescription<double>("h_signature_threshold", "double", 0, "Two h-signuteres are assumed to be equal, if both the difference of real parts and complex parts are below the specified threshold", "", &HATebLocalPlannerReconfigureConfig::h_signature_threshold)));
//#line 555 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      __param_descriptions__.push_back(HATebLocalPlannerReconfigureConfig::AbstractParamDescriptionConstPtr(new HATebLocalPlannerReconfigureConfig::ParamDescription<double>("h_signature_threshold", "double", 0, "Two h-signuteres are assumed to be equal, if both the difference of real parts and complex parts are below the specified threshold", "", &HATebLocalPlannerReconfigureConfig::h_signature_threshold)));
//#line 559 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      __min__.obstacle_heading_threshold = 0.0;
//#line 559 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      __max__.obstacle_heading_threshold = 1.0;
//#line 559 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      __default__.obstacle_heading_threshold = 0.45;
//#line 559 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      HCPlanning.abstract_parameters.push_back(HATebLocalPlannerReconfigureConfig::AbstractParamDescriptionConstPtr(new HATebLocalPlannerReconfigureConfig::ParamDescription<double>("obstacle_heading_threshold", "double", 0, "Specify the value of the normalized scalar product between obstacle heading and goal heading in order to take them (obstacles) into account for exploration)", "", &HATebLocalPlannerReconfigureConfig::obstacle_heading_threshold)));
//#line 559 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      __param_descriptions__.push_back(HATebLocalPlannerReconfigureConfig::AbstractParamDescriptionConstPtr(new HATebLocalPlannerReconfigureConfig::ParamDescription<double>("obstacle_heading_threshold", "double", 0, "Specify the value of the normalized scalar product between obstacle heading and goal heading in order to take them (obstacles) into account for exploration)", "", &HATebLocalPlannerReconfigureConfig::obstacle_heading_threshold)));
//#line 563 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      __min__.viapoints_all_candidates = 0;
//#line 563 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      __max__.viapoints_all_candidates = 1;
//#line 563 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      __default__.viapoints_all_candidates = 1;
//#line 563 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      HCPlanning.abstract_parameters.push_back(HATebLocalPlannerReconfigureConfig::AbstractParamDescriptionConstPtr(new HATebLocalPlannerReconfigureConfig::ParamDescription<bool>("viapoints_all_candidates", "bool", 0, "If true, all trajectories of different topologies are attached to the set of via-points, otherwise only the trajectory sharing the same one as the initial/global plan is attached (no effect in test_optim_node).", "", &HATebLocalPlannerReconfigureConfig::viapoints_all_candidates)));
//#line 563 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      __param_descriptions__.push_back(HATebLocalPlannerReconfigureConfig::AbstractParamDescriptionConstPtr(new HATebLocalPlannerReconfigureConfig::ParamDescription<bool>("viapoints_all_candidates", "bool", 0, "If true, all trajectories of different topologies are attached to the set of via-points, otherwise only the trajectory sharing the same one as the initial/global plan is attached (no effect in test_optim_node).", "", &HATebLocalPlannerReconfigureConfig::viapoints_all_candidates)));
//#line 567 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      __min__.visualize_hc_graph = 0;
//#line 567 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      __max__.visualize_hc_graph = 1;
//#line 567 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      __default__.visualize_hc_graph = 0;
//#line 567 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      HCPlanning.abstract_parameters.push_back(HATebLocalPlannerReconfigureConfig::AbstractParamDescriptionConstPtr(new HATebLocalPlannerReconfigureConfig::ParamDescription<bool>("visualize_hc_graph", "bool", 0, "Visualize the graph that is created for exploring new homotopy classes", "", &HATebLocalPlannerReconfigureConfig::visualize_hc_graph)));
//#line 567 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      __param_descriptions__.push_back(HATebLocalPlannerReconfigureConfig::AbstractParamDescriptionConstPtr(new HATebLocalPlannerReconfigureConfig::ParamDescription<bool>("visualize_hc_graph", "bool", 0, "Visualize the graph that is created for exploring new homotopy classes", "", &HATebLocalPlannerReconfigureConfig::visualize_hc_graph)));
//#line 124 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      HCPlanning.convertParams();
//#line 124 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.groups.push_back(HATebLocalPlannerReconfigureConfig::AbstractGroupDescriptionConstPtr(new HATebLocalPlannerReconfigureConfig::GroupDescription<HATebLocalPlannerReconfigureConfig::DEFAULT::HCPLANNING, HATebLocalPlannerReconfigureConfig::DEFAULT>(HCPlanning)));
//#line 124 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __group_descriptions__.push_back(HATebLocalPlannerReconfigureConfig::AbstractGroupDescriptionConstPtr(new HATebLocalPlannerReconfigureConfig::GroupDescription<HATebLocalPlannerReconfigureConfig::DEFAULT::HCPLANNING, HATebLocalPlannerReconfigureConfig::DEFAULT>(HCPlanning)));
HATebLocalPlannerReconfigureConfig::GroupDescription<HATebLocalPlannerReconfigureConfig::DEFAULT::RECOVERY, HATebLocalPlannerReconfigureConfig::DEFAULT> Recovery("Recovery", "tab", 0, 13, true, &HATebLocalPlannerReconfigureConfig::DEFAULT::recovery);
//#line 575 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      __min__.shrink_horizon_backup = 0;
//#line 575 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      __max__.shrink_horizon_backup = 1;
//#line 575 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      __default__.shrink_horizon_backup = 1;
//#line 575 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      Recovery.abstract_parameters.push_back(HATebLocalPlannerReconfigureConfig::AbstractParamDescriptionConstPtr(new HATebLocalPlannerReconfigureConfig::ParamDescription<bool>("shrink_horizon_backup", "bool", 0, "Allows the planner to shrink the horizon temporary (50%) in case of automatically detected issues.", "", &HATebLocalPlannerReconfigureConfig::shrink_horizon_backup)));
//#line 575 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      __param_descriptions__.push_back(HATebLocalPlannerReconfigureConfig::AbstractParamDescriptionConstPtr(new HATebLocalPlannerReconfigureConfig::ParamDescription<bool>("shrink_horizon_backup", "bool", 0, "Allows the planner to shrink the horizon temporary (50%) in case of automatically detected issues.", "", &HATebLocalPlannerReconfigureConfig::shrink_horizon_backup)));
//#line 579 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      __min__.oscillation_recovery = 0;
//#line 579 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      __max__.oscillation_recovery = 1;
//#line 579 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      __default__.oscillation_recovery = 1;
//#line 579 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      Recovery.abstract_parameters.push_back(HATebLocalPlannerReconfigureConfig::AbstractParamDescriptionConstPtr(new HATebLocalPlannerReconfigureConfig::ParamDescription<bool>("oscillation_recovery", "bool", 0, "Try to detect and resolve oscillations between multiple solutions in the same equivalence class (robot frequently switches between left/right/forward/backwards).", "", &HATebLocalPlannerReconfigureConfig::oscillation_recovery)));
//#line 579 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      __param_descriptions__.push_back(HATebLocalPlannerReconfigureConfig::AbstractParamDescriptionConstPtr(new HATebLocalPlannerReconfigureConfig::ParamDescription<bool>("oscillation_recovery", "bool", 0, "Try to detect and resolve oscillations between multiple solutions in the same equivalence class (robot frequently switches between left/right/forward/backwards).", "", &HATebLocalPlannerReconfigureConfig::oscillation_recovery)));
//#line 124 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Recovery.convertParams();
//#line 124 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.groups.push_back(HATebLocalPlannerReconfigureConfig::AbstractGroupDescriptionConstPtr(new HATebLocalPlannerReconfigureConfig::GroupDescription<HATebLocalPlannerReconfigureConfig::DEFAULT::RECOVERY, HATebLocalPlannerReconfigureConfig::DEFAULT>(Recovery)));
//#line 124 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __group_descriptions__.push_back(HATebLocalPlannerReconfigureConfig::AbstractGroupDescriptionConstPtr(new HATebLocalPlannerReconfigureConfig::GroupDescription<HATebLocalPlannerReconfigureConfig::DEFAULT::RECOVERY, HATebLocalPlannerReconfigureConfig::DEFAULT>(Recovery)));
HATebLocalPlannerReconfigureConfig::GroupDescription<HATebLocalPlannerReconfigureConfig::DEFAULT::VISUALIZATION, HATebLocalPlannerReconfigureConfig::DEFAULT> Visualization("Visualization", "tab", 0, 14, true, &HATebLocalPlannerReconfigureConfig::DEFAULT::visualization);
//#line 587 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      __min__.publish_robot_global_plan = 0;
//#line 587 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      __max__.publish_robot_global_plan = 1;
//#line 587 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      __default__.publish_robot_global_plan = 1;
//#line 587 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      Visualization.abstract_parameters.push_back(HATebLocalPlannerReconfigureConfig::AbstractParamDescriptionConstPtr(new HATebLocalPlannerReconfigureConfig::ParamDescription<bool>("publish_robot_global_plan", "bool", 0, "Whether to publish the global robot plan.", "", &HATebLocalPlannerReconfigureConfig::publish_robot_global_plan)));
//#line 587 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      __param_descriptions__.push_back(HATebLocalPlannerReconfigureConfig::AbstractParamDescriptionConstPtr(new HATebLocalPlannerReconfigureConfig::ParamDescription<bool>("publish_robot_global_plan", "bool", 0, "Whether to publish the global robot plan.", "", &HATebLocalPlannerReconfigureConfig::publish_robot_global_plan)));
//#line 588 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      __min__.publish_robot_local_plan = 0;
//#line 588 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      __max__.publish_robot_local_plan = 1;
//#line 588 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      __default__.publish_robot_local_plan = 1;
//#line 588 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      Visualization.abstract_parameters.push_back(HATebLocalPlannerReconfigureConfig::AbstractParamDescriptionConstPtr(new HATebLocalPlannerReconfigureConfig::ParamDescription<bool>("publish_robot_local_plan", "bool", 0, "Whether to publish the local robot plan.", "", &HATebLocalPlannerReconfigureConfig::publish_robot_local_plan)));
//#line 588 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      __param_descriptions__.push_back(HATebLocalPlannerReconfigureConfig::AbstractParamDescriptionConstPtr(new HATebLocalPlannerReconfigureConfig::ParamDescription<bool>("publish_robot_local_plan", "bool", 0, "Whether to publish the local robot plan.", "", &HATebLocalPlannerReconfigureConfig::publish_robot_local_plan)));
//#line 589 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      __min__.publish_robot_local_plan_poses = 0;
//#line 589 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      __max__.publish_robot_local_plan_poses = 1;
//#line 589 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      __default__.publish_robot_local_plan_poses = 0;
//#line 589 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      Visualization.abstract_parameters.push_back(HATebLocalPlannerReconfigureConfig::AbstractParamDescriptionConstPtr(new HATebLocalPlannerReconfigureConfig::ParamDescription<bool>("publish_robot_local_plan_poses", "bool", 0, "Whether to publish the robot local plan poses.", "", &HATebLocalPlannerReconfigureConfig::publish_robot_local_plan_poses)));
//#line 589 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      __param_descriptions__.push_back(HATebLocalPlannerReconfigureConfig::AbstractParamDescriptionConstPtr(new HATebLocalPlannerReconfigureConfig::ParamDescription<bool>("publish_robot_local_plan_poses", "bool", 0, "Whether to publish the robot local plan poses.", "", &HATebLocalPlannerReconfigureConfig::publish_robot_local_plan_poses)));
//#line 590 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      __min__.publish_robot_local_plan_fp_poses = 0;
//#line 590 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      __max__.publish_robot_local_plan_fp_poses = 1;
//#line 590 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      __default__.publish_robot_local_plan_fp_poses = 0;
//#line 590 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      Visualization.abstract_parameters.push_back(HATebLocalPlannerReconfigureConfig::AbstractParamDescriptionConstPtr(new HATebLocalPlannerReconfigureConfig::ParamDescription<bool>("publish_robot_local_plan_fp_poses", "bool", 0, "Whether to publish robot footprint at the local plan poses.", "", &HATebLocalPlannerReconfigureConfig::publish_robot_local_plan_fp_poses)));
//#line 590 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      __param_descriptions__.push_back(HATebLocalPlannerReconfigureConfig::AbstractParamDescriptionConstPtr(new HATebLocalPlannerReconfigureConfig::ParamDescription<bool>("publish_robot_local_plan_fp_poses", "bool", 0, "Whether to publish robot footprint at the local plan poses.", "", &HATebLocalPlannerReconfigureConfig::publish_robot_local_plan_fp_poses)));
//#line 591 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      __min__.publish_agents_global_plans = 0;
//#line 591 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      __max__.publish_agents_global_plans = 1;
//#line 591 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      __default__.publish_agents_global_plans = 0;
//#line 591 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      Visualization.abstract_parameters.push_back(HATebLocalPlannerReconfigureConfig::AbstractParamDescriptionConstPtr(new HATebLocalPlannerReconfigureConfig::ParamDescription<bool>("publish_agents_global_plans", "bool", 0, "Whether to publish global agents plans.", "", &HATebLocalPlannerReconfigureConfig::publish_agents_global_plans)));
//#line 591 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      __param_descriptions__.push_back(HATebLocalPlannerReconfigureConfig::AbstractParamDescriptionConstPtr(new HATebLocalPlannerReconfigureConfig::ParamDescription<bool>("publish_agents_global_plans", "bool", 0, "Whether to publish global agents plans.", "", &HATebLocalPlannerReconfigureConfig::publish_agents_global_plans)));
//#line 592 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      __min__.publish_agents_local_plans = 0;
//#line 592 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      __max__.publish_agents_local_plans = 1;
//#line 592 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      __default__.publish_agents_local_plans = 1;
//#line 592 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      Visualization.abstract_parameters.push_back(HATebLocalPlannerReconfigureConfig::AbstractParamDescriptionConstPtr(new HATebLocalPlannerReconfigureConfig::ParamDescription<bool>("publish_agents_local_plans", "bool", 0, "Whether to publish the full agents optimized trajectories.", "", &HATebLocalPlannerReconfigureConfig::publish_agents_local_plans)));
//#line 592 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      __param_descriptions__.push_back(HATebLocalPlannerReconfigureConfig::AbstractParamDescriptionConstPtr(new HATebLocalPlannerReconfigureConfig::ParamDescription<bool>("publish_agents_local_plans", "bool", 0, "Whether to publish the full agents optimized trajectories.", "", &HATebLocalPlannerReconfigureConfig::publish_agents_local_plans)));
//#line 593 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      __min__.publish_agents_local_plan_poses = 0;
//#line 593 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      __max__.publish_agents_local_plan_poses = 1;
//#line 593 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      __default__.publish_agents_local_plan_poses = 0;
//#line 593 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      Visualization.abstract_parameters.push_back(HATebLocalPlannerReconfigureConfig::AbstractParamDescriptionConstPtr(new HATebLocalPlannerReconfigureConfig::ParamDescription<bool>("publish_agents_local_plan_poses", "bool", 0, "Whether to publish the posed for optimized agents trajectories.", "", &HATebLocalPlannerReconfigureConfig::publish_agents_local_plan_poses)));
//#line 593 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      __param_descriptions__.push_back(HATebLocalPlannerReconfigureConfig::AbstractParamDescriptionConstPtr(new HATebLocalPlannerReconfigureConfig::ParamDescription<bool>("publish_agents_local_plan_poses", "bool", 0, "Whether to publish the posed for optimized agents trajectories.", "", &HATebLocalPlannerReconfigureConfig::publish_agents_local_plan_poses)));
//#line 594 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      __min__.publish_agents_local_plan_fp_poses = 0;
//#line 594 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      __max__.publish_agents_local_plan_fp_poses = 1;
//#line 594 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      __default__.publish_agents_local_plan_fp_poses = 0;
//#line 594 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      Visualization.abstract_parameters.push_back(HATebLocalPlannerReconfigureConfig::AbstractParamDescriptionConstPtr(new HATebLocalPlannerReconfigureConfig::ParamDescription<bool>("publish_agents_local_plan_fp_poses", "bool", 0, "Whether to publish robot footprint at the posed for optimized agents trajectories.", "", &HATebLocalPlannerReconfigureConfig::publish_agents_local_plan_fp_poses)));
//#line 594 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      __param_descriptions__.push_back(HATebLocalPlannerReconfigureConfig::AbstractParamDescriptionConstPtr(new HATebLocalPlannerReconfigureConfig::ParamDescription<bool>("publish_agents_local_plan_fp_poses", "bool", 0, "Whether to publish robot footprint at the posed for optimized agents trajectories.", "", &HATebLocalPlannerReconfigureConfig::publish_agents_local_plan_fp_poses)));
//#line 595 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      __min__.pose_array_z_scale = 0.0;
//#line 595 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      __max__.pose_array_z_scale = 100.0;
//#line 595 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      __default__.pose_array_z_scale = 1.0;
//#line 595 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      Visualization.abstract_parameters.push_back(HATebLocalPlannerReconfigureConfig::AbstractParamDescriptionConstPtr(new HATebLocalPlannerReconfigureConfig::ParamDescription<double>("pose_array_z_scale", "double", 0, "Multiplier to show time on z value of pose array for agents and robot", "", &HATebLocalPlannerReconfigureConfig::pose_array_z_scale)));
//#line 595 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      __param_descriptions__.push_back(HATebLocalPlannerReconfigureConfig::AbstractParamDescriptionConstPtr(new HATebLocalPlannerReconfigureConfig::ParamDescription<double>("pose_array_z_scale", "double", 0, "Multiplier to show time on z value of pose array for agents and robot", "", &HATebLocalPlannerReconfigureConfig::pose_array_z_scale)));
//#line 124 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Visualization.convertParams();
//#line 124 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.groups.push_back(HATebLocalPlannerReconfigureConfig::AbstractGroupDescriptionConstPtr(new HATebLocalPlannerReconfigureConfig::GroupDescription<HATebLocalPlannerReconfigureConfig::DEFAULT::VISUALIZATION, HATebLocalPlannerReconfigureConfig::DEFAULT>(Visualization)));
//#line 124 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __group_descriptions__.push_back(HATebLocalPlannerReconfigureConfig::AbstractGroupDescriptionConstPtr(new HATebLocalPlannerReconfigureConfig::GroupDescription<HATebLocalPlannerReconfigureConfig::DEFAULT::VISUALIZATION, HATebLocalPlannerReconfigureConfig::DEFAULT>(Visualization)));
//#line 246 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.convertParams();
//#line 246 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __group_descriptions__.push_back(HATebLocalPlannerReconfigureConfig::AbstractGroupDescriptionConstPtr(new HATebLocalPlannerReconfigureConfig::GroupDescription<HATebLocalPlannerReconfigureConfig::DEFAULT, HATebLocalPlannerReconfigureConfig>(Default)));
//#line 369 "/opt/ros/noetic/share/dynamic_reconfigure/cmake/../templates/ConfigType.h.template"

      for (std::vector<HATebLocalPlannerReconfigureConfig::AbstractGroupDescriptionConstPtr>::const_iterator i = __group_descriptions__.begin(); i != __group_descriptions__.end(); ++i)
      {
        __description_message__.groups.push_back(**i);
      }
      __max__.__toMessage__(__description_message__.max, __param_descriptions__, __group_descriptions__);
      __min__.__toMessage__(__description_message__.min, __param_descriptions__, __group_descriptions__);
      __default__.__toMessage__(__description_message__.dflt, __param_descriptions__, __group_descriptions__);
    }
    std::vector<HATebLocalPlannerReconfigureConfig::AbstractParamDescriptionConstPtr> __param_descriptions__;
    std::vector<HATebLocalPlannerReconfigureConfig::AbstractGroupDescriptionConstPtr> __group_descriptions__;
    HATebLocalPlannerReconfigureConfig __max__;
    HATebLocalPlannerReconfigureConfig __min__;
    HATebLocalPlannerReconfigureConfig __default__;
    dynamic_reconfigure::ConfigDescription __description_message__;

    static const HATebLocalPlannerReconfigureConfigStatics *get_instance()
    {
      // Split this off in a separate function because I know that
      // instance will get initialized the first time get_instance is
      // called, and I am guaranteeing that get_instance gets called at
      // most once.
      static HATebLocalPlannerReconfigureConfigStatics instance;
      return &instance;
    }
  };

  inline const dynamic_reconfigure::ConfigDescription &HATebLocalPlannerReconfigureConfig::__getDescriptionMessage__()
  {
    return __get_statics__()->__description_message__;
  }

  inline const HATebLocalPlannerReconfigureConfig &HATebLocalPlannerReconfigureConfig::__getDefault__()
  {
    return __get_statics__()->__default__;
  }

  inline const HATebLocalPlannerReconfigureConfig &HATebLocalPlannerReconfigureConfig::__getMax__()
  {
    return __get_statics__()->__max__;
  }

  inline const HATebLocalPlannerReconfigureConfig &HATebLocalPlannerReconfigureConfig::__getMin__()
  {
    return __get_statics__()->__min__;
  }

  inline const std::vector<HATebLocalPlannerReconfigureConfig::AbstractParamDescriptionConstPtr> &HATebLocalPlannerReconfigureConfig::__getParamDescriptions__()
  {
    return __get_statics__()->__param_descriptions__;
  }

  inline const std::vector<HATebLocalPlannerReconfigureConfig::AbstractGroupDescriptionConstPtr> &HATebLocalPlannerReconfigureConfig::__getGroupDescriptions__()
  {
    return __get_statics__()->__group_descriptions__;
  }

  inline const HATebLocalPlannerReconfigureConfigStatics *HATebLocalPlannerReconfigureConfig::__get_statics__()
  {
    const static HATebLocalPlannerReconfigureConfigStatics *statics;

    if (statics) // Common case
      return statics;

    boost::mutex::scoped_lock lock(dynamic_reconfigure::__init_mutex__);

    if (statics) // In case we lost a race.
      return statics;

    statics = HATebLocalPlannerReconfigureConfigStatics::get_instance();

    return statics;
  }

//#line 419 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      const int HATebLocalPlannerReconfigure_DisregardHumans = 0;
//#line 420 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      const int HATebLocalPlannerReconfigure_HumanAware = 1;
//#line 421 "/home/az/arena_ws/src/planners/cohan/hateb_local_planner/cfg/HATebLocalPlannerReconfigure.cfg"
      const int HATebLocalPlannerReconfigure_Approach = 2;
}

#undef DYNAMIC_RECONFIGURE_FINAL

#endif // __HATEBLOCALPLANNERRECONFIGURERECONFIGURATOR_H__
