// Generated by gencpp from file hateb_local_planner/ObstacleMsg.msg
// DO NOT EDIT!


#ifndef HATEB_LOCAL_PLANNER_MESSAGE_OBSTACLEMSG_H
#define HATEB_LOCAL_PLANNER_MESSAGE_OBSTACLEMSG_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>
#include <geometry_msgs/PolygonStamped.h>
#include <geometry_msgs/QuaternionStamped.h>
#include <geometry_msgs/TwistWithCovariance.h>

namespace hateb_local_planner
{
template <class ContainerAllocator>
struct ObstacleMsg_
{
  typedef ObstacleMsg_<ContainerAllocator> Type;

  ObstacleMsg_()
    : header()
    , obstacles()
    , ids()
    , orientations()
    , velocities()  {
    }
  ObstacleMsg_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , obstacles(_alloc)
    , ids(_alloc)
    , orientations(_alloc)
    , velocities(_alloc)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef std::vector< ::geometry_msgs::PolygonStamped_<ContainerAllocator> , typename std::allocator_traits<ContainerAllocator>::template rebind_alloc< ::geometry_msgs::PolygonStamped_<ContainerAllocator> >> _obstacles_type;
  _obstacles_type obstacles;

   typedef std::vector<uint32_t, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<uint32_t>> _ids_type;
  _ids_type ids;

   typedef std::vector< ::geometry_msgs::QuaternionStamped_<ContainerAllocator> , typename std::allocator_traits<ContainerAllocator>::template rebind_alloc< ::geometry_msgs::QuaternionStamped_<ContainerAllocator> >> _orientations_type;
  _orientations_type orientations;

   typedef std::vector< ::geometry_msgs::TwistWithCovariance_<ContainerAllocator> , typename std::allocator_traits<ContainerAllocator>::template rebind_alloc< ::geometry_msgs::TwistWithCovariance_<ContainerAllocator> >> _velocities_type;
  _velocities_type velocities;





  typedef boost::shared_ptr< ::hateb_local_planner::ObstacleMsg_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::hateb_local_planner::ObstacleMsg_<ContainerAllocator> const> ConstPtr;

}; // struct ObstacleMsg_

typedef ::hateb_local_planner::ObstacleMsg_<std::allocator<void> > ObstacleMsg;

typedef boost::shared_ptr< ::hateb_local_planner::ObstacleMsg > ObstacleMsgPtr;
typedef boost::shared_ptr< ::hateb_local_planner::ObstacleMsg const> ObstacleMsgConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::hateb_local_planner::ObstacleMsg_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::hateb_local_planner::ObstacleMsg_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::hateb_local_planner::ObstacleMsg_<ContainerAllocator1> & lhs, const ::hateb_local_planner::ObstacleMsg_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.obstacles == rhs.obstacles &&
    lhs.ids == rhs.ids &&
    lhs.orientations == rhs.orientations &&
    lhs.velocities == rhs.velocities;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::hateb_local_planner::ObstacleMsg_<ContainerAllocator1> & lhs, const ::hateb_local_planner::ObstacleMsg_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace hateb_local_planner

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::hateb_local_planner::ObstacleMsg_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::hateb_local_planner::ObstacleMsg_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::hateb_local_planner::ObstacleMsg_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::hateb_local_planner::ObstacleMsg_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::hateb_local_planner::ObstacleMsg_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::hateb_local_planner::ObstacleMsg_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::hateb_local_planner::ObstacleMsg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "a537b0b7fce70da7b78c2df042f56aa2";
  }

  static const char* value(const ::hateb_local_planner::ObstacleMsg_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xa537b0b7fce70da7ULL;
  static const uint64_t static_value2 = 0xb78c2df042f56aa2ULL;
};

template<class ContainerAllocator>
struct DataType< ::hateb_local_planner::ObstacleMsg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "hateb_local_planner/ObstacleMsg";
  }

  static const char* value(const ::hateb_local_planner::ObstacleMsg_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::hateb_local_planner::ObstacleMsg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# Message that contains a list of polygon shaped obstacles.\n"
"# Special types:\n"
"# Polygon with 1 vertex: Point obstacle\n"
"# Polygon with 2 vertices: Line obstacle\n"
"# Polygon with more than 2 vertices: First and last points are assumed to be connected\n"
"#\n"
"# If optional properties (orientaions or velocities) are provided,\n"
"# each container size must match the number of obstacles\n"
"# otherwise let them empty.\n"
"\n"
"\n"
"std_msgs/Header header\n"
"\n"
"# Actual obstacle positions (polygon descriptions)\n"
"geometry_msgs/PolygonStamped[] obstacles\n"
"\n"
"# Obstacle IDs [optional]\n"
"# Specify IDs in order to provide (temporal) relationships\n"
"# between obstacles among multiple messages.\n"
"# If provided it must be size(ids) = size(obstacles)\n"
"uint32[] ids\n"
"\n"
"# Individual orientations (centroid) [optional]\n"
"# If provided it must be size(orientations) = size(obstacles) \n"
"geometry_msgs/QuaternionStamped[] orientations\n"
"\n"
"# Individual velocities (centroid) [optional]\n"
"# If provided it must be size(velocities) = size(obstacles)\n"
"geometry_msgs/TwistWithCovariance[] velocities\n"
"\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/PolygonStamped\n"
"# This represents a Polygon with reference coordinate frame and timestamp\n"
"Header header\n"
"Polygon polygon\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Polygon\n"
"#A specification of a polygon where the first and last points are assumed to be connected\n"
"Point32[] points\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Point32\n"
"# This contains the position of a point in free space(with 32 bits of precision).\n"
"# It is recommeded to use Point wherever possible instead of Point32.  \n"
"# \n"
"# This recommendation is to promote interoperability.  \n"
"#\n"
"# This message is designed to take up less space when sending\n"
"# lots of points at once, as in the case of a PointCloud.  \n"
"\n"
"float32 x\n"
"float32 y\n"
"float32 z\n"
"================================================================================\n"
"MSG: geometry_msgs/QuaternionStamped\n"
"# This represents an orientation with reference coordinate frame and timestamp.\n"
"\n"
"Header header\n"
"Quaternion quaternion\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Quaternion\n"
"# This represents an orientation in free space in quaternion form.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"float64 w\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/TwistWithCovariance\n"
"# This expresses velocity in free space with uncertainty.\n"
"\n"
"Twist twist\n"
"\n"
"# Row-major representation of the 6x6 covariance matrix\n"
"# The orientation parameters use a fixed-axis representation.\n"
"# In order, the parameters are:\n"
"# (x, y, z, rotation about X axis, rotation about Y axis, rotation about Z axis)\n"
"float64[36] covariance\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Twist\n"
"# This expresses velocity in free space broken into its linear and angular parts.\n"
"Vector3  linear\n"
"Vector3  angular\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Vector3\n"
"# This represents a vector in free space. \n"
"# It is only meant to represent a direction. Therefore, it does not\n"
"# make sense to apply a translation to it (e.g., when applying a \n"
"# generic rigid transformation to a Vector3, tf2 will only apply the\n"
"# rotation). If you want your data to be translatable too, use the\n"
"# geometry_msgs/Point message instead.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
;
  }

  static const char* value(const ::hateb_local_planner::ObstacleMsg_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::hateb_local_planner::ObstacleMsg_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.obstacles);
      stream.next(m.ids);
      stream.next(m.orientations);
      stream.next(m.velocities);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ObstacleMsg_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::hateb_local_planner::ObstacleMsg_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::hateb_local_planner::ObstacleMsg_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "obstacles[]" << std::endl;
    for (size_t i = 0; i < v.obstacles.size(); ++i)
    {
      s << indent << "  obstacles[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::geometry_msgs::PolygonStamped_<ContainerAllocator> >::stream(s, indent + "    ", v.obstacles[i]);
    }
    s << indent << "ids[]" << std::endl;
    for (size_t i = 0; i < v.ids.size(); ++i)
    {
      s << indent << "  ids[" << i << "]: ";
      Printer<uint32_t>::stream(s, indent + "  ", v.ids[i]);
    }
    s << indent << "orientations[]" << std::endl;
    for (size_t i = 0; i < v.orientations.size(); ++i)
    {
      s << indent << "  orientations[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::geometry_msgs::QuaternionStamped_<ContainerAllocator> >::stream(s, indent + "    ", v.orientations[i]);
    }
    s << indent << "velocities[]" << std::endl;
    for (size_t i = 0; i < v.velocities.size(); ++i)
    {
      s << indent << "  velocities[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::geometry_msgs::TwistWithCovariance_<ContainerAllocator> >::stream(s, indent + "    ", v.velocities[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // HATEB_LOCAL_PLANNER_MESSAGE_OBSTACLEMSG_H
