# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from hateb_local_planner/OptimizationCostArray.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import hateb_local_planner.msg
import std_msgs.msg

class OptimizationCostArray(genpy.Message):
  _md5sum = "6278d232d18141b2ca3d171f8cdec014"
  _type = "hateb_local_planner/OptimizationCostArray"
  _has_header = True  # flag to mark the presence of a Header object
  _full_text = """std_msgs/Header header
hateb_local_planner/OptimizationCost[] costs

================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
string frame_id

================================================================================
MSG: hateb_local_planner/OptimizationCost
# cost types
int8 TIME_OPTIMALITY=0
int8 KINEMATIC_DD=1
int8 KINEMATIC_CL=2
int8 ROBOT_VEL=3
int8 AGENT_VEL=4
int8 ROBOT_ACC=5
int8 AGENT_ACC=6
int8 OBSTACLE=7
int8 DYNAMIC_OBSTACLE=8
int8 VIA_POINT=9
int8 AGENT_ROBOT_SAFETY=10
int8 AGENT_AGENT_SAFETY=11
int8 AGENT_ROBOT_TTC=12
int8 AGENT_ROBOT_REL_VEL=13
int8 AGENT_ROBOT_MIN_DIST=14
int8 AGENT_ROBOT_VISIBILITY=15
int8 AGENT_ROBOT_TTClosest=16
int8 AGENT_ROBOT_TTCplus=17

int8    type
float64 cost
float64[] costs_arr
"""
  __slots__ = ['header','costs']
  _slot_types = ['std_msgs/Header','hateb_local_planner/OptimizationCost[]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header,costs

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(OptimizationCostArray, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.costs is None:
        self.costs = []
    else:
      self.header = std_msgs.msg.Header()
      self.costs = []

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      length = len(self.costs)
      buff.write(_struct_I.pack(length))
      for val1 in self.costs:
        _x = val1
        buff.write(_get_struct_bd().pack(_x.type, _x.cost))
        length = len(val1.costs_arr)
        buff.write(_struct_I.pack(length))
        pattern = '<%sd'%length
        buff.write(struct.Struct(pattern).pack(*val1.costs_arr))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.costs is None:
        self.costs = None
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.costs = []
      for i in range(0, length):
        val1 = hateb_local_planner.msg.OptimizationCost()
        _x = val1
        start = end
        end += 9
        (_x.type, _x.cost,) = _get_struct_bd().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sd'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        val1.costs_arr = s.unpack(str[start:end])
        self.costs.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      length = len(self.costs)
      buff.write(_struct_I.pack(length))
      for val1 in self.costs:
        _x = val1
        buff.write(_get_struct_bd().pack(_x.type, _x.cost))
        length = len(val1.costs_arr)
        buff.write(_struct_I.pack(length))
        pattern = '<%sd'%length
        buff.write(val1.costs_arr.tostring())
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.costs is None:
        self.costs = None
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.costs = []
      for i in range(0, length):
        val1 = hateb_local_planner.msg.OptimizationCost()
        _x = val1
        start = end
        end += 9
        (_x.type, _x.cost,) = _get_struct_bd().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sd'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        val1.costs_arr = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
        self.costs.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_3I = None
def _get_struct_3I():
    global _struct_3I
    if _struct_3I is None:
        _struct_3I = struct.Struct("<3I")
    return _struct_3I
_struct_bd = None
def _get_struct_bd():
    global _struct_bd
    if _struct_bd is None:
        _struct_bd = struct.Struct("<bd")
    return _struct_bd
