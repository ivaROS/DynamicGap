# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from pedsim_srvs/SpawnPedsRequest.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import geometry_msgs.msg
import pedsim_msgs.msg

class SpawnPedsRequest(genpy.Message):
  _md5sum = "f940e09ef2770c069f1561ed88349b1d"
  _type = "pedsim_srvs/SpawnPedsRequest"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """# Added by Ronja Gueldenring
# For spawning an agent array dynamically in pedsim and forwarding them to flatland
pedsim_msgs/Ped[] peds

================================================================================
MSG: pedsim_msgs/Ped
# Added by Ronja Gueldenring
# For spawning agents dynamically in pedsim and forwarding them to flatland
string id
geometry_msgs/Point pos
string type  # "adult", "child", "elder", "vehicle", "servicerobot"
string yaml_file
int16 number_of_peds
float64 vmax

string start_up_mode  # "default", "wait_timer", "trigger_zone"
float64 wait_time
float64 trigger_zone_radius

float64 max_talking_distance
float64 max_servicing_radius

float64 chatting_probability
float64 tell_story_probability
float64 group_talking_probability
float64 talking_and_walking_probability
float64 requesting_service_probability
float64 requesting_guide_probability
float64 requesting_follower_probability

float64 talking_base_time
float64 tell_story_base_time
float64 group_talking_base_time
float64 talking_and_walking_base_time
float64 receiving_service_base_time
float64 requesting_service_base_time

# forces
float64 force_factor_desired
float64 force_factor_obstacle
float64 force_factor_social
float64 force_factor_robot

geometry_msgs/Point[] waypoints
int16 waypoint_mode

string configuration
================================================================================
MSG: geometry_msgs/Point
# This contains the position of a point in free space
float64 x
float64 y
float64 z
"""
  __slots__ = ['peds']
  _slot_types = ['pedsim_msgs/Ped[]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       peds

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(SpawnPedsRequest, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.peds is None:
        self.peds = []
    else:
      self.peds = []

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      length = len(self.peds)
      buff.write(_struct_I.pack(length))
      for val1 in self.peds:
        _x = val1.id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _v1 = val1.pos
        _x = _v1
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _x = val1.type
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = val1.yaml_file
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = val1
        buff.write(_get_struct_hd().pack(_x.number_of_peds, _x.vmax))
        _x = val1.start_up_mode
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = val1
        buff.write(_get_struct_21d().pack(_x.wait_time, _x.trigger_zone_radius, _x.max_talking_distance, _x.max_servicing_radius, _x.chatting_probability, _x.tell_story_probability, _x.group_talking_probability, _x.talking_and_walking_probability, _x.requesting_service_probability, _x.requesting_guide_probability, _x.requesting_follower_probability, _x.talking_base_time, _x.tell_story_base_time, _x.group_talking_base_time, _x.talking_and_walking_base_time, _x.receiving_service_base_time, _x.requesting_service_base_time, _x.force_factor_desired, _x.force_factor_obstacle, _x.force_factor_social, _x.force_factor_robot))
        length = len(val1.waypoints)
        buff.write(_struct_I.pack(length))
        for val2 in val1.waypoints:
          _x = val2
          buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _x = val1.waypoint_mode
        buff.write(_get_struct_h().pack(_x))
        _x = val1.configuration
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.peds is None:
        self.peds = None
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.peds = []
      for i in range(0, length):
        val1 = pedsim_msgs.msg.Ped()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.id = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.id = str[start:end]
        _v2 = val1.pos
        _x = _v2
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.type = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.type = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.yaml_file = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.yaml_file = str[start:end]
        _x = val1
        start = end
        end += 10
        (_x.number_of_peds, _x.vmax,) = _get_struct_hd().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.start_up_mode = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.start_up_mode = str[start:end]
        _x = val1
        start = end
        end += 168
        (_x.wait_time, _x.trigger_zone_radius, _x.max_talking_distance, _x.max_servicing_radius, _x.chatting_probability, _x.tell_story_probability, _x.group_talking_probability, _x.talking_and_walking_probability, _x.requesting_service_probability, _x.requesting_guide_probability, _x.requesting_follower_probability, _x.talking_base_time, _x.tell_story_base_time, _x.group_talking_base_time, _x.talking_and_walking_base_time, _x.receiving_service_base_time, _x.requesting_service_base_time, _x.force_factor_desired, _x.force_factor_obstacle, _x.force_factor_social, _x.force_factor_robot,) = _get_struct_21d().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.waypoints = []
        for i in range(0, length):
          val2 = geometry_msgs.msg.Point()
          _x = val2
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
          val1.waypoints.append(val2)
        start = end
        end += 2
        (val1.waypoint_mode,) = _get_struct_h().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.configuration = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.configuration = str[start:end]
        self.peds.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      length = len(self.peds)
      buff.write(_struct_I.pack(length))
      for val1 in self.peds:
        _x = val1.id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _v3 = val1.pos
        _x = _v3
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _x = val1.type
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = val1.yaml_file
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = val1
        buff.write(_get_struct_hd().pack(_x.number_of_peds, _x.vmax))
        _x = val1.start_up_mode
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = val1
        buff.write(_get_struct_21d().pack(_x.wait_time, _x.trigger_zone_radius, _x.max_talking_distance, _x.max_servicing_radius, _x.chatting_probability, _x.tell_story_probability, _x.group_talking_probability, _x.talking_and_walking_probability, _x.requesting_service_probability, _x.requesting_guide_probability, _x.requesting_follower_probability, _x.talking_base_time, _x.tell_story_base_time, _x.group_talking_base_time, _x.talking_and_walking_base_time, _x.receiving_service_base_time, _x.requesting_service_base_time, _x.force_factor_desired, _x.force_factor_obstacle, _x.force_factor_social, _x.force_factor_robot))
        length = len(val1.waypoints)
        buff.write(_struct_I.pack(length))
        for val2 in val1.waypoints:
          _x = val2
          buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _x = val1.waypoint_mode
        buff.write(_get_struct_h().pack(_x))
        _x = val1.configuration
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.peds is None:
        self.peds = None
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.peds = []
      for i in range(0, length):
        val1 = pedsim_msgs.msg.Ped()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.id = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.id = str[start:end]
        _v4 = val1.pos
        _x = _v4
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.type = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.type = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.yaml_file = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.yaml_file = str[start:end]
        _x = val1
        start = end
        end += 10
        (_x.number_of_peds, _x.vmax,) = _get_struct_hd().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.start_up_mode = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.start_up_mode = str[start:end]
        _x = val1
        start = end
        end += 168
        (_x.wait_time, _x.trigger_zone_radius, _x.max_talking_distance, _x.max_servicing_radius, _x.chatting_probability, _x.tell_story_probability, _x.group_talking_probability, _x.talking_and_walking_probability, _x.requesting_service_probability, _x.requesting_guide_probability, _x.requesting_follower_probability, _x.talking_base_time, _x.tell_story_base_time, _x.group_talking_base_time, _x.talking_and_walking_base_time, _x.receiving_service_base_time, _x.requesting_service_base_time, _x.force_factor_desired, _x.force_factor_obstacle, _x.force_factor_social, _x.force_factor_robot,) = _get_struct_21d().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.waypoints = []
        for i in range(0, length):
          val2 = geometry_msgs.msg.Point()
          _x = val2
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
          val1.waypoints.append(val2)
        start = end
        end += 2
        (val1.waypoint_mode,) = _get_struct_h().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.configuration = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.configuration = str[start:end]
        self.peds.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_21d = None
def _get_struct_21d():
    global _struct_21d
    if _struct_21d is None:
        _struct_21d = struct.Struct("<21d")
    return _struct_21d
_struct_3d = None
def _get_struct_3d():
    global _struct_3d
    if _struct_3d is None:
        _struct_3d = struct.Struct("<3d")
    return _struct_3d
_struct_h = None
def _get_struct_h():
    global _struct_h
    if _struct_h is None:
        _struct_h = struct.Struct("<h")
    return _struct_h
_struct_hd = None
def _get_struct_hd():
    global _struct_hd
    if _struct_hd is None:
        _struct_hd = struct.Struct("<hd")
    return _struct_hd
# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from pedsim_srvs/SpawnPedsResponse.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class SpawnPedsResponse(genpy.Message):
  _md5sum = "358e233cde0c8a8bcfea4ce193f8fc15"
  _type = "pedsim_srvs/SpawnPedsResponse"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """bool success

"""
  __slots__ = ['success']
  _slot_types = ['bool']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       success

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(SpawnPedsResponse, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.success is None:
        self.success = False
    else:
      self.success = False

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self.success
      buff.write(_get_struct_B().pack(_x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      start = end
      end += 1
      (self.success,) = _get_struct_B().unpack(str[start:end])
      self.success = bool(self.success)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self.success
      buff.write(_get_struct_B().pack(_x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      start = end
      end += 1
      (self.success,) = _get_struct_B().unpack(str[start:end])
      self.success = bool(self.success)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_B = None
def _get_struct_B():
    global _struct_B
    if _struct_B is None:
        _struct_B = struct.Struct("<B")
    return _struct_B
class SpawnPeds(object):
  _type          = 'pedsim_srvs/SpawnPeds'
  _md5sum = '1a418c9646b48a91fc86313fb280ad3f'
  _request_class  = SpawnPedsRequest
  _response_class = SpawnPedsResponse
