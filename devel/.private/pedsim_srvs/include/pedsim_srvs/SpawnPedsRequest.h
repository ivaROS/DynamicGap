// Generated by gencpp from file pedsim_srvs/SpawnPedsRequest.msg
// DO NOT EDIT!


#ifndef PEDSIM_SRVS_MESSAGE_SPAWNPEDSREQUEST_H
#define PEDSIM_SRVS_MESSAGE_SPAWNPEDSREQUEST_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <pedsim_msgs/Ped.h>

namespace pedsim_srvs
{
template <class ContainerAllocator>
struct SpawnPedsRequest_
{
  typedef SpawnPedsRequest_<ContainerAllocator> Type;

  SpawnPedsRequest_()
    : peds()  {
    }
  SpawnPedsRequest_(const ContainerAllocator& _alloc)
    : peds(_alloc)  {
  (void)_alloc;
    }



   typedef std::vector< ::pedsim_msgs::Ped_<ContainerAllocator> , typename std::allocator_traits<ContainerAllocator>::template rebind_alloc< ::pedsim_msgs::Ped_<ContainerAllocator> >> _peds_type;
  _peds_type peds;





  typedef boost::shared_ptr< ::pedsim_srvs::SpawnPedsRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::pedsim_srvs::SpawnPedsRequest_<ContainerAllocator> const> ConstPtr;

}; // struct SpawnPedsRequest_

typedef ::pedsim_srvs::SpawnPedsRequest_<std::allocator<void> > SpawnPedsRequest;

typedef boost::shared_ptr< ::pedsim_srvs::SpawnPedsRequest > SpawnPedsRequestPtr;
typedef boost::shared_ptr< ::pedsim_srvs::SpawnPedsRequest const> SpawnPedsRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::pedsim_srvs::SpawnPedsRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::pedsim_srvs::SpawnPedsRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::pedsim_srvs::SpawnPedsRequest_<ContainerAllocator1> & lhs, const ::pedsim_srvs::SpawnPedsRequest_<ContainerAllocator2> & rhs)
{
  return lhs.peds == rhs.peds;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::pedsim_srvs::SpawnPedsRequest_<ContainerAllocator1> & lhs, const ::pedsim_srvs::SpawnPedsRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace pedsim_srvs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::pedsim_srvs::SpawnPedsRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::pedsim_srvs::SpawnPedsRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::pedsim_srvs::SpawnPedsRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::pedsim_srvs::SpawnPedsRequest_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::pedsim_srvs::SpawnPedsRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::pedsim_srvs::SpawnPedsRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::pedsim_srvs::SpawnPedsRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "f940e09ef2770c069f1561ed88349b1d";
  }

  static const char* value(const ::pedsim_srvs::SpawnPedsRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xf940e09ef2770c06ULL;
  static const uint64_t static_value2 = 0x9f1561ed88349b1dULL;
};

template<class ContainerAllocator>
struct DataType< ::pedsim_srvs::SpawnPedsRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "pedsim_srvs/SpawnPedsRequest";
  }

  static const char* value(const ::pedsim_srvs::SpawnPedsRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::pedsim_srvs::SpawnPedsRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# Added by Ronja Gueldenring\n"
"# For spawning an agent array dynamically in pedsim and forwarding them to flatland\n"
"pedsim_msgs/Ped[] peds\n"
"\n"
"================================================================================\n"
"MSG: pedsim_msgs/Ped\n"
"# Added by Ronja Gueldenring\n"
"# For spawning agents dynamically in pedsim and forwarding them to flatland\n"
"string id\n"
"geometry_msgs/Point pos\n"
"string type  # \"adult\", \"child\", \"elder\", \"vehicle\", \"servicerobot\"\n"
"string yaml_file\n"
"int16 number_of_peds\n"
"float64 vmax\n"
"\n"
"string start_up_mode  # \"default\", \"wait_timer\", \"trigger_zone\"\n"
"float64 wait_time\n"
"float64 trigger_zone_radius\n"
"\n"
"float64 max_talking_distance\n"
"float64 max_servicing_radius\n"
"\n"
"float64 chatting_probability\n"
"float64 tell_story_probability\n"
"float64 group_talking_probability\n"
"float64 talking_and_walking_probability\n"
"float64 requesting_service_probability\n"
"float64 requesting_guide_probability\n"
"float64 requesting_follower_probability\n"
"\n"
"float64 talking_base_time\n"
"float64 tell_story_base_time\n"
"float64 group_talking_base_time\n"
"float64 talking_and_walking_base_time\n"
"float64 receiving_service_base_time\n"
"float64 requesting_service_base_time\n"
"\n"
"# forces\n"
"float64 force_factor_desired\n"
"float64 force_factor_obstacle\n"
"float64 force_factor_social\n"
"float64 force_factor_robot\n"
"\n"
"geometry_msgs/Point[] waypoints\n"
"int16 waypoint_mode\n"
"\n"
"string configuration\n"
"================================================================================\n"
"MSG: geometry_msgs/Point\n"
"# This contains the position of a point in free space\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
;
  }

  static const char* value(const ::pedsim_srvs::SpawnPedsRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::pedsim_srvs::SpawnPedsRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.peds);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct SpawnPedsRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::pedsim_srvs::SpawnPedsRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::pedsim_srvs::SpawnPedsRequest_<ContainerAllocator>& v)
  {
    s << indent << "peds[]" << std::endl;
    for (size_t i = 0; i < v.peds.size(); ++i)
    {
      s << indent << "  peds[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::pedsim_msgs::Ped_<ContainerAllocator> >::stream(s, indent + "    ", v.peds[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // PEDSIM_SRVS_MESSAGE_SPAWNPEDSREQUEST_H
