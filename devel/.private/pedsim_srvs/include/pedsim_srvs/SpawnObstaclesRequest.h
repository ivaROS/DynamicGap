// Generated by gencpp from file pedsim_srvs/SpawnObstaclesRequest.msg
// DO NOT EDIT!


#ifndef PEDSIM_SRVS_MESSAGE_SPAWNOBSTACLESREQUEST_H
#define PEDSIM_SRVS_MESSAGE_SPAWNOBSTACLESREQUEST_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <pedsim_msgs/Obstacle.h>

namespace pedsim_srvs
{
template <class ContainerAllocator>
struct SpawnObstaclesRequest_
{
  typedef SpawnObstaclesRequest_<ContainerAllocator> Type;

  SpawnObstaclesRequest_()
    : obstacles()  {
    }
  SpawnObstaclesRequest_(const ContainerAllocator& _alloc)
    : obstacles(_alloc)  {
  (void)_alloc;
    }



   typedef std::vector< ::pedsim_msgs::Obstacle_<ContainerAllocator> , typename std::allocator_traits<ContainerAllocator>::template rebind_alloc< ::pedsim_msgs::Obstacle_<ContainerAllocator> >> _obstacles_type;
  _obstacles_type obstacles;





  typedef boost::shared_ptr< ::pedsim_srvs::SpawnObstaclesRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::pedsim_srvs::SpawnObstaclesRequest_<ContainerAllocator> const> ConstPtr;

}; // struct SpawnObstaclesRequest_

typedef ::pedsim_srvs::SpawnObstaclesRequest_<std::allocator<void> > SpawnObstaclesRequest;

typedef boost::shared_ptr< ::pedsim_srvs::SpawnObstaclesRequest > SpawnObstaclesRequestPtr;
typedef boost::shared_ptr< ::pedsim_srvs::SpawnObstaclesRequest const> SpawnObstaclesRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::pedsim_srvs::SpawnObstaclesRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::pedsim_srvs::SpawnObstaclesRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::pedsim_srvs::SpawnObstaclesRequest_<ContainerAllocator1> & lhs, const ::pedsim_srvs::SpawnObstaclesRequest_<ContainerAllocator2> & rhs)
{
  return lhs.obstacles == rhs.obstacles;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::pedsim_srvs::SpawnObstaclesRequest_<ContainerAllocator1> & lhs, const ::pedsim_srvs::SpawnObstaclesRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace pedsim_srvs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::pedsim_srvs::SpawnObstaclesRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::pedsim_srvs::SpawnObstaclesRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::pedsim_srvs::SpawnObstaclesRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::pedsim_srvs::SpawnObstaclesRequest_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::pedsim_srvs::SpawnObstaclesRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::pedsim_srvs::SpawnObstaclesRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::pedsim_srvs::SpawnObstaclesRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "9c5aae08ae2af7fd125c60c46f5f5b96";
  }

  static const char* value(const ::pedsim_srvs::SpawnObstaclesRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x9c5aae08ae2af7fdULL;
  static const uint64_t static_value2 = 0x125c60c46f5f5b96ULL;
};

template<class ContainerAllocator>
struct DataType< ::pedsim_srvs::SpawnObstaclesRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "pedsim_srvs/SpawnObstaclesRequest";
  }

  static const char* value(const ::pedsim_srvs::SpawnObstaclesRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::pedsim_srvs::SpawnObstaclesRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "pedsim_msgs/Obstacle[] obstacles\n"
"\n"
"================================================================================\n"
"MSG: pedsim_msgs/Obstacle\n"
"string name\n"
"# type can be one of the following: \"shelf\"\n"
"string type\n"
"geometry_msgs/Pose pose\n"
"float64 interaction_radius\n"
"string yaml_path\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Pose\n"
"# A representation of pose in free space, composed of position and orientation. \n"
"Point position\n"
"Quaternion orientation\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Point\n"
"# This contains the position of a point in free space\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Quaternion\n"
"# This represents an orientation in free space in quaternion form.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"float64 w\n"
;
  }

  static const char* value(const ::pedsim_srvs::SpawnObstaclesRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::pedsim_srvs::SpawnObstaclesRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.obstacles);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct SpawnObstaclesRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::pedsim_srvs::SpawnObstaclesRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::pedsim_srvs::SpawnObstaclesRequest_<ContainerAllocator>& v)
  {
    s << indent << "obstacles[]" << std::endl;
    for (size_t i = 0; i < v.obstacles.size(); ++i)
    {
      s << indent << "  obstacles[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::pedsim_msgs::Obstacle_<ContainerAllocator> >::stream(s, indent + "    ", v.obstacles[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // PEDSIM_SRVS_MESSAGE_SPAWNOBSTACLESREQUEST_H
