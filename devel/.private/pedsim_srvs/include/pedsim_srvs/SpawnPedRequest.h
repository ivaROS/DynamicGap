// Generated by gencpp from file pedsim_srvs/SpawnPedRequest.msg
// DO NOT EDIT!


#ifndef PEDSIM_SRVS_MESSAGE_SPAWNPEDREQUEST_H
#define PEDSIM_SRVS_MESSAGE_SPAWNPEDREQUEST_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <geometry_msgs/Point.h>
#include <geometry_msgs/Point.h>

namespace pedsim_srvs
{
template <class ContainerAllocator>
struct SpawnPedRequest_
{
  typedef SpawnPedRequest_<ContainerAllocator> Type;

  SpawnPedRequest_()
    : id()
    , pos()
    , type(0)
    , number_of_peds(0)
    , waypoints()  {
    }
  SpawnPedRequest_(const ContainerAllocator& _alloc)
    : id(_alloc)
    , pos(_alloc)
    , type(0)
    , number_of_peds(0)
    , waypoints(_alloc)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _id_type;
  _id_type id;

   typedef  ::geometry_msgs::Point_<ContainerAllocator>  _pos_type;
  _pos_type pos;

   typedef int16_t _type_type;
  _type_type type;

   typedef int16_t _number_of_peds_type;
  _number_of_peds_type number_of_peds;

   typedef std::vector< ::geometry_msgs::Point_<ContainerAllocator> , typename std::allocator_traits<ContainerAllocator>::template rebind_alloc< ::geometry_msgs::Point_<ContainerAllocator> >> _waypoints_type;
  _waypoints_type waypoints;





  typedef boost::shared_ptr< ::pedsim_srvs::SpawnPedRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::pedsim_srvs::SpawnPedRequest_<ContainerAllocator> const> ConstPtr;

}; // struct SpawnPedRequest_

typedef ::pedsim_srvs::SpawnPedRequest_<std::allocator<void> > SpawnPedRequest;

typedef boost::shared_ptr< ::pedsim_srvs::SpawnPedRequest > SpawnPedRequestPtr;
typedef boost::shared_ptr< ::pedsim_srvs::SpawnPedRequest const> SpawnPedRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::pedsim_srvs::SpawnPedRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::pedsim_srvs::SpawnPedRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::pedsim_srvs::SpawnPedRequest_<ContainerAllocator1> & lhs, const ::pedsim_srvs::SpawnPedRequest_<ContainerAllocator2> & rhs)
{
  return lhs.id == rhs.id &&
    lhs.pos == rhs.pos &&
    lhs.type == rhs.type &&
    lhs.number_of_peds == rhs.number_of_peds &&
    lhs.waypoints == rhs.waypoints;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::pedsim_srvs::SpawnPedRequest_<ContainerAllocator1> & lhs, const ::pedsim_srvs::SpawnPedRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace pedsim_srvs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::pedsim_srvs::SpawnPedRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::pedsim_srvs::SpawnPedRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::pedsim_srvs::SpawnPedRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::pedsim_srvs::SpawnPedRequest_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::pedsim_srvs::SpawnPedRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::pedsim_srvs::SpawnPedRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::pedsim_srvs::SpawnPedRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "8aaa615f28566e1264a32400e0be8e7e";
  }

  static const char* value(const ::pedsim_srvs::SpawnPedRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x8aaa615f28566e12ULL;
  static const uint64_t static_value2 = 0x64a32400e0be8e7eULL;
};

template<class ContainerAllocator>
struct DataType< ::pedsim_srvs::SpawnPedRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "pedsim_srvs/SpawnPedRequest";
  }

  static const char* value(const ::pedsim_srvs::SpawnPedRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::pedsim_srvs::SpawnPedRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# Added by Ronja Gueldenring\n"
"# For spawning agents dynamically in pedsim and forwarding them to flatland\n"
"string id\n"
"geometry_msgs/Point pos\n"
"int16 type\n"
"int16 number_of_peds\n"
"geometry_msgs/Point[] waypoints\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Point\n"
"# This contains the position of a point in free space\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
;
  }

  static const char* value(const ::pedsim_srvs::SpawnPedRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::pedsim_srvs::SpawnPedRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.id);
      stream.next(m.pos);
      stream.next(m.type);
      stream.next(m.number_of_peds);
      stream.next(m.waypoints);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct SpawnPedRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::pedsim_srvs::SpawnPedRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::pedsim_srvs::SpawnPedRequest_<ContainerAllocator>& v)
  {
    s << indent << "id: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.id);
    s << indent << "pos: ";
    s << std::endl;
    Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "  ", v.pos);
    s << indent << "type: ";
    Printer<int16_t>::stream(s, indent + "  ", v.type);
    s << indent << "number_of_peds: ";
    Printer<int16_t>::stream(s, indent + "  ", v.number_of_peds);
    s << indent << "waypoints[]" << std::endl;
    for (size_t i = 0; i < v.waypoints.size(); ++i)
    {
      s << indent << "  waypoints[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "    ", v.waypoints[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // PEDSIM_SRVS_MESSAGE_SPAWNPEDREQUEST_H
