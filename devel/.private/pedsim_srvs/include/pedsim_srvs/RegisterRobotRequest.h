// Generated by gencpp from file pedsim_srvs/RegisterRobotRequest.msg
// DO NOT EDIT!


#ifndef PEDSIM_SRVS_MESSAGE_REGISTERROBOTREQUEST_H
#define PEDSIM_SRVS_MESSAGE_REGISTERROBOTREQUEST_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace pedsim_srvs
{
template <class ContainerAllocator>
struct RegisterRobotRequest_
{
  typedef RegisterRobotRequest_<ContainerAllocator> Type;

  RegisterRobotRequest_()
    : name()
    , odom_topic()
    , yaml_path()  {
    }
  RegisterRobotRequest_(const ContainerAllocator& _alloc)
    : name(_alloc)
    , odom_topic(_alloc)
    , yaml_path(_alloc)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _name_type;
  _name_type name;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _odom_topic_type;
  _odom_topic_type odom_topic;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _yaml_path_type;
  _yaml_path_type yaml_path;





  typedef boost::shared_ptr< ::pedsim_srvs::RegisterRobotRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::pedsim_srvs::RegisterRobotRequest_<ContainerAllocator> const> ConstPtr;

}; // struct RegisterRobotRequest_

typedef ::pedsim_srvs::RegisterRobotRequest_<std::allocator<void> > RegisterRobotRequest;

typedef boost::shared_ptr< ::pedsim_srvs::RegisterRobotRequest > RegisterRobotRequestPtr;
typedef boost::shared_ptr< ::pedsim_srvs::RegisterRobotRequest const> RegisterRobotRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::pedsim_srvs::RegisterRobotRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::pedsim_srvs::RegisterRobotRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::pedsim_srvs::RegisterRobotRequest_<ContainerAllocator1> & lhs, const ::pedsim_srvs::RegisterRobotRequest_<ContainerAllocator2> & rhs)
{
  return lhs.name == rhs.name &&
    lhs.odom_topic == rhs.odom_topic &&
    lhs.yaml_path == rhs.yaml_path;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::pedsim_srvs::RegisterRobotRequest_<ContainerAllocator1> & lhs, const ::pedsim_srvs::RegisterRobotRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace pedsim_srvs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::pedsim_srvs::RegisterRobotRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::pedsim_srvs::RegisterRobotRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::pedsim_srvs::RegisterRobotRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::pedsim_srvs::RegisterRobotRequest_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::pedsim_srvs::RegisterRobotRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::pedsim_srvs::RegisterRobotRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::pedsim_srvs::RegisterRobotRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "5cc01cea2a4279e94ae0294d86f41c77";
  }

  static const char* value(const ::pedsim_srvs::RegisterRobotRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x5cc01cea2a4279e9ULL;
  static const uint64_t static_value2 = 0x4ae0294d86f41c77ULL;
};

template<class ContainerAllocator>
struct DataType< ::pedsim_srvs::RegisterRobotRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "pedsim_srvs/RegisterRobotRequest";
  }

  static const char* value(const ::pedsim_srvs::RegisterRobotRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::pedsim_srvs::RegisterRobotRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string name\n"
"string odom_topic\n"
"string yaml_path\n"
;
  }

  static const char* value(const ::pedsim_srvs::RegisterRobotRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::pedsim_srvs::RegisterRobotRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.name);
      stream.next(m.odom_topic);
      stream.next(m.yaml_path);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct RegisterRobotRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::pedsim_srvs::RegisterRobotRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::pedsim_srvs::RegisterRobotRequest_<ContainerAllocator>& v)
  {
    s << indent << "name: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.name);
    s << indent << "odom_topic: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.odom_topic);
    s << indent << "yaml_path: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.yaml_path);
  }
};

} // namespace message_operations
} // namespace ros

#endif // PEDSIM_SRVS_MESSAGE_REGISTERROBOTREQUEST_H
