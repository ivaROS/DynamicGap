// Generated by gencpp from file cob_control_msgs/GetObstacleDistanceResponse.msg
// DO NOT EDIT!


#ifndef COB_CONTROL_MSGS_MESSAGE_GETOBSTACLEDISTANCERESPONSE_H
#define COB_CONTROL_MSGS_MESSAGE_GETOBSTACLEDISTANCERESPONSE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace cob_control_msgs
{
template <class ContainerAllocator>
struct GetObstacleDistanceResponse_
{
  typedef GetObstacleDistanceResponse_<ContainerAllocator> Type;

  GetObstacleDistanceResponse_()
    : link_to_object()
    , distances()  {
    }
  GetObstacleDistanceResponse_(const ContainerAllocator& _alloc)
    : link_to_object(_alloc)
    , distances(_alloc)  {
  (void)_alloc;
    }



   typedef std::vector<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>> _link_to_object_type;
  _link_to_object_type link_to_object;

   typedef std::vector<double, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<double>> _distances_type;
  _distances_type distances;





  typedef boost::shared_ptr< ::cob_control_msgs::GetObstacleDistanceResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::cob_control_msgs::GetObstacleDistanceResponse_<ContainerAllocator> const> ConstPtr;

}; // struct GetObstacleDistanceResponse_

typedef ::cob_control_msgs::GetObstacleDistanceResponse_<std::allocator<void> > GetObstacleDistanceResponse;

typedef boost::shared_ptr< ::cob_control_msgs::GetObstacleDistanceResponse > GetObstacleDistanceResponsePtr;
typedef boost::shared_ptr< ::cob_control_msgs::GetObstacleDistanceResponse const> GetObstacleDistanceResponseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::cob_control_msgs::GetObstacleDistanceResponse_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::cob_control_msgs::GetObstacleDistanceResponse_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::cob_control_msgs::GetObstacleDistanceResponse_<ContainerAllocator1> & lhs, const ::cob_control_msgs::GetObstacleDistanceResponse_<ContainerAllocator2> & rhs)
{
  return lhs.link_to_object == rhs.link_to_object &&
    lhs.distances == rhs.distances;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::cob_control_msgs::GetObstacleDistanceResponse_<ContainerAllocator1> & lhs, const ::cob_control_msgs::GetObstacleDistanceResponse_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace cob_control_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::cob_control_msgs::GetObstacleDistanceResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::cob_control_msgs::GetObstacleDistanceResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::cob_control_msgs::GetObstacleDistanceResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::cob_control_msgs::GetObstacleDistanceResponse_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::cob_control_msgs::GetObstacleDistanceResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::cob_control_msgs::GetObstacleDistanceResponse_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::cob_control_msgs::GetObstacleDistanceResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "0f350045e25a569fa591e752a415419b";
  }

  static const char* value(const ::cob_control_msgs::GetObstacleDistanceResponse_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x0f350045e25a569fULL;
  static const uint64_t static_value2 = 0xa591e752a415419bULL;
};

template<class ContainerAllocator>
struct DataType< ::cob_control_msgs::GetObstacleDistanceResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "cob_control_msgs/GetObstacleDistanceResponse";
  }

  static const char* value(const ::cob_control_msgs::GetObstacleDistanceResponse_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::cob_control_msgs::GetObstacleDistanceResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string[] link_to_object\n"
"float64[] distances\n"
;
  }

  static const char* value(const ::cob_control_msgs::GetObstacleDistanceResponse_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::cob_control_msgs::GetObstacleDistanceResponse_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.link_to_object);
      stream.next(m.distances);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct GetObstacleDistanceResponse_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::cob_control_msgs::GetObstacleDistanceResponse_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::cob_control_msgs::GetObstacleDistanceResponse_<ContainerAllocator>& v)
  {
    s << indent << "link_to_object[]" << std::endl;
    for (size_t i = 0; i < v.link_to_object.size(); ++i)
    {
      s << indent << "  link_to_object[" << i << "]: ";
      Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.link_to_object[i]);
    }
    s << indent << "distances[]" << std::endl;
    for (size_t i = 0; i < v.distances.size(); ++i)
    {
      s << indent << "  distances[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.distances[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // COB_CONTROL_MSGS_MESSAGE_GETOBSTACLEDISTANCERESPONSE_H
