// Generated by gencpp from file cob_control_msgs/ObstacleDistance.msg
// DO NOT EDIT!


#ifndef COB_CONTROL_MSGS_MESSAGE_OBSTACLEDISTANCE_H
#define COB_CONTROL_MSGS_MESSAGE_OBSTACLEDISTANCE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>
#include <geometry_msgs/Vector3.h>
#include <geometry_msgs/Vector3.h>
#include <geometry_msgs/Vector3.h>

namespace cob_control_msgs
{
template <class ContainerAllocator>
struct ObstacleDistance_
{
  typedef ObstacleDistance_<ContainerAllocator> Type;

  ObstacleDistance_()
    : header()
    , link_of_interest()
    , obstacle_id()
    , distance(0.0)
    , frame_vector()
    , nearest_point_frame_vector()
    , nearest_point_obstacle_vector()  {
    }
  ObstacleDistance_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , link_of_interest(_alloc)
    , obstacle_id(_alloc)
    , distance(0.0)
    , frame_vector(_alloc)
    , nearest_point_frame_vector(_alloc)
    , nearest_point_obstacle_vector(_alloc)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _link_of_interest_type;
  _link_of_interest_type link_of_interest;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _obstacle_id_type;
  _obstacle_id_type obstacle_id;

   typedef double _distance_type;
  _distance_type distance;

   typedef  ::geometry_msgs::Vector3_<ContainerAllocator>  _frame_vector_type;
  _frame_vector_type frame_vector;

   typedef  ::geometry_msgs::Vector3_<ContainerAllocator>  _nearest_point_frame_vector_type;
  _nearest_point_frame_vector_type nearest_point_frame_vector;

   typedef  ::geometry_msgs::Vector3_<ContainerAllocator>  _nearest_point_obstacle_vector_type;
  _nearest_point_obstacle_vector_type nearest_point_obstacle_vector;





  typedef boost::shared_ptr< ::cob_control_msgs::ObstacleDistance_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::cob_control_msgs::ObstacleDistance_<ContainerAllocator> const> ConstPtr;

}; // struct ObstacleDistance_

typedef ::cob_control_msgs::ObstacleDistance_<std::allocator<void> > ObstacleDistance;

typedef boost::shared_ptr< ::cob_control_msgs::ObstacleDistance > ObstacleDistancePtr;
typedef boost::shared_ptr< ::cob_control_msgs::ObstacleDistance const> ObstacleDistanceConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::cob_control_msgs::ObstacleDistance_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::cob_control_msgs::ObstacleDistance_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::cob_control_msgs::ObstacleDistance_<ContainerAllocator1> & lhs, const ::cob_control_msgs::ObstacleDistance_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.link_of_interest == rhs.link_of_interest &&
    lhs.obstacle_id == rhs.obstacle_id &&
    lhs.distance == rhs.distance &&
    lhs.frame_vector == rhs.frame_vector &&
    lhs.nearest_point_frame_vector == rhs.nearest_point_frame_vector &&
    lhs.nearest_point_obstacle_vector == rhs.nearest_point_obstacle_vector;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::cob_control_msgs::ObstacleDistance_<ContainerAllocator1> & lhs, const ::cob_control_msgs::ObstacleDistance_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace cob_control_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::cob_control_msgs::ObstacleDistance_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::cob_control_msgs::ObstacleDistance_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::cob_control_msgs::ObstacleDistance_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::cob_control_msgs::ObstacleDistance_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::cob_control_msgs::ObstacleDistance_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::cob_control_msgs::ObstacleDistance_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::cob_control_msgs::ObstacleDistance_<ContainerAllocator> >
{
  static const char* value()
  {
    return "fbbcad171002ad96c1fc44941d7a1bf1";
  }

  static const char* value(const ::cob_control_msgs::ObstacleDistance_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xfbbcad171002ad96ULL;
  static const uint64_t static_value2 = 0xc1fc44941d7a1bf1ULL;
};

template<class ContainerAllocator>
struct DataType< ::cob_control_msgs::ObstacleDistance_<ContainerAllocator> >
{
  static const char* value()
  {
    return "cob_control_msgs/ObstacleDistance";
  }

  static const char* value(const ::cob_control_msgs::ObstacleDistance_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::cob_control_msgs::ObstacleDistance_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Header header\n"
"\n"
"## Collision pair consists of link of interest and obstacle\n"
"# Registration name of the link of interest\n"
"string link_of_interest\n"
"# Registration name of the obstacle\n"
"string obstacle_id\n"
"\n"
"## distance between the nearest points on obstacle and link of interest\n"
"float64 distance\n"
"\n"
"## Vector pointing to the origin of the link\n"
"geometry_msgs/Vector3 frame_vector\n"
"\n"
"## Vector pointing to the nearest point on the link collision geometry (e.g. mesh)\n"
"geometry_msgs/Vector3 nearest_point_frame_vector\n"
"\n"
"## Vector pointing to the nearest point on the obstacle collision geometry (e.g. mesh)\n"
"geometry_msgs/Vector3 nearest_point_obstacle_vector\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Vector3\n"
"# This represents a vector in free space. \n"
"# It is only meant to represent a direction. Therefore, it does not\n"
"# make sense to apply a translation to it (e.g., when applying a \n"
"# generic rigid transformation to a Vector3, tf2 will only apply the\n"
"# rotation). If you want your data to be translatable too, use the\n"
"# geometry_msgs/Point message instead.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
;
  }

  static const char* value(const ::cob_control_msgs::ObstacleDistance_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::cob_control_msgs::ObstacleDistance_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.link_of_interest);
      stream.next(m.obstacle_id);
      stream.next(m.distance);
      stream.next(m.frame_vector);
      stream.next(m.nearest_point_frame_vector);
      stream.next(m.nearest_point_obstacle_vector);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ObstacleDistance_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::cob_control_msgs::ObstacleDistance_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::cob_control_msgs::ObstacleDistance_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "link_of_interest: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.link_of_interest);
    s << indent << "obstacle_id: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.obstacle_id);
    s << indent << "distance: ";
    Printer<double>::stream(s, indent + "  ", v.distance);
    s << indent << "frame_vector: ";
    s << std::endl;
    Printer< ::geometry_msgs::Vector3_<ContainerAllocator> >::stream(s, indent + "  ", v.frame_vector);
    s << indent << "nearest_point_frame_vector: ";
    s << std::endl;
    Printer< ::geometry_msgs::Vector3_<ContainerAllocator> >::stream(s, indent + "  ", v.nearest_point_frame_vector);
    s << indent << "nearest_point_obstacle_vector: ";
    s << std::endl;
    Printer< ::geometry_msgs::Vector3_<ContainerAllocator> >::stream(s, indent + "  ", v.nearest_point_obstacle_vector);
  }
};

} // namespace message_operations
} // namespace ros

#endif // COB_CONTROL_MSGS_MESSAGE_OBSTACLEDISTANCE_H
