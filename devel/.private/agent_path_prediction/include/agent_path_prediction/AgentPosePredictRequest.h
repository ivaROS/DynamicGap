// Generated by gencpp from file agent_path_prediction/AgentPosePredictRequest.msg
// DO NOT EDIT!


#ifndef AGENT_PATH_PREDICTION_MESSAGE_AGENTPOSEPREDICTREQUEST_H
#define AGENT_PATH_PREDICTION_MESSAGE_AGENTPOSEPREDICTREQUEST_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace agent_path_prediction
{
template <class ContainerAllocator>
struct AgentPosePredictRequest_
{
  typedef AgentPosePredictRequest_<ContainerAllocator> Type;

  AgentPosePredictRequest_()
    : type(0)
    , predict_times()
    , ids()  {
    }
  AgentPosePredictRequest_(const ContainerAllocator& _alloc)
    : type(0)
    , predict_times(_alloc)
    , ids(_alloc)  {
  (void)_alloc;
    }



   typedef uint8_t _type_type;
  _type_type type;

   typedef std::vector<double, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<double>> _predict_times_type;
  _predict_times_type predict_times;

   typedef std::vector<int64_t, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<int64_t>> _ids_type;
  _ids_type ids;



// reducing the odds to have name collisions with Windows.h 
#if defined(_WIN32) && defined(VELOCITY_SCALE)
  #undef VELOCITY_SCALE
#endif
#if defined(_WIN32) && defined(VELOCITY_OBSTACLE)
  #undef VELOCITY_OBSTACLE
#endif
#if defined(_WIN32) && defined(EXTERNAL)
  #undef EXTERNAL
#endif
#if defined(_WIN32) && defined(BEHIND_ROBOT)
  #undef BEHIND_ROBOT
#endif
#if defined(_WIN32) && defined(PREDICTED_GOAL)
  #undef PREDICTED_GOAL
#endif

  enum {
    VELOCITY_SCALE = 0u,
    VELOCITY_OBSTACLE = 1u,
    EXTERNAL = 2u,
    BEHIND_ROBOT = 3u,
    PREDICTED_GOAL = 4u,
  };


  typedef boost::shared_ptr< ::agent_path_prediction::AgentPosePredictRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::agent_path_prediction::AgentPosePredictRequest_<ContainerAllocator> const> ConstPtr;

}; // struct AgentPosePredictRequest_

typedef ::agent_path_prediction::AgentPosePredictRequest_<std::allocator<void> > AgentPosePredictRequest;

typedef boost::shared_ptr< ::agent_path_prediction::AgentPosePredictRequest > AgentPosePredictRequestPtr;
typedef boost::shared_ptr< ::agent_path_prediction::AgentPosePredictRequest const> AgentPosePredictRequestConstPtr;

// constants requiring out of line definition

   

   

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::agent_path_prediction::AgentPosePredictRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::agent_path_prediction::AgentPosePredictRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::agent_path_prediction::AgentPosePredictRequest_<ContainerAllocator1> & lhs, const ::agent_path_prediction::AgentPosePredictRequest_<ContainerAllocator2> & rhs)
{
  return lhs.type == rhs.type &&
    lhs.predict_times == rhs.predict_times &&
    lhs.ids == rhs.ids;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::agent_path_prediction::AgentPosePredictRequest_<ContainerAllocator1> & lhs, const ::agent_path_prediction::AgentPosePredictRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace agent_path_prediction

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::agent_path_prediction::AgentPosePredictRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::agent_path_prediction::AgentPosePredictRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::agent_path_prediction::AgentPosePredictRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::agent_path_prediction::AgentPosePredictRequest_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::agent_path_prediction::AgentPosePredictRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::agent_path_prediction::AgentPosePredictRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::agent_path_prediction::AgentPosePredictRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "770992d52ec17eb262325de18b4c8f01";
  }

  static const char* value(const ::agent_path_prediction::AgentPosePredictRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x770992d52ec17eb2ULL;
  static const uint64_t static_value2 = 0x62325de18b4c8f01ULL;
};

template<class ContainerAllocator>
struct DataType< ::agent_path_prediction::AgentPosePredictRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "agent_path_prediction/AgentPosePredictRequest";
  }

  static const char* value(const ::agent_path_prediction::AgentPosePredictRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::agent_path_prediction::AgentPosePredictRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# request constants\n"
"uint8 VELOCITY_SCALE=0\n"
"uint8 VELOCITY_OBSTACLE=1\n"
"uint8 EXTERNAL=2\n"
"uint8 BEHIND_ROBOT=3\n"
"uint8 PREDICTED_GOAL=4\n"
"# request fields\n"
"uint8                               type\n"
"float64[]                           predict_times\n"
"int64[]                             ids\n"
;
  }

  static const char* value(const ::agent_path_prediction::AgentPosePredictRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::agent_path_prediction::AgentPosePredictRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.type);
      stream.next(m.predict_times);
      stream.next(m.ids);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct AgentPosePredictRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::agent_path_prediction::AgentPosePredictRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::agent_path_prediction::AgentPosePredictRequest_<ContainerAllocator>& v)
  {
    s << indent << "type: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.type);
    s << indent << "predict_times[]" << std::endl;
    for (size_t i = 0; i < v.predict_times.size(); ++i)
    {
      s << indent << "  predict_times[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.predict_times[i]);
    }
    s << indent << "ids[]" << std::endl;
    for (size_t i = 0; i < v.ids.size(); ++i)
    {
      s << indent << "  ids[" << i << "]: ";
      Printer<int64_t>::stream(s, indent + "  ", v.ids[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // AGENT_PATH_PREDICTION_MESSAGE_AGENTPOSEPREDICTREQUEST_H
