// Generated by gencpp from file barn_msgs/BARN_data.msg
// DO NOT EDIT!


#ifndef BARN_MSGS_MESSAGE_BARN_DATA_H
#define BARN_MSGS_MESSAGE_BARN_DATA_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace barn_msgs
{
template <class ContainerAllocator>
struct BARN_data_
{
  typedef BARN_data_<ContainerAllocator> Type;

  BARN_data_()
    : scan()
    , goal_cart()  {
    }
  BARN_data_(const ContainerAllocator& _alloc)
    : scan(_alloc)
    , goal_cart(_alloc)  {
  (void)_alloc;
    }



   typedef std::vector<float, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<float>> _scan_type;
  _scan_type scan;

   typedef std::vector<float, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<float>> _goal_cart_type;
  _goal_cart_type goal_cart;





  typedef boost::shared_ptr< ::barn_msgs::BARN_data_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::barn_msgs::BARN_data_<ContainerAllocator> const> ConstPtr;

}; // struct BARN_data_

typedef ::barn_msgs::BARN_data_<std::allocator<void> > BARN_data;

typedef boost::shared_ptr< ::barn_msgs::BARN_data > BARN_dataPtr;
typedef boost::shared_ptr< ::barn_msgs::BARN_data const> BARN_dataConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::barn_msgs::BARN_data_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::barn_msgs::BARN_data_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::barn_msgs::BARN_data_<ContainerAllocator1> & lhs, const ::barn_msgs::BARN_data_<ContainerAllocator2> & rhs)
{
  return lhs.scan == rhs.scan &&
    lhs.goal_cart == rhs.goal_cart;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::barn_msgs::BARN_data_<ContainerAllocator1> & lhs, const ::barn_msgs::BARN_data_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace barn_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::barn_msgs::BARN_data_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::barn_msgs::BARN_data_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::barn_msgs::BARN_data_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::barn_msgs::BARN_data_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::barn_msgs::BARN_data_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::barn_msgs::BARN_data_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::barn_msgs::BARN_data_<ContainerAllocator> >
{
  static const char* value()
  {
    return "68e5ba558e737ae344773180a6c37ce7";
  }

  static const char* value(const ::barn_msgs::BARN_data_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x68e5ba558e737ae3ULL;
  static const uint64_t static_value2 = 0x44773180a6c37ce7ULL;
};

template<class ContainerAllocator>
struct DataType< ::barn_msgs::BARN_data_<ContainerAllocator> >
{
  static const char* value()
  {
    return "barn_msgs/BARN_data";
  }

  static const char* value(const ::barn_msgs::BARN_data_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::barn_msgs::BARN_data_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float32[] scan	  	# 720 range data from the laser scan\n"
"float32[] goal_cart     # current goal in robot frame\n"
;
  }

  static const char* value(const ::barn_msgs::BARN_data_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::barn_msgs::BARN_data_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.scan);
      stream.next(m.goal_cart);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct BARN_data_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::barn_msgs::BARN_data_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::barn_msgs::BARN_data_<ContainerAllocator>& v)
  {
    s << indent << "scan[]" << std::endl;
    for (size_t i = 0; i < v.scan.size(); ++i)
    {
      s << indent << "  scan[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.scan[i]);
    }
    s << indent << "goal_cart[]" << std::endl;
    for (size_t i = 0; i < v.goal_cart.size(); ++i)
    {
      s << indent << "  goal_cart[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.goal_cart[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // BARN_MSGS_MESSAGE_BARN_DATA_H
