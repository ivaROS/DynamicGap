// Generated by gencpp from file cohan_msgs/AgentType.msg
// DO NOT EDIT!


#ifndef COHAN_MSGS_MESSAGE_AGENTTYPE_H
#define COHAN_MSGS_MESSAGE_AGENTTYPE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace cohan_msgs
{
template <class ContainerAllocator>
struct AgentType_
{
  typedef AgentType_<ContainerAllocator> Type;

  AgentType_()
    {
    }
  AgentType_(const ContainerAllocator& _alloc)
    {
  (void)_alloc;
    }





// reducing the odds to have name collisions with Windows.h 
#if defined(_WIN32) && defined(ROBOT)
  #undef ROBOT
#endif
#if defined(_WIN32) && defined(HUMAN)
  #undef HUMAN
#endif

  enum {
    ROBOT = 0,
    HUMAN = 1,
  };


  typedef boost::shared_ptr< ::cohan_msgs::AgentType_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::cohan_msgs::AgentType_<ContainerAllocator> const> ConstPtr;

}; // struct AgentType_

typedef ::cohan_msgs::AgentType_<std::allocator<void> > AgentType;

typedef boost::shared_ptr< ::cohan_msgs::AgentType > AgentTypePtr;
typedef boost::shared_ptr< ::cohan_msgs::AgentType const> AgentTypeConstPtr;

// constants requiring out of line definition

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::cohan_msgs::AgentType_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::cohan_msgs::AgentType_<ContainerAllocator> >::stream(s, "", v);
return s;
}


} // namespace cohan_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::cohan_msgs::AgentType_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::cohan_msgs::AgentType_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::cohan_msgs::AgentType_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::cohan_msgs::AgentType_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::cohan_msgs::AgentType_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::cohan_msgs::AgentType_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::cohan_msgs::AgentType_<ContainerAllocator> >
{
  static const char* value()
  {
    return "5beb948e85cadcdc28356d202c4aeecd";
  }

  static const char* value(const ::cohan_msgs::AgentType_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x5beb948e85cadcdcULL;
  static const uint64_t static_value2 = 0x28356d202c4aeecdULL;
};

template<class ContainerAllocator>
struct DataType< ::cohan_msgs::AgentType_<ContainerAllocator> >
{
  static const char* value()
  {
    return "cohan_msgs/AgentType";
  }

  static const char* value(const ::cohan_msgs::AgentType_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::cohan_msgs::AgentType_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# agent types\n"
"int8 ROBOT=0\n"
"int8 HUMAN=1\n"
;
  }

  static const char* value(const ::cohan_msgs::AgentType_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::cohan_msgs::AgentType_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream&, T)
    {}

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct AgentType_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::cohan_msgs::AgentType_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream&, const std::string&, const ::cohan_msgs::AgentType_<ContainerAllocator>&)
  {}
};

} // namespace message_operations
} // namespace ros

#endif // COHAN_MSGS_MESSAGE_AGENTTYPE_H
