// Generated by gencpp from file cohan_msgs/TrackedAgent.msg
// DO NOT EDIT!


#ifndef COHAN_MSGS_MESSAGE_TRACKEDAGENT_H
#define COHAN_MSGS_MESSAGE_TRACKEDAGENT_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <cohan_msgs/TrackedSegment.h>

namespace cohan_msgs
{
template <class ContainerAllocator>
struct TrackedAgent_
{
  typedef TrackedAgent_<ContainerAllocator> Type;

  TrackedAgent_()
    : track_id(0)
    , state(0)
    , type(0)
    , name()
    , segments()  {
    }
  TrackedAgent_(const ContainerAllocator& _alloc)
    : track_id(0)
    , state(0)
    , type(0)
    , name(_alloc)
    , segments(_alloc)  {
  (void)_alloc;
    }



   typedef uint64_t _track_id_type;
  _track_id_type track_id;

   typedef int8_t _state_type;
  _state_type state;

   typedef int8_t _type_type;
  _type_type type;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _name_type;
  _name_type name;

   typedef std::vector< ::cohan_msgs::TrackedSegment_<ContainerAllocator> , typename std::allocator_traits<ContainerAllocator>::template rebind_alloc< ::cohan_msgs::TrackedSegment_<ContainerAllocator> >> _segments_type;
  _segments_type segments;



// reducing the odds to have name collisions with Windows.h 
#if defined(_WIN32) && defined(STATIC)
  #undef STATIC
#endif
#if defined(_WIN32) && defined(MOVING)
  #undef MOVING
#endif
#if defined(_WIN32) && defined(STOPPED)
  #undef STOPPED
#endif
#if defined(_WIN32) && defined(BLOCKED)
  #undef BLOCKED
#endif

  enum {
    STATIC = 0,
    MOVING = 1,
    STOPPED = 2,
    BLOCKED = 3,
  };


  typedef boost::shared_ptr< ::cohan_msgs::TrackedAgent_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::cohan_msgs::TrackedAgent_<ContainerAllocator> const> ConstPtr;

}; // struct TrackedAgent_

typedef ::cohan_msgs::TrackedAgent_<std::allocator<void> > TrackedAgent;

typedef boost::shared_ptr< ::cohan_msgs::TrackedAgent > TrackedAgentPtr;
typedef boost::shared_ptr< ::cohan_msgs::TrackedAgent const> TrackedAgentConstPtr;

// constants requiring out of line definition

   

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::cohan_msgs::TrackedAgent_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::cohan_msgs::TrackedAgent_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::cohan_msgs::TrackedAgent_<ContainerAllocator1> & lhs, const ::cohan_msgs::TrackedAgent_<ContainerAllocator2> & rhs)
{
  return lhs.track_id == rhs.track_id &&
    lhs.state == rhs.state &&
    lhs.type == rhs.type &&
    lhs.name == rhs.name &&
    lhs.segments == rhs.segments;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::cohan_msgs::TrackedAgent_<ContainerAllocator1> & lhs, const ::cohan_msgs::TrackedAgent_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace cohan_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::cohan_msgs::TrackedAgent_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::cohan_msgs::TrackedAgent_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::cohan_msgs::TrackedAgent_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::cohan_msgs::TrackedAgent_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::cohan_msgs::TrackedAgent_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::cohan_msgs::TrackedAgent_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::cohan_msgs::TrackedAgent_<ContainerAllocator> >
{
  static const char* value()
  {
    return "e6d0cc6bc60fdd6b12a54123fbdffc28";
  }

  static const char* value(const ::cohan_msgs::TrackedAgent_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xe6d0cc6bc60fdd6bULL;
  static const uint64_t static_value2 = 0x12a54123fbdffc28ULL;
};

template<class ContainerAllocator>
struct DataType< ::cohan_msgs::TrackedAgent_<ContainerAllocator> >
{
  static const char* value()
  {
    return "cohan_msgs/TrackedAgent";
  }

  static const char* value(const ::cohan_msgs::TrackedAgent_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::cohan_msgs::TrackedAgent_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# states\n"
"int8 STATIC=0\n"
"int8 MOVING=1\n"
"int8 STOPPED=2\n"
"int8 BLOCKED=3\n"
"\n"
"uint64              track_id\n"
"int8                state\n"
"int8                type\n"
"string              name\n"
"TrackedSegment[]    segments\n"
"\n"
"================================================================================\n"
"MSG: cohan_msgs/TrackedSegment\n"
"int8                                type\n"
"geometry_msgs/PoseWithCovariance    pose\n"
"geometry_msgs/TwistWithCovariance   twist\n"
"geometry_msgs/AccelWithCovariance   accel\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/PoseWithCovariance\n"
"# This represents a pose in free space with uncertainty.\n"
"\n"
"Pose pose\n"
"\n"
"# Row-major representation of the 6x6 covariance matrix\n"
"# The orientation parameters use a fixed-axis representation.\n"
"# In order, the parameters are:\n"
"# (x, y, z, rotation about X axis, rotation about Y axis, rotation about Z axis)\n"
"float64[36] covariance\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Pose\n"
"# A representation of pose in free space, composed of position and orientation. \n"
"Point position\n"
"Quaternion orientation\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Point\n"
"# This contains the position of a point in free space\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Quaternion\n"
"# This represents an orientation in free space in quaternion form.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"float64 w\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/TwistWithCovariance\n"
"# This expresses velocity in free space with uncertainty.\n"
"\n"
"Twist twist\n"
"\n"
"# Row-major representation of the 6x6 covariance matrix\n"
"# The orientation parameters use a fixed-axis representation.\n"
"# In order, the parameters are:\n"
"# (x, y, z, rotation about X axis, rotation about Y axis, rotation about Z axis)\n"
"float64[36] covariance\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Twist\n"
"# This expresses velocity in free space broken into its linear and angular parts.\n"
"Vector3  linear\n"
"Vector3  angular\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Vector3\n"
"# This represents a vector in free space. \n"
"# It is only meant to represent a direction. Therefore, it does not\n"
"# make sense to apply a translation to it (e.g., when applying a \n"
"# generic rigid transformation to a Vector3, tf2 will only apply the\n"
"# rotation). If you want your data to be translatable too, use the\n"
"# geometry_msgs/Point message instead.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"================================================================================\n"
"MSG: geometry_msgs/AccelWithCovariance\n"
"# This expresses acceleration in free space with uncertainty.\n"
"\n"
"Accel accel\n"
"\n"
"# Row-major representation of the 6x6 covariance matrix\n"
"# The orientation parameters use a fixed-axis representation.\n"
"# In order, the parameters are:\n"
"# (x, y, z, rotation about X axis, rotation about Y axis, rotation about Z axis)\n"
"float64[36] covariance\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Accel\n"
"# This expresses acceleration in free space broken into its linear and angular parts.\n"
"Vector3  linear\n"
"Vector3  angular\n"
;
  }

  static const char* value(const ::cohan_msgs::TrackedAgent_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::cohan_msgs::TrackedAgent_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.track_id);
      stream.next(m.state);
      stream.next(m.type);
      stream.next(m.name);
      stream.next(m.segments);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct TrackedAgent_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::cohan_msgs::TrackedAgent_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::cohan_msgs::TrackedAgent_<ContainerAllocator>& v)
  {
    s << indent << "track_id: ";
    Printer<uint64_t>::stream(s, indent + "  ", v.track_id);
    s << indent << "state: ";
    Printer<int8_t>::stream(s, indent + "  ", v.state);
    s << indent << "type: ";
    Printer<int8_t>::stream(s, indent + "  ", v.type);
    s << indent << "name: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.name);
    s << indent << "segments[]" << std::endl;
    for (size_t i = 0; i < v.segments.size(); ++i)
    {
      s << indent << "  segments[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::cohan_msgs::TrackedSegment_<ContainerAllocator> >::stream(s, indent + "    ", v.segments[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // COHAN_MSGS_MESSAGE_TRACKEDAGENT_H
