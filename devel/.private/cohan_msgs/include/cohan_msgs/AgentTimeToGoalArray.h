// Generated by gencpp from file cohan_msgs/AgentTimeToGoalArray.msg
// DO NOT EDIT!


#ifndef COHAN_MSGS_MESSAGE_AGENTTIMETOGOALARRAY_H
#define COHAN_MSGS_MESSAGE_AGENTTIMETOGOALARRAY_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>
#include <cohan_msgs/AgentTimeToGoal.h>

namespace cohan_msgs
{
template <class ContainerAllocator>
struct AgentTimeToGoalArray_
{
  typedef AgentTimeToGoalArray_<ContainerAllocator> Type;

  AgentTimeToGoalArray_()
    : header()
    , times_to_goal()  {
    }
  AgentTimeToGoalArray_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , times_to_goal(_alloc)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef std::vector< ::cohan_msgs::AgentTimeToGoal_<ContainerAllocator> , typename std::allocator_traits<ContainerAllocator>::template rebind_alloc< ::cohan_msgs::AgentTimeToGoal_<ContainerAllocator> >> _times_to_goal_type;
  _times_to_goal_type times_to_goal;





  typedef boost::shared_ptr< ::cohan_msgs::AgentTimeToGoalArray_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::cohan_msgs::AgentTimeToGoalArray_<ContainerAllocator> const> ConstPtr;

}; // struct AgentTimeToGoalArray_

typedef ::cohan_msgs::AgentTimeToGoalArray_<std::allocator<void> > AgentTimeToGoalArray;

typedef boost::shared_ptr< ::cohan_msgs::AgentTimeToGoalArray > AgentTimeToGoalArrayPtr;
typedef boost::shared_ptr< ::cohan_msgs::AgentTimeToGoalArray const> AgentTimeToGoalArrayConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::cohan_msgs::AgentTimeToGoalArray_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::cohan_msgs::AgentTimeToGoalArray_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::cohan_msgs::AgentTimeToGoalArray_<ContainerAllocator1> & lhs, const ::cohan_msgs::AgentTimeToGoalArray_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.times_to_goal == rhs.times_to_goal;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::cohan_msgs::AgentTimeToGoalArray_<ContainerAllocator1> & lhs, const ::cohan_msgs::AgentTimeToGoalArray_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace cohan_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::cohan_msgs::AgentTimeToGoalArray_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::cohan_msgs::AgentTimeToGoalArray_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::cohan_msgs::AgentTimeToGoalArray_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::cohan_msgs::AgentTimeToGoalArray_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::cohan_msgs::AgentTimeToGoalArray_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::cohan_msgs::AgentTimeToGoalArray_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::cohan_msgs::AgentTimeToGoalArray_<ContainerAllocator> >
{
  static const char* value()
  {
    return "e2409fda334715bb8c8e0025d4e039a0";
  }

  static const char* value(const ::cohan_msgs::AgentTimeToGoalArray_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xe2409fda334715bbULL;
  static const uint64_t static_value2 = 0x8c8e0025d4e039a0ULL;
};

template<class ContainerAllocator>
struct DataType< ::cohan_msgs::AgentTimeToGoalArray_<ContainerAllocator> >
{
  static const char* value()
  {
    return "cohan_msgs/AgentTimeToGoalArray";
  }

  static const char* value(const ::cohan_msgs::AgentTimeToGoalArray_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::cohan_msgs::AgentTimeToGoalArray_<ContainerAllocator> >
{
  static const char* value()
  {
    return "std_msgs/Header             header\n"
"cohan_msgs/AgentTimeToGoal[] times_to_goal\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
"\n"
"================================================================================\n"
"MSG: cohan_msgs/AgentTimeToGoal\n"
"std_msgs/Header header\n"
"uint64          id\n"
"int8            type\n"
"duration        time_to_goal\n"
;
  }

  static const char* value(const ::cohan_msgs::AgentTimeToGoalArray_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::cohan_msgs::AgentTimeToGoalArray_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.times_to_goal);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct AgentTimeToGoalArray_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::cohan_msgs::AgentTimeToGoalArray_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::cohan_msgs::AgentTimeToGoalArray_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "times_to_goal[]" << std::endl;
    for (size_t i = 0; i < v.times_to_goal.size(); ++i)
    {
      s << indent << "  times_to_goal[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::cohan_msgs::AgentTimeToGoal_<ContainerAllocator> >::stream(s, indent + "    ", v.times_to_goal[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // COHAN_MSGS_MESSAGE_AGENTTIMETOGOALARRAY_H
