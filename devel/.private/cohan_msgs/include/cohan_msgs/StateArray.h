// Generated by gencpp from file cohan_msgs/StateArray.msg
// DO NOT EDIT!


#ifndef COHAN_MSGS_MESSAGE_STATEARRAY_H
#define COHAN_MSGS_MESSAGE_STATEARRAY_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace cohan_msgs
{
template <class ContainerAllocator>
struct StateArray_
{
  typedef StateArray_<ContainerAllocator> Type;

  StateArray_()
    : states()  {
    }
  StateArray_(const ContainerAllocator& _alloc)
    : states(_alloc)  {
  (void)_alloc;
    }



   typedef std::vector<int8_t, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<int8_t>> _states_type;
  _states_type states;





  typedef boost::shared_ptr< ::cohan_msgs::StateArray_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::cohan_msgs::StateArray_<ContainerAllocator> const> ConstPtr;

}; // struct StateArray_

typedef ::cohan_msgs::StateArray_<std::allocator<void> > StateArray;

typedef boost::shared_ptr< ::cohan_msgs::StateArray > StateArrayPtr;
typedef boost::shared_ptr< ::cohan_msgs::StateArray const> StateArrayConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::cohan_msgs::StateArray_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::cohan_msgs::StateArray_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::cohan_msgs::StateArray_<ContainerAllocator1> & lhs, const ::cohan_msgs::StateArray_<ContainerAllocator2> & rhs)
{
  return lhs.states == rhs.states;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::cohan_msgs::StateArray_<ContainerAllocator1> & lhs, const ::cohan_msgs::StateArray_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace cohan_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::cohan_msgs::StateArray_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::cohan_msgs::StateArray_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::cohan_msgs::StateArray_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::cohan_msgs::StateArray_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::cohan_msgs::StateArray_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::cohan_msgs::StateArray_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::cohan_msgs::StateArray_<ContainerAllocator> >
{
  static const char* value()
  {
    return "a75f16128abc8fcd8c322b9708a2c247";
  }

  static const char* value(const ::cohan_msgs::StateArray_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xa75f16128abc8fcdULL;
  static const uint64_t static_value2 = 0x8c322b9708a2c247ULL;
};

template<class ContainerAllocator>
struct DataType< ::cohan_msgs::StateArray_<ContainerAllocator> >
{
  static const char* value()
  {
    return "cohan_msgs/StateArray";
  }

  static const char* value(const ::cohan_msgs::StateArray_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::cohan_msgs::StateArray_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int8[] states\n"
;
  }

  static const char* value(const ::cohan_msgs::StateArray_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::cohan_msgs::StateArray_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.states);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct StateArray_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::cohan_msgs::StateArray_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::cohan_msgs::StateArray_<ContainerAllocator>& v)
  {
    s << indent << "states[]" << std::endl;
    for (size_t i = 0; i < v.states.size(); ++i)
    {
      s << indent << "  states[" << i << "]: ";
      Printer<int8_t>::stream(s, indent + "  ", v.states[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // COHAN_MSGS_MESSAGE_STATEARRAY_H
