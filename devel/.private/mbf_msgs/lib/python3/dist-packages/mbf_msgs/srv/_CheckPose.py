# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from mbf_msgs/CheckPoseRequest.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import geometry_msgs.msg
import std_msgs.msg

class CheckPoseRequest(genpy.Message):
  _md5sum = "312b073fa15803655595754203be5920"
  _type = "mbf_msgs/CheckPoseRequest"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """uint8                      LOCAL_COSTMAP  = 1
uint8                      GLOBAL_COSTMAP = 2

geometry_msgs/PoseStamped  pose              # the pose to be checked after transforming to costmap frame
float32                    safety_dist       # minimum distance allowed to the closest obstacle
float32                    lethal_cost_mult  # cost multiplier for cells marked as lethal obstacle (zero is ignored)
float32                    inscrib_cost_mult # cost multiplier for cells marked as inscribed obstacle (zero is ignored)
float32                    unknown_cost_mult # cost multiplier for cells marked as unknown space (zero is ignored)
uint8                      costmap           # costmap in which to check the pose
bool                       current_pose      # check current robot pose instead (ignores pose field)
bool                       use_padded_fp     # include footprint padding when checking cost; note that safety distance
                                             # will be measured from the padded footprint

================================================================================
MSG: geometry_msgs/PoseStamped
# A Pose with reference coordinate frame and timestamp
Header header
Pose pose

================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
string frame_id

================================================================================
MSG: geometry_msgs/Pose
# A representation of pose in free space, composed of position and orientation. 
Point position
Quaternion orientation

================================================================================
MSG: geometry_msgs/Point
# This contains the position of a point in free space
float64 x
float64 y
float64 z

================================================================================
MSG: geometry_msgs/Quaternion
# This represents an orientation in free space in quaternion form.

float64 x
float64 y
float64 z
float64 w
"""
  # Pseudo-constants
  LOCAL_COSTMAP = 1
  GLOBAL_COSTMAP = 2

  __slots__ = ['pose','safety_dist','lethal_cost_mult','inscrib_cost_mult','unknown_cost_mult','costmap','current_pose','use_padded_fp']
  _slot_types = ['geometry_msgs/PoseStamped','float32','float32','float32','float32','uint8','bool','bool']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       pose,safety_dist,lethal_cost_mult,inscrib_cost_mult,unknown_cost_mult,costmap,current_pose,use_padded_fp

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(CheckPoseRequest, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.pose is None:
        self.pose = geometry_msgs.msg.PoseStamped()
      if self.safety_dist is None:
        self.safety_dist = 0.
      if self.lethal_cost_mult is None:
        self.lethal_cost_mult = 0.
      if self.inscrib_cost_mult is None:
        self.inscrib_cost_mult = 0.
      if self.unknown_cost_mult is None:
        self.unknown_cost_mult = 0.
      if self.costmap is None:
        self.costmap = 0
      if self.current_pose is None:
        self.current_pose = False
      if self.use_padded_fp is None:
        self.use_padded_fp = False
    else:
      self.pose = geometry_msgs.msg.PoseStamped()
      self.safety_dist = 0.
      self.lethal_cost_mult = 0.
      self.inscrib_cost_mult = 0.
      self.unknown_cost_mult = 0.
      self.costmap = 0
      self.current_pose = False
      self.use_padded_fp = False

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.pose.header.seq, _x.pose.header.stamp.secs, _x.pose.header.stamp.nsecs))
      _x = self.pose.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_7d4f3B().pack(_x.pose.pose.position.x, _x.pose.pose.position.y, _x.pose.pose.position.z, _x.pose.pose.orientation.x, _x.pose.pose.orientation.y, _x.pose.pose.orientation.z, _x.pose.pose.orientation.w, _x.safety_dist, _x.lethal_cost_mult, _x.inscrib_cost_mult, _x.unknown_cost_mult, _x.costmap, _x.current_pose, _x.use_padded_fp))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.pose is None:
        self.pose = geometry_msgs.msg.PoseStamped()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.pose.header.seq, _x.pose.header.stamp.secs, _x.pose.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.pose.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.pose.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 75
      (_x.pose.pose.position.x, _x.pose.pose.position.y, _x.pose.pose.position.z, _x.pose.pose.orientation.x, _x.pose.pose.orientation.y, _x.pose.pose.orientation.z, _x.pose.pose.orientation.w, _x.safety_dist, _x.lethal_cost_mult, _x.inscrib_cost_mult, _x.unknown_cost_mult, _x.costmap, _x.current_pose, _x.use_padded_fp,) = _get_struct_7d4f3B().unpack(str[start:end])
      self.current_pose = bool(self.current_pose)
      self.use_padded_fp = bool(self.use_padded_fp)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.pose.header.seq, _x.pose.header.stamp.secs, _x.pose.header.stamp.nsecs))
      _x = self.pose.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_7d4f3B().pack(_x.pose.pose.position.x, _x.pose.pose.position.y, _x.pose.pose.position.z, _x.pose.pose.orientation.x, _x.pose.pose.orientation.y, _x.pose.pose.orientation.z, _x.pose.pose.orientation.w, _x.safety_dist, _x.lethal_cost_mult, _x.inscrib_cost_mult, _x.unknown_cost_mult, _x.costmap, _x.current_pose, _x.use_padded_fp))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.pose is None:
        self.pose = geometry_msgs.msg.PoseStamped()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.pose.header.seq, _x.pose.header.stamp.secs, _x.pose.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.pose.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.pose.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 75
      (_x.pose.pose.position.x, _x.pose.pose.position.y, _x.pose.pose.position.z, _x.pose.pose.orientation.x, _x.pose.pose.orientation.y, _x.pose.pose.orientation.z, _x.pose.pose.orientation.w, _x.safety_dist, _x.lethal_cost_mult, _x.inscrib_cost_mult, _x.unknown_cost_mult, _x.costmap, _x.current_pose, _x.use_padded_fp,) = _get_struct_7d4f3B().unpack(str[start:end])
      self.current_pose = bool(self.current_pose)
      self.use_padded_fp = bool(self.use_padded_fp)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_3I = None
def _get_struct_3I():
    global _struct_3I
    if _struct_3I is None:
        _struct_3I = struct.Struct("<3I")
    return _struct_3I
_struct_7d4f3B = None
def _get_struct_7d4f3B():
    global _struct_7d4f3B
    if _struct_7d4f3B is None:
        _struct_7d4f3B = struct.Struct("<7d4f3B")
    return _struct_7d4f3B
# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from mbf_msgs/CheckPoseResponse.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class CheckPoseResponse(genpy.Message):
  _md5sum = "d74139e1f7169aa4fb64b44c3a698692"
  _type = "mbf_msgs/CheckPoseResponse"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """uint8                      FREE      =  0    # robot is completely in traversable space
uint8                      INSCRIBED =  1    # robot is partially in inscribed space
uint8                      LETHAL    =  2    # robot is partially in collision
uint8                      UNKNOWN   =  3    # robot is partially in unknown space
uint8                      OUTSIDE   =  4    # robot is partially outside the map

uint8                      state             # pose state: FREE, INSCRIBED, LETHAL, UNKNOWN or OUTSIDE
uint32                     cost              # total cost of all cells within footprint padded by safety_dist

"""
  # Pseudo-constants
  FREE = 0
  INSCRIBED = 1
  LETHAL = 2
  UNKNOWN = 3
  OUTSIDE = 4

  __slots__ = ['state','cost']
  _slot_types = ['uint8','uint32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       state,cost

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(CheckPoseResponse, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.state is None:
        self.state = 0
      if self.cost is None:
        self.cost = 0
    else:
      self.state = 0
      self.cost = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_BI().pack(_x.state, _x.cost))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 5
      (_x.state, _x.cost,) = _get_struct_BI().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_BI().pack(_x.state, _x.cost))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 5
      (_x.state, _x.cost,) = _get_struct_BI().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_BI = None
def _get_struct_BI():
    global _struct_BI
    if _struct_BI is None:
        _struct_BI = struct.Struct("<BI")
    return _struct_BI
class CheckPose(object):
  _type          = 'mbf_msgs/CheckPose'
  _md5sum = '49306eb70b373b82a480a121a2f03a15'
  _request_class  = CheckPoseRequest
  _response_class = CheckPoseResponse
