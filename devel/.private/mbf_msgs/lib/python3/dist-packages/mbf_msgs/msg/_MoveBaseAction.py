# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from mbf_msgs/MoveBaseAction.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import actionlib_msgs.msg
import genpy
import geometry_msgs.msg
import mbf_msgs.msg
import std_msgs.msg

class MoveBaseAction(genpy.Message):
  _md5sum = "c694adfd188b941c2de8267bc024718d"
  _type = "mbf_msgs/MoveBaseAction"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======

MoveBaseActionGoal action_goal
MoveBaseActionResult action_result
MoveBaseActionFeedback action_feedback

================================================================================
MSG: mbf_msgs/MoveBaseActionGoal
# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======

Header header
actionlib_msgs/GoalID goal_id
MoveBaseGoal goal

================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
string frame_id

================================================================================
MSG: actionlib_msgs/GoalID
# The stamp should store the time at which this goal was requested.
# It is used by an action server when it tries to preempt all
# goals that were requested before a certain time
time stamp

# The id provides a way to associate feedback and
# result message with specific goal requests. The id
# specified must be unique.
string id


================================================================================
MSG: mbf_msgs/MoveBaseGoal
# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======
# Extension of move_base_msgs/MoveBase action, with more detailed result
# and feedback and the possibility to specify lists of applicable plugins

geometry_msgs/PoseStamped target_pose

# Controller to use; defaults to the first one specified on "controllers" parameter
string controller

# Inter to use; defaults to the first one specified on "inters" parameter
string inter

# Planner to use; defaults to the first one specified on "planners" parameter
string planner

# Recovery behaviors to try on case of failure; defaults to the "recovery_behaviors" parameter value
string[] recovery_behaviors


================================================================================
MSG: geometry_msgs/PoseStamped
# A Pose with reference coordinate frame and timestamp
Header header
Pose pose

================================================================================
MSG: geometry_msgs/Pose
# A representation of pose in free space, composed of position and orientation. 
Point position
Quaternion orientation

================================================================================
MSG: geometry_msgs/Point
# This contains the position of a point in free space
float64 x
float64 y
float64 z

================================================================================
MSG: geometry_msgs/Quaternion
# This represents an orientation in free space in quaternion form.

float64 x
float64 y
float64 z
float64 w

================================================================================
MSG: mbf_msgs/MoveBaseActionResult
# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======

Header header
actionlib_msgs/GoalStatus status
MoveBaseResult result

================================================================================
MSG: actionlib_msgs/GoalStatus
GoalID goal_id
uint8 status
uint8 PENDING         = 0   # The goal has yet to be processed by the action server
uint8 ACTIVE          = 1   # The goal is currently being processed by the action server
uint8 PREEMPTED       = 2   # The goal received a cancel request after it started executing
                            #   and has since completed its execution (Terminal State)
uint8 SUCCEEDED       = 3   # The goal was achieved successfully by the action server (Terminal State)
uint8 ABORTED         = 4   # The goal was aborted during execution by the action server due
                            #    to some failure (Terminal State)
uint8 REJECTED        = 5   # The goal was rejected by the action server without being processed,
                            #    because the goal was unattainable or invalid (Terminal State)
uint8 PREEMPTING      = 6   # The goal received a cancel request after it started executing
                            #    and has not yet completed execution
uint8 RECALLING       = 7   # The goal received a cancel request before it started executing,
                            #    but the action server has not yet confirmed that the goal is canceled
uint8 RECALLED        = 8   # The goal received a cancel request before it started executing
                            #    and was successfully cancelled (Terminal State)
uint8 LOST            = 9   # An action client can determine that a goal is LOST. This should not be
                            #    sent over the wire by an action server

#Allow for the user to associate a string with GoalStatus for debugging
string text


================================================================================
MSG: mbf_msgs/MoveBaseResult
# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======

# Predefined success codes:
uint8 SUCCESS           = 0

# Predefined general error codes:
uint8 FAILURE           = 10
uint8 CANCELED          = 11
uint8 COLLISION         = 12
uint8 OSCILLATION       = 13
uint8 START_BLOCKED     = 14
uint8 GOAL_BLOCKED      = 15
uint8 TF_ERROR          = 16
uint8 INTERNAL_ERROR    = 17

uint8 ERROR_RANGE_START = 10
uint8 ERROR_RANGE_END   = 49
# 21..49 are reserved for future general error codes

# Planning/controlling failures:
uint8 PLAN_FAILURE      = 50
# 51..99 are reserved as planner specific errors

uint8 CTRL_FAILURE      = 100
# 101..149 are reserved as controller specific errors

uint32 outcome
string message

# Configuration upon action completion
float32 dist_to_goal
float32 angle_to_goal
geometry_msgs/PoseStamped final_pose


================================================================================
MSG: mbf_msgs/MoveBaseActionFeedback
# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======

Header header
actionlib_msgs/GoalStatus status
MoveBaseFeedback feedback

================================================================================
MSG: mbf_msgs/MoveBaseFeedback
# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======

# Outcome of most recent controller cycle. Same values as in MoveBase or ExePath result
uint32 outcome
string message

float32 dist_to_goal
float32 angle_to_goal
geometry_msgs/PoseStamped current_pose
geometry_msgs/TwistStamped last_cmd_vel  # last command calculated by the controller


================================================================================
MSG: geometry_msgs/TwistStamped
# A twist with reference coordinate frame and timestamp
Header header
Twist twist

================================================================================
MSG: geometry_msgs/Twist
# This expresses velocity in free space broken into its linear and angular parts.
Vector3  linear
Vector3  angular

================================================================================
MSG: geometry_msgs/Vector3
# This represents a vector in free space. 
# It is only meant to represent a direction. Therefore, it does not
# make sense to apply a translation to it (e.g., when applying a 
# generic rigid transformation to a Vector3, tf2 will only apply the
# rotation). If you want your data to be translatable too, use the
# geometry_msgs/Point message instead.

float64 x
float64 y
float64 z"""
  __slots__ = ['action_goal','action_result','action_feedback']
  _slot_types = ['mbf_msgs/MoveBaseActionGoal','mbf_msgs/MoveBaseActionResult','mbf_msgs/MoveBaseActionFeedback']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       action_goal,action_result,action_feedback

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(MoveBaseAction, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.action_goal is None:
        self.action_goal = mbf_msgs.msg.MoveBaseActionGoal()
      if self.action_result is None:
        self.action_result = mbf_msgs.msg.MoveBaseActionResult()
      if self.action_feedback is None:
        self.action_feedback = mbf_msgs.msg.MoveBaseActionFeedback()
    else:
      self.action_goal = mbf_msgs.msg.MoveBaseActionGoal()
      self.action_result = mbf_msgs.msg.MoveBaseActionResult()
      self.action_feedback = mbf_msgs.msg.MoveBaseActionFeedback()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.action_goal.header.seq, _x.action_goal.header.stamp.secs, _x.action_goal.header.stamp.nsecs))
      _x = self.action_goal.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_2I().pack(_x.action_goal.goal_id.stamp.secs, _x.action_goal.goal_id.stamp.nsecs))
      _x = self.action_goal.goal_id.id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_3I().pack(_x.action_goal.goal.target_pose.header.seq, _x.action_goal.goal.target_pose.header.stamp.secs, _x.action_goal.goal.target_pose.header.stamp.nsecs))
      _x = self.action_goal.goal.target_pose.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_7d().pack(_x.action_goal.goal.target_pose.pose.position.x, _x.action_goal.goal.target_pose.pose.position.y, _x.action_goal.goal.target_pose.pose.position.z, _x.action_goal.goal.target_pose.pose.orientation.x, _x.action_goal.goal.target_pose.pose.orientation.y, _x.action_goal.goal.target_pose.pose.orientation.z, _x.action_goal.goal.target_pose.pose.orientation.w))
      _x = self.action_goal.goal.controller
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.action_goal.goal.inter
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.action_goal.goal.planner
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      length = len(self.action_goal.goal.recovery_behaviors)
      buff.write(_struct_I.pack(length))
      for val1 in self.action_goal.goal.recovery_behaviors:
        length = len(val1)
        if python3 or type(val1) == unicode:
          val1 = val1.encode('utf-8')
          length = len(val1)
        buff.write(struct.Struct('<I%ss'%length).pack(length, val1))
      _x = self
      buff.write(_get_struct_3I().pack(_x.action_result.header.seq, _x.action_result.header.stamp.secs, _x.action_result.header.stamp.nsecs))
      _x = self.action_result.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_2I().pack(_x.action_result.status.goal_id.stamp.secs, _x.action_result.status.goal_id.stamp.nsecs))
      _x = self.action_result.status.goal_id.id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.action_result.status.status
      buff.write(_get_struct_B().pack(_x))
      _x = self.action_result.status.text
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.action_result.result.outcome
      buff.write(_get_struct_I().pack(_x))
      _x = self.action_result.result.message
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_2f3I().pack(_x.action_result.result.dist_to_goal, _x.action_result.result.angle_to_goal, _x.action_result.result.final_pose.header.seq, _x.action_result.result.final_pose.header.stamp.secs, _x.action_result.result.final_pose.header.stamp.nsecs))
      _x = self.action_result.result.final_pose.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_7d3I().pack(_x.action_result.result.final_pose.pose.position.x, _x.action_result.result.final_pose.pose.position.y, _x.action_result.result.final_pose.pose.position.z, _x.action_result.result.final_pose.pose.orientation.x, _x.action_result.result.final_pose.pose.orientation.y, _x.action_result.result.final_pose.pose.orientation.z, _x.action_result.result.final_pose.pose.orientation.w, _x.action_feedback.header.seq, _x.action_feedback.header.stamp.secs, _x.action_feedback.header.stamp.nsecs))
      _x = self.action_feedback.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_2I().pack(_x.action_feedback.status.goal_id.stamp.secs, _x.action_feedback.status.goal_id.stamp.nsecs))
      _x = self.action_feedback.status.goal_id.id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.action_feedback.status.status
      buff.write(_get_struct_B().pack(_x))
      _x = self.action_feedback.status.text
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.action_feedback.feedback.outcome
      buff.write(_get_struct_I().pack(_x))
      _x = self.action_feedback.feedback.message
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_2f3I().pack(_x.action_feedback.feedback.dist_to_goal, _x.action_feedback.feedback.angle_to_goal, _x.action_feedback.feedback.current_pose.header.seq, _x.action_feedback.feedback.current_pose.header.stamp.secs, _x.action_feedback.feedback.current_pose.header.stamp.nsecs))
      _x = self.action_feedback.feedback.current_pose.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_7d3I().pack(_x.action_feedback.feedback.current_pose.pose.position.x, _x.action_feedback.feedback.current_pose.pose.position.y, _x.action_feedback.feedback.current_pose.pose.position.z, _x.action_feedback.feedback.current_pose.pose.orientation.x, _x.action_feedback.feedback.current_pose.pose.orientation.y, _x.action_feedback.feedback.current_pose.pose.orientation.z, _x.action_feedback.feedback.current_pose.pose.orientation.w, _x.action_feedback.feedback.last_cmd_vel.header.seq, _x.action_feedback.feedback.last_cmd_vel.header.stamp.secs, _x.action_feedback.feedback.last_cmd_vel.header.stamp.nsecs))
      _x = self.action_feedback.feedback.last_cmd_vel.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_6d().pack(_x.action_feedback.feedback.last_cmd_vel.twist.linear.x, _x.action_feedback.feedback.last_cmd_vel.twist.linear.y, _x.action_feedback.feedback.last_cmd_vel.twist.linear.z, _x.action_feedback.feedback.last_cmd_vel.twist.angular.x, _x.action_feedback.feedback.last_cmd_vel.twist.angular.y, _x.action_feedback.feedback.last_cmd_vel.twist.angular.z))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.action_goal is None:
        self.action_goal = mbf_msgs.msg.MoveBaseActionGoal()
      if self.action_result is None:
        self.action_result = mbf_msgs.msg.MoveBaseActionResult()
      if self.action_feedback is None:
        self.action_feedback = mbf_msgs.msg.MoveBaseActionFeedback()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.action_goal.header.seq, _x.action_goal.header.stamp.secs, _x.action_goal.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_goal.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.action_goal.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 8
      (_x.action_goal.goal_id.stamp.secs, _x.action_goal.goal_id.stamp.nsecs,) = _get_struct_2I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_goal.goal_id.id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.action_goal.goal_id.id = str[start:end]
      _x = self
      start = end
      end += 12
      (_x.action_goal.goal.target_pose.header.seq, _x.action_goal.goal.target_pose.header.stamp.secs, _x.action_goal.goal.target_pose.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_goal.goal.target_pose.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.action_goal.goal.target_pose.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 56
      (_x.action_goal.goal.target_pose.pose.position.x, _x.action_goal.goal.target_pose.pose.position.y, _x.action_goal.goal.target_pose.pose.position.z, _x.action_goal.goal.target_pose.pose.orientation.x, _x.action_goal.goal.target_pose.pose.orientation.y, _x.action_goal.goal.target_pose.pose.orientation.z, _x.action_goal.goal.target_pose.pose.orientation.w,) = _get_struct_7d().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_goal.goal.controller = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.action_goal.goal.controller = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_goal.goal.inter = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.action_goal.goal.inter = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_goal.goal.planner = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.action_goal.goal.planner = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.action_goal.goal.recovery_behaviors = []
      for i in range(0, length):
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1 = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1 = str[start:end]
        self.action_goal.goal.recovery_behaviors.append(val1)
      _x = self
      start = end
      end += 12
      (_x.action_result.header.seq, _x.action_result.header.stamp.secs, _x.action_result.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_result.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.action_result.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 8
      (_x.action_result.status.goal_id.stamp.secs, _x.action_result.status.goal_id.stamp.nsecs,) = _get_struct_2I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_result.status.goal_id.id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.action_result.status.goal_id.id = str[start:end]
      start = end
      end += 1
      (self.action_result.status.status,) = _get_struct_B().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_result.status.text = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.action_result.status.text = str[start:end]
      start = end
      end += 4
      (self.action_result.result.outcome,) = _get_struct_I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_result.result.message = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.action_result.result.message = str[start:end]
      _x = self
      start = end
      end += 20
      (_x.action_result.result.dist_to_goal, _x.action_result.result.angle_to_goal, _x.action_result.result.final_pose.header.seq, _x.action_result.result.final_pose.header.stamp.secs, _x.action_result.result.final_pose.header.stamp.nsecs,) = _get_struct_2f3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_result.result.final_pose.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.action_result.result.final_pose.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 68
      (_x.action_result.result.final_pose.pose.position.x, _x.action_result.result.final_pose.pose.position.y, _x.action_result.result.final_pose.pose.position.z, _x.action_result.result.final_pose.pose.orientation.x, _x.action_result.result.final_pose.pose.orientation.y, _x.action_result.result.final_pose.pose.orientation.z, _x.action_result.result.final_pose.pose.orientation.w, _x.action_feedback.header.seq, _x.action_feedback.header.stamp.secs, _x.action_feedback.header.stamp.nsecs,) = _get_struct_7d3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_feedback.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.action_feedback.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 8
      (_x.action_feedback.status.goal_id.stamp.secs, _x.action_feedback.status.goal_id.stamp.nsecs,) = _get_struct_2I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_feedback.status.goal_id.id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.action_feedback.status.goal_id.id = str[start:end]
      start = end
      end += 1
      (self.action_feedback.status.status,) = _get_struct_B().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_feedback.status.text = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.action_feedback.status.text = str[start:end]
      start = end
      end += 4
      (self.action_feedback.feedback.outcome,) = _get_struct_I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_feedback.feedback.message = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.action_feedback.feedback.message = str[start:end]
      _x = self
      start = end
      end += 20
      (_x.action_feedback.feedback.dist_to_goal, _x.action_feedback.feedback.angle_to_goal, _x.action_feedback.feedback.current_pose.header.seq, _x.action_feedback.feedback.current_pose.header.stamp.secs, _x.action_feedback.feedback.current_pose.header.stamp.nsecs,) = _get_struct_2f3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_feedback.feedback.current_pose.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.action_feedback.feedback.current_pose.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 68
      (_x.action_feedback.feedback.current_pose.pose.position.x, _x.action_feedback.feedback.current_pose.pose.position.y, _x.action_feedback.feedback.current_pose.pose.position.z, _x.action_feedback.feedback.current_pose.pose.orientation.x, _x.action_feedback.feedback.current_pose.pose.orientation.y, _x.action_feedback.feedback.current_pose.pose.orientation.z, _x.action_feedback.feedback.current_pose.pose.orientation.w, _x.action_feedback.feedback.last_cmd_vel.header.seq, _x.action_feedback.feedback.last_cmd_vel.header.stamp.secs, _x.action_feedback.feedback.last_cmd_vel.header.stamp.nsecs,) = _get_struct_7d3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_feedback.feedback.last_cmd_vel.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.action_feedback.feedback.last_cmd_vel.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 48
      (_x.action_feedback.feedback.last_cmd_vel.twist.linear.x, _x.action_feedback.feedback.last_cmd_vel.twist.linear.y, _x.action_feedback.feedback.last_cmd_vel.twist.linear.z, _x.action_feedback.feedback.last_cmd_vel.twist.angular.x, _x.action_feedback.feedback.last_cmd_vel.twist.angular.y, _x.action_feedback.feedback.last_cmd_vel.twist.angular.z,) = _get_struct_6d().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.action_goal.header.seq, _x.action_goal.header.stamp.secs, _x.action_goal.header.stamp.nsecs))
      _x = self.action_goal.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_2I().pack(_x.action_goal.goal_id.stamp.secs, _x.action_goal.goal_id.stamp.nsecs))
      _x = self.action_goal.goal_id.id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_3I().pack(_x.action_goal.goal.target_pose.header.seq, _x.action_goal.goal.target_pose.header.stamp.secs, _x.action_goal.goal.target_pose.header.stamp.nsecs))
      _x = self.action_goal.goal.target_pose.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_7d().pack(_x.action_goal.goal.target_pose.pose.position.x, _x.action_goal.goal.target_pose.pose.position.y, _x.action_goal.goal.target_pose.pose.position.z, _x.action_goal.goal.target_pose.pose.orientation.x, _x.action_goal.goal.target_pose.pose.orientation.y, _x.action_goal.goal.target_pose.pose.orientation.z, _x.action_goal.goal.target_pose.pose.orientation.w))
      _x = self.action_goal.goal.controller
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.action_goal.goal.inter
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.action_goal.goal.planner
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      length = len(self.action_goal.goal.recovery_behaviors)
      buff.write(_struct_I.pack(length))
      for val1 in self.action_goal.goal.recovery_behaviors:
        length = len(val1)
        if python3 or type(val1) == unicode:
          val1 = val1.encode('utf-8')
          length = len(val1)
        buff.write(struct.Struct('<I%ss'%length).pack(length, val1))
      _x = self
      buff.write(_get_struct_3I().pack(_x.action_result.header.seq, _x.action_result.header.stamp.secs, _x.action_result.header.stamp.nsecs))
      _x = self.action_result.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_2I().pack(_x.action_result.status.goal_id.stamp.secs, _x.action_result.status.goal_id.stamp.nsecs))
      _x = self.action_result.status.goal_id.id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.action_result.status.status
      buff.write(_get_struct_B().pack(_x))
      _x = self.action_result.status.text
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.action_result.result.outcome
      buff.write(_get_struct_I().pack(_x))
      _x = self.action_result.result.message
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_2f3I().pack(_x.action_result.result.dist_to_goal, _x.action_result.result.angle_to_goal, _x.action_result.result.final_pose.header.seq, _x.action_result.result.final_pose.header.stamp.secs, _x.action_result.result.final_pose.header.stamp.nsecs))
      _x = self.action_result.result.final_pose.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_7d3I().pack(_x.action_result.result.final_pose.pose.position.x, _x.action_result.result.final_pose.pose.position.y, _x.action_result.result.final_pose.pose.position.z, _x.action_result.result.final_pose.pose.orientation.x, _x.action_result.result.final_pose.pose.orientation.y, _x.action_result.result.final_pose.pose.orientation.z, _x.action_result.result.final_pose.pose.orientation.w, _x.action_feedback.header.seq, _x.action_feedback.header.stamp.secs, _x.action_feedback.header.stamp.nsecs))
      _x = self.action_feedback.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_2I().pack(_x.action_feedback.status.goal_id.stamp.secs, _x.action_feedback.status.goal_id.stamp.nsecs))
      _x = self.action_feedback.status.goal_id.id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.action_feedback.status.status
      buff.write(_get_struct_B().pack(_x))
      _x = self.action_feedback.status.text
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.action_feedback.feedback.outcome
      buff.write(_get_struct_I().pack(_x))
      _x = self.action_feedback.feedback.message
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_2f3I().pack(_x.action_feedback.feedback.dist_to_goal, _x.action_feedback.feedback.angle_to_goal, _x.action_feedback.feedback.current_pose.header.seq, _x.action_feedback.feedback.current_pose.header.stamp.secs, _x.action_feedback.feedback.current_pose.header.stamp.nsecs))
      _x = self.action_feedback.feedback.current_pose.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_7d3I().pack(_x.action_feedback.feedback.current_pose.pose.position.x, _x.action_feedback.feedback.current_pose.pose.position.y, _x.action_feedback.feedback.current_pose.pose.position.z, _x.action_feedback.feedback.current_pose.pose.orientation.x, _x.action_feedback.feedback.current_pose.pose.orientation.y, _x.action_feedback.feedback.current_pose.pose.orientation.z, _x.action_feedback.feedback.current_pose.pose.orientation.w, _x.action_feedback.feedback.last_cmd_vel.header.seq, _x.action_feedback.feedback.last_cmd_vel.header.stamp.secs, _x.action_feedback.feedback.last_cmd_vel.header.stamp.nsecs))
      _x = self.action_feedback.feedback.last_cmd_vel.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_6d().pack(_x.action_feedback.feedback.last_cmd_vel.twist.linear.x, _x.action_feedback.feedback.last_cmd_vel.twist.linear.y, _x.action_feedback.feedback.last_cmd_vel.twist.linear.z, _x.action_feedback.feedback.last_cmd_vel.twist.angular.x, _x.action_feedback.feedback.last_cmd_vel.twist.angular.y, _x.action_feedback.feedback.last_cmd_vel.twist.angular.z))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.action_goal is None:
        self.action_goal = mbf_msgs.msg.MoveBaseActionGoal()
      if self.action_result is None:
        self.action_result = mbf_msgs.msg.MoveBaseActionResult()
      if self.action_feedback is None:
        self.action_feedback = mbf_msgs.msg.MoveBaseActionFeedback()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.action_goal.header.seq, _x.action_goal.header.stamp.secs, _x.action_goal.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_goal.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.action_goal.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 8
      (_x.action_goal.goal_id.stamp.secs, _x.action_goal.goal_id.stamp.nsecs,) = _get_struct_2I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_goal.goal_id.id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.action_goal.goal_id.id = str[start:end]
      _x = self
      start = end
      end += 12
      (_x.action_goal.goal.target_pose.header.seq, _x.action_goal.goal.target_pose.header.stamp.secs, _x.action_goal.goal.target_pose.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_goal.goal.target_pose.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.action_goal.goal.target_pose.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 56
      (_x.action_goal.goal.target_pose.pose.position.x, _x.action_goal.goal.target_pose.pose.position.y, _x.action_goal.goal.target_pose.pose.position.z, _x.action_goal.goal.target_pose.pose.orientation.x, _x.action_goal.goal.target_pose.pose.orientation.y, _x.action_goal.goal.target_pose.pose.orientation.z, _x.action_goal.goal.target_pose.pose.orientation.w,) = _get_struct_7d().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_goal.goal.controller = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.action_goal.goal.controller = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_goal.goal.inter = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.action_goal.goal.inter = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_goal.goal.planner = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.action_goal.goal.planner = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.action_goal.goal.recovery_behaviors = []
      for i in range(0, length):
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1 = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1 = str[start:end]
        self.action_goal.goal.recovery_behaviors.append(val1)
      _x = self
      start = end
      end += 12
      (_x.action_result.header.seq, _x.action_result.header.stamp.secs, _x.action_result.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_result.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.action_result.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 8
      (_x.action_result.status.goal_id.stamp.secs, _x.action_result.status.goal_id.stamp.nsecs,) = _get_struct_2I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_result.status.goal_id.id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.action_result.status.goal_id.id = str[start:end]
      start = end
      end += 1
      (self.action_result.status.status,) = _get_struct_B().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_result.status.text = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.action_result.status.text = str[start:end]
      start = end
      end += 4
      (self.action_result.result.outcome,) = _get_struct_I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_result.result.message = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.action_result.result.message = str[start:end]
      _x = self
      start = end
      end += 20
      (_x.action_result.result.dist_to_goal, _x.action_result.result.angle_to_goal, _x.action_result.result.final_pose.header.seq, _x.action_result.result.final_pose.header.stamp.secs, _x.action_result.result.final_pose.header.stamp.nsecs,) = _get_struct_2f3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_result.result.final_pose.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.action_result.result.final_pose.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 68
      (_x.action_result.result.final_pose.pose.position.x, _x.action_result.result.final_pose.pose.position.y, _x.action_result.result.final_pose.pose.position.z, _x.action_result.result.final_pose.pose.orientation.x, _x.action_result.result.final_pose.pose.orientation.y, _x.action_result.result.final_pose.pose.orientation.z, _x.action_result.result.final_pose.pose.orientation.w, _x.action_feedback.header.seq, _x.action_feedback.header.stamp.secs, _x.action_feedback.header.stamp.nsecs,) = _get_struct_7d3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_feedback.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.action_feedback.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 8
      (_x.action_feedback.status.goal_id.stamp.secs, _x.action_feedback.status.goal_id.stamp.nsecs,) = _get_struct_2I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_feedback.status.goal_id.id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.action_feedback.status.goal_id.id = str[start:end]
      start = end
      end += 1
      (self.action_feedback.status.status,) = _get_struct_B().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_feedback.status.text = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.action_feedback.status.text = str[start:end]
      start = end
      end += 4
      (self.action_feedback.feedback.outcome,) = _get_struct_I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_feedback.feedback.message = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.action_feedback.feedback.message = str[start:end]
      _x = self
      start = end
      end += 20
      (_x.action_feedback.feedback.dist_to_goal, _x.action_feedback.feedback.angle_to_goal, _x.action_feedback.feedback.current_pose.header.seq, _x.action_feedback.feedback.current_pose.header.stamp.secs, _x.action_feedback.feedback.current_pose.header.stamp.nsecs,) = _get_struct_2f3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_feedback.feedback.current_pose.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.action_feedback.feedback.current_pose.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 68
      (_x.action_feedback.feedback.current_pose.pose.position.x, _x.action_feedback.feedback.current_pose.pose.position.y, _x.action_feedback.feedback.current_pose.pose.position.z, _x.action_feedback.feedback.current_pose.pose.orientation.x, _x.action_feedback.feedback.current_pose.pose.orientation.y, _x.action_feedback.feedback.current_pose.pose.orientation.z, _x.action_feedback.feedback.current_pose.pose.orientation.w, _x.action_feedback.feedback.last_cmd_vel.header.seq, _x.action_feedback.feedback.last_cmd_vel.header.stamp.secs, _x.action_feedback.feedback.last_cmd_vel.header.stamp.nsecs,) = _get_struct_7d3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_feedback.feedback.last_cmd_vel.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.action_feedback.feedback.last_cmd_vel.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 48
      (_x.action_feedback.feedback.last_cmd_vel.twist.linear.x, _x.action_feedback.feedback.last_cmd_vel.twist.linear.y, _x.action_feedback.feedback.last_cmd_vel.twist.linear.z, _x.action_feedback.feedback.last_cmd_vel.twist.angular.x, _x.action_feedback.feedback.last_cmd_vel.twist.angular.y, _x.action_feedback.feedback.last_cmd_vel.twist.angular.z,) = _get_struct_6d().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2I = None
def _get_struct_2I():
    global _struct_2I
    if _struct_2I is None:
        _struct_2I = struct.Struct("<2I")
    return _struct_2I
_struct_2f3I = None
def _get_struct_2f3I():
    global _struct_2f3I
    if _struct_2f3I is None:
        _struct_2f3I = struct.Struct("<2f3I")
    return _struct_2f3I
_struct_3I = None
def _get_struct_3I():
    global _struct_3I
    if _struct_3I is None:
        _struct_3I = struct.Struct("<3I")
    return _struct_3I
_struct_6d = None
def _get_struct_6d():
    global _struct_6d
    if _struct_6d is None:
        _struct_6d = struct.Struct("<6d")
    return _struct_6d
_struct_7d = None
def _get_struct_7d():
    global _struct_7d
    if _struct_7d is None:
        _struct_7d = struct.Struct("<7d")
    return _struct_7d
_struct_7d3I = None
def _get_struct_7d3I():
    global _struct_7d3I
    if _struct_7d3I is None:
        _struct_7d3I = struct.Struct("<7d3I")
    return _struct_7d3I
_struct_B = None
def _get_struct_B():
    global _struct_B
    if _struct_B is None:
        _struct_B = struct.Struct("<B")
    return _struct_B
