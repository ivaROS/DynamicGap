# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from mbf_msgs/ExePathResult.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import geometry_msgs.msg
import std_msgs.msg

class ExePathResult(genpy.Message):
  _md5sum = "24db3f9a645000fb596fe385d5c7c643"
  _type = "mbf_msgs/ExePathResult"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======

# Predefined success codes:
uint8 SUCCESS           = 0
# 1..9 are reserved as plugin specific non-error results

# Predefined error codes:
uint8 FAILURE           = 100  # Unspecified failure, only used for old, non-mfb_core based plugins
uint8 CANCELED          = 101
uint8 NO_VALID_CMD      = 102
uint8 PAT_EXCEEDED      = 103
uint8 COLLISION         = 104
uint8 OSCILLATION       = 105
uint8 ROBOT_STUCK       = 106  # The robot is not obeying the commanded velocity
uint8 MISSED_GOAL       = 107  # The robot has overshot the goal and cannot reach it anymore
uint8 MISSED_PATH       = 108  # The robot has diverged from the path and cannot rejoin it
uint8 BLOCKED_GOAL      = 109  # There's an obstacle at the goal
uint8 BLOCKED_PATH      = 110  # There's an obstacle on the path
uint8 INVALID_PATH      = 111
uint8 TF_ERROR          = 112
uint8 NOT_INITIALIZED   = 113
uint8 INVALID_PLUGIN    = 114
uint8 INTERNAL_ERROR    = 115
uint8 OUT_OF_MAP        = 116  # The start and / or the goal are outside the map
uint8 MAP_ERROR         = 117  # The map is not available or not running properly
uint8 STOPPED           = 118  # The controller execution has been stopped rigorously

uint8 ERROR_RANGE_START = 100
uint8 ERROR_RANGE_END   = 149

# 121..149 are reserved as plugin specific errors:
uint8 PLUGIN_ERROR_RANGE_START = 121
uint8 PLUGIN_ERROR_RANGE_END   = 149

uint32 outcome
string message

geometry_msgs/PoseStamped  final_pose
float32 dist_to_goal
float32 angle_to_goal


================================================================================
MSG: geometry_msgs/PoseStamped
# A Pose with reference coordinate frame and timestamp
Header header
Pose pose

================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
string frame_id

================================================================================
MSG: geometry_msgs/Pose
# A representation of pose in free space, composed of position and orientation. 
Point position
Quaternion orientation

================================================================================
MSG: geometry_msgs/Point
# This contains the position of a point in free space
float64 x
float64 y
float64 z

================================================================================
MSG: geometry_msgs/Quaternion
# This represents an orientation in free space in quaternion form.

float64 x
float64 y
float64 z
float64 w
"""
  # Pseudo-constants
  SUCCESS = 0
  FAILURE = 100
  CANCELED = 101
  NO_VALID_CMD = 102
  PAT_EXCEEDED = 103
  COLLISION = 104
  OSCILLATION = 105
  ROBOT_STUCK = 106
  MISSED_GOAL = 107
  MISSED_PATH = 108
  BLOCKED_GOAL = 109
  BLOCKED_PATH = 110
  INVALID_PATH = 111
  TF_ERROR = 112
  NOT_INITIALIZED = 113
  INVALID_PLUGIN = 114
  INTERNAL_ERROR = 115
  OUT_OF_MAP = 116
  MAP_ERROR = 117
  STOPPED = 118
  ERROR_RANGE_START = 100
  ERROR_RANGE_END = 149
  PLUGIN_ERROR_RANGE_START = 121
  PLUGIN_ERROR_RANGE_END = 149

  __slots__ = ['outcome','message','final_pose','dist_to_goal','angle_to_goal']
  _slot_types = ['uint32','string','geometry_msgs/PoseStamped','float32','float32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       outcome,message,final_pose,dist_to_goal,angle_to_goal

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(ExePathResult, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.outcome is None:
        self.outcome = 0
      if self.message is None:
        self.message = ''
      if self.final_pose is None:
        self.final_pose = geometry_msgs.msg.PoseStamped()
      if self.dist_to_goal is None:
        self.dist_to_goal = 0.
      if self.angle_to_goal is None:
        self.angle_to_goal = 0.
    else:
      self.outcome = 0
      self.message = ''
      self.final_pose = geometry_msgs.msg.PoseStamped()
      self.dist_to_goal = 0.
      self.angle_to_goal = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self.outcome
      buff.write(_get_struct_I().pack(_x))
      _x = self.message
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_3I().pack(_x.final_pose.header.seq, _x.final_pose.header.stamp.secs, _x.final_pose.header.stamp.nsecs))
      _x = self.final_pose.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_7d2f().pack(_x.final_pose.pose.position.x, _x.final_pose.pose.position.y, _x.final_pose.pose.position.z, _x.final_pose.pose.orientation.x, _x.final_pose.pose.orientation.y, _x.final_pose.pose.orientation.z, _x.final_pose.pose.orientation.w, _x.dist_to_goal, _x.angle_to_goal))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.final_pose is None:
        self.final_pose = geometry_msgs.msg.PoseStamped()
      end = 0
      start = end
      end += 4
      (self.outcome,) = _get_struct_I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.message = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.message = str[start:end]
      _x = self
      start = end
      end += 12
      (_x.final_pose.header.seq, _x.final_pose.header.stamp.secs, _x.final_pose.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.final_pose.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.final_pose.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 64
      (_x.final_pose.pose.position.x, _x.final_pose.pose.position.y, _x.final_pose.pose.position.z, _x.final_pose.pose.orientation.x, _x.final_pose.pose.orientation.y, _x.final_pose.pose.orientation.z, _x.final_pose.pose.orientation.w, _x.dist_to_goal, _x.angle_to_goal,) = _get_struct_7d2f().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self.outcome
      buff.write(_get_struct_I().pack(_x))
      _x = self.message
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_3I().pack(_x.final_pose.header.seq, _x.final_pose.header.stamp.secs, _x.final_pose.header.stamp.nsecs))
      _x = self.final_pose.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_7d2f().pack(_x.final_pose.pose.position.x, _x.final_pose.pose.position.y, _x.final_pose.pose.position.z, _x.final_pose.pose.orientation.x, _x.final_pose.pose.orientation.y, _x.final_pose.pose.orientation.z, _x.final_pose.pose.orientation.w, _x.dist_to_goal, _x.angle_to_goal))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.final_pose is None:
        self.final_pose = geometry_msgs.msg.PoseStamped()
      end = 0
      start = end
      end += 4
      (self.outcome,) = _get_struct_I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.message = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.message = str[start:end]
      _x = self
      start = end
      end += 12
      (_x.final_pose.header.seq, _x.final_pose.header.stamp.secs, _x.final_pose.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.final_pose.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.final_pose.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 64
      (_x.final_pose.pose.position.x, _x.final_pose.pose.position.y, _x.final_pose.pose.position.z, _x.final_pose.pose.orientation.x, _x.final_pose.pose.orientation.y, _x.final_pose.pose.orientation.z, _x.final_pose.pose.orientation.w, _x.dist_to_goal, _x.angle_to_goal,) = _get_struct_7d2f().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_3I = None
def _get_struct_3I():
    global _struct_3I
    if _struct_3I is None:
        _struct_3I = struct.Struct("<3I")
    return _struct_3I
_struct_7d2f = None
def _get_struct_7d2f():
    global _struct_7d2f
    if _struct_7d2f is None:
        _struct_7d2f = struct.Struct("<7d2f")
    return _struct_7d2f
