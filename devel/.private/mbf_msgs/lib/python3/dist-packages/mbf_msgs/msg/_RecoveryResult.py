# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from mbf_msgs/RecoveryResult.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class RecoveryResult(genpy.Message):
  _md5sum = "f2dbeb867260dd0ca4b4e89517466f94"
  _type = "mbf_msgs/RecoveryResult"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======

# Predefined success codes:
uint8 SUCCESS           = 0

# Possible server codes:
uint8 FAILURE           = 150
uint8 CANCELED          = 151
uint8 PAT_EXCEEDED      = 152
uint8 TF_ERROR          = 153
uint8 NOT_INITIALIZED   = 154
uint8 INVALID_PLUGIN    = 155
uint8 INTERNAL_ERROR    = 156
uint8 STOPPED           = 157  # The recovery behaviour execution has been stopped rigorously
uint8 IMPASSABLE        = 158  # Further execution would lead to a collision

uint8 ERROR_RANGE_START = 150
uint8 ERROR_RANGE_END   = 199

# 171..199 are reserved as plugin specific errors:
uint8 PLUGIN_ERROR_RANGE_START = 171
uint8 PLUGIN_ERROR_RANGE_END   = 199

uint32 outcome
string message
string used_plugin

"""
  # Pseudo-constants
  SUCCESS = 0
  FAILURE = 150
  CANCELED = 151
  PAT_EXCEEDED = 152
  TF_ERROR = 153
  NOT_INITIALIZED = 154
  INVALID_PLUGIN = 155
  INTERNAL_ERROR = 156
  STOPPED = 157
  IMPASSABLE = 158
  ERROR_RANGE_START = 150
  ERROR_RANGE_END = 199
  PLUGIN_ERROR_RANGE_START = 171
  PLUGIN_ERROR_RANGE_END = 199

  __slots__ = ['outcome','message','used_plugin']
  _slot_types = ['uint32','string','string']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       outcome,message,used_plugin

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(RecoveryResult, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.outcome is None:
        self.outcome = 0
      if self.message is None:
        self.message = ''
      if self.used_plugin is None:
        self.used_plugin = ''
    else:
      self.outcome = 0
      self.message = ''
      self.used_plugin = ''

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self.outcome
      buff.write(_get_struct_I().pack(_x))
      _x = self.message
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.used_plugin
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      start = end
      end += 4
      (self.outcome,) = _get_struct_I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.message = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.message = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.used_plugin = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.used_plugin = str[start:end]
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self.outcome
      buff.write(_get_struct_I().pack(_x))
      _x = self.message
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.used_plugin
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      start = end
      end += 4
      (self.outcome,) = _get_struct_I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.message = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.message = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.used_plugin = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.used_plugin = str[start:end]
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
