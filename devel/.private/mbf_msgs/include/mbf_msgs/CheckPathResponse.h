// Generated by gencpp from file mbf_msgs/CheckPathResponse.msg
// DO NOT EDIT!


#ifndef MBF_MSGS_MESSAGE_CHECKPATHRESPONSE_H
#define MBF_MSGS_MESSAGE_CHECKPATHRESPONSE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace mbf_msgs
{
template <class ContainerAllocator>
struct CheckPathResponse_
{
  typedef CheckPathResponse_<ContainerAllocator> Type;

  CheckPathResponse_()
    : last_checked(0)
    , state(0)
    , cost(0)  {
    }
  CheckPathResponse_(const ContainerAllocator& _alloc)
    : last_checked(0)
    , state(0)
    , cost(0)  {
  (void)_alloc;
    }



   typedef uint32_t _last_checked_type;
  _last_checked_type last_checked;

   typedef uint8_t _state_type;
  _state_type state;

   typedef uint32_t _cost_type;
  _cost_type cost;



// reducing the odds to have name collisions with Windows.h 
#if defined(_WIN32) && defined(FREE)
  #undef FREE
#endif
#if defined(_WIN32) && defined(INSCRIBED)
  #undef INSCRIBED
#endif
#if defined(_WIN32) && defined(LETHAL)
  #undef LETHAL
#endif
#if defined(_WIN32) && defined(UNKNOWN)
  #undef UNKNOWN
#endif
#if defined(_WIN32) && defined(OUTSIDE)
  #undef OUTSIDE
#endif

  enum {
    FREE = 0u,
    INSCRIBED = 1u,
    LETHAL = 2u,
    UNKNOWN = 3u,
    OUTSIDE = 4u,
  };


  typedef boost::shared_ptr< ::mbf_msgs::CheckPathResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::mbf_msgs::CheckPathResponse_<ContainerAllocator> const> ConstPtr;

}; // struct CheckPathResponse_

typedef ::mbf_msgs::CheckPathResponse_<std::allocator<void> > CheckPathResponse;

typedef boost::shared_ptr< ::mbf_msgs::CheckPathResponse > CheckPathResponsePtr;
typedef boost::shared_ptr< ::mbf_msgs::CheckPathResponse const> CheckPathResponseConstPtr;

// constants requiring out of line definition

   

   

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::mbf_msgs::CheckPathResponse_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::mbf_msgs::CheckPathResponse_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::mbf_msgs::CheckPathResponse_<ContainerAllocator1> & lhs, const ::mbf_msgs::CheckPathResponse_<ContainerAllocator2> & rhs)
{
  return lhs.last_checked == rhs.last_checked &&
    lhs.state == rhs.state &&
    lhs.cost == rhs.cost;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::mbf_msgs::CheckPathResponse_<ContainerAllocator1> & lhs, const ::mbf_msgs::CheckPathResponse_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace mbf_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::mbf_msgs::CheckPathResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::mbf_msgs::CheckPathResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::mbf_msgs::CheckPathResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::mbf_msgs::CheckPathResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mbf_msgs::CheckPathResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mbf_msgs::CheckPathResponse_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::mbf_msgs::CheckPathResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "420eb6a13d128bba3770710452ea1c17";
  }

  static const char* value(const ::mbf_msgs::CheckPathResponse_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x420eb6a13d128bbaULL;
  static const uint64_t static_value2 = 0x3770710452ea1c17ULL;
};

template<class ContainerAllocator>
struct DataType< ::mbf_msgs::CheckPathResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "mbf_msgs/CheckPathResponse";
  }

  static const char* value(const ::mbf_msgs::CheckPathResponse_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::mbf_msgs::CheckPathResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint8                      FREE      =  0    # path is completely in traversable space\n"
"uint8                      INSCRIBED =  1    # path is partially in inscribed space\n"
"uint8                      LETHAL    =  2    # path is partially in collision\n"
"uint8                      UNKNOWN   =  3    # path is partially in unknown space\n"
"uint8                      OUTSIDE   =  4    # path is partially outside the map\n"
"\n"
"uint32                     last_checked      # index of the first pose along the path with return_on state or worse\n"
"uint8                      state             # path worst state (until last_checked): FREE, INSCRIBED, LETHAL, UNKNOWN...\n"
"uint32                     cost              # cost of all cells traversed by path within footprint padded by safety_dist\n"
"                                             # or just by the path if path_cells_only is true\n"
"\n"
;
  }

  static const char* value(const ::mbf_msgs::CheckPathResponse_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::mbf_msgs::CheckPathResponse_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.last_checked);
      stream.next(m.state);
      stream.next(m.cost);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct CheckPathResponse_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::mbf_msgs::CheckPathResponse_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::mbf_msgs::CheckPathResponse_<ContainerAllocator>& v)
  {
    s << indent << "last_checked: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.last_checked);
    s << indent << "state: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.state);
    s << indent << "cost: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.cost);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MBF_MSGS_MESSAGE_CHECKPATHRESPONSE_H
