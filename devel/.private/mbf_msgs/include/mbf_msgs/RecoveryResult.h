// Generated by gencpp from file mbf_msgs/RecoveryResult.msg
// DO NOT EDIT!


#ifndef MBF_MSGS_MESSAGE_RECOVERYRESULT_H
#define MBF_MSGS_MESSAGE_RECOVERYRESULT_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace mbf_msgs
{
template <class ContainerAllocator>
struct RecoveryResult_
{
  typedef RecoveryResult_<ContainerAllocator> Type;

  RecoveryResult_()
    : outcome(0)
    , message()
    , used_plugin()  {
    }
  RecoveryResult_(const ContainerAllocator& _alloc)
    : outcome(0)
    , message(_alloc)
    , used_plugin(_alloc)  {
  (void)_alloc;
    }



   typedef uint32_t _outcome_type;
  _outcome_type outcome;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _message_type;
  _message_type message;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _used_plugin_type;
  _used_plugin_type used_plugin;



// reducing the odds to have name collisions with Windows.h 
#if defined(_WIN32) && defined(SUCCESS)
  #undef SUCCESS
#endif
#if defined(_WIN32) && defined(FAILURE)
  #undef FAILURE
#endif
#if defined(_WIN32) && defined(CANCELED)
  #undef CANCELED
#endif
#if defined(_WIN32) && defined(PAT_EXCEEDED)
  #undef PAT_EXCEEDED
#endif
#if defined(_WIN32) && defined(TF_ERROR)
  #undef TF_ERROR
#endif
#if defined(_WIN32) && defined(NOT_INITIALIZED)
  #undef NOT_INITIALIZED
#endif
#if defined(_WIN32) && defined(INVALID_PLUGIN)
  #undef INVALID_PLUGIN
#endif
#if defined(_WIN32) && defined(INTERNAL_ERROR)
  #undef INTERNAL_ERROR
#endif
#if defined(_WIN32) && defined(STOPPED)
  #undef STOPPED
#endif
#if defined(_WIN32) && defined(IMPASSABLE)
  #undef IMPASSABLE
#endif
#if defined(_WIN32) && defined(ERROR_RANGE_START)
  #undef ERROR_RANGE_START
#endif
#if defined(_WIN32) && defined(ERROR_RANGE_END)
  #undef ERROR_RANGE_END
#endif
#if defined(_WIN32) && defined(PLUGIN_ERROR_RANGE_START)
  #undef PLUGIN_ERROR_RANGE_START
#endif
#if defined(_WIN32) && defined(PLUGIN_ERROR_RANGE_END)
  #undef PLUGIN_ERROR_RANGE_END
#endif

  enum {
    SUCCESS = 0u,
    FAILURE = 150u,
    CANCELED = 151u,
    PAT_EXCEEDED = 152u,
    TF_ERROR = 153u,
    NOT_INITIALIZED = 154u,
    INVALID_PLUGIN = 155u,
    INTERNAL_ERROR = 156u,
    STOPPED = 157u,
    IMPASSABLE = 158u,
    ERROR_RANGE_START = 150u,
    ERROR_RANGE_END = 199u,
    PLUGIN_ERROR_RANGE_START = 171u,
    PLUGIN_ERROR_RANGE_END = 199u,
  };


  typedef boost::shared_ptr< ::mbf_msgs::RecoveryResult_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::mbf_msgs::RecoveryResult_<ContainerAllocator> const> ConstPtr;

}; // struct RecoveryResult_

typedef ::mbf_msgs::RecoveryResult_<std::allocator<void> > RecoveryResult;

typedef boost::shared_ptr< ::mbf_msgs::RecoveryResult > RecoveryResultPtr;
typedef boost::shared_ptr< ::mbf_msgs::RecoveryResult const> RecoveryResultConstPtr;

// constants requiring out of line definition

   

   

   

   

   

   

   

   

   

   

   

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::mbf_msgs::RecoveryResult_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::mbf_msgs::RecoveryResult_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::mbf_msgs::RecoveryResult_<ContainerAllocator1> & lhs, const ::mbf_msgs::RecoveryResult_<ContainerAllocator2> & rhs)
{
  return lhs.outcome == rhs.outcome &&
    lhs.message == rhs.message &&
    lhs.used_plugin == rhs.used_plugin;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::mbf_msgs::RecoveryResult_<ContainerAllocator1> & lhs, const ::mbf_msgs::RecoveryResult_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace mbf_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::mbf_msgs::RecoveryResult_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::mbf_msgs::RecoveryResult_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::mbf_msgs::RecoveryResult_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::mbf_msgs::RecoveryResult_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mbf_msgs::RecoveryResult_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mbf_msgs::RecoveryResult_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::mbf_msgs::RecoveryResult_<ContainerAllocator> >
{
  static const char* value()
  {
    return "f2dbeb867260dd0ca4b4e89517466f94";
  }

  static const char* value(const ::mbf_msgs::RecoveryResult_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xf2dbeb867260dd0cULL;
  static const uint64_t static_value2 = 0xa4b4e89517466f94ULL;
};

template<class ContainerAllocator>
struct DataType< ::mbf_msgs::RecoveryResult_<ContainerAllocator> >
{
  static const char* value()
  {
    return "mbf_msgs/RecoveryResult";
  }

  static const char* value(const ::mbf_msgs::RecoveryResult_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::mbf_msgs::RecoveryResult_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n"
"\n"
"# Predefined success codes:\n"
"uint8 SUCCESS           = 0\n"
"\n"
"# Possible server codes:\n"
"uint8 FAILURE           = 150\n"
"uint8 CANCELED          = 151\n"
"uint8 PAT_EXCEEDED      = 152\n"
"uint8 TF_ERROR          = 153\n"
"uint8 NOT_INITIALIZED   = 154\n"
"uint8 INVALID_PLUGIN    = 155\n"
"uint8 INTERNAL_ERROR    = 156\n"
"uint8 STOPPED           = 157  # The recovery behaviour execution has been stopped rigorously\n"
"uint8 IMPASSABLE        = 158  # Further execution would lead to a collision\n"
"\n"
"uint8 ERROR_RANGE_START = 150\n"
"uint8 ERROR_RANGE_END   = 199\n"
"\n"
"# 171..199 are reserved as plugin specific errors:\n"
"uint8 PLUGIN_ERROR_RANGE_START = 171\n"
"uint8 PLUGIN_ERROR_RANGE_END   = 199\n"
"\n"
"uint32 outcome\n"
"string message\n"
"string used_plugin\n"
"\n"
;
  }

  static const char* value(const ::mbf_msgs::RecoveryResult_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::mbf_msgs::RecoveryResult_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.outcome);
      stream.next(m.message);
      stream.next(m.used_plugin);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct RecoveryResult_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::mbf_msgs::RecoveryResult_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::mbf_msgs::RecoveryResult_<ContainerAllocator>& v)
  {
    s << indent << "outcome: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.outcome);
    s << indent << "message: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.message);
    s << indent << "used_plugin: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.used_plugin);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MBF_MSGS_MESSAGE_RECOVERYRESULT_H
