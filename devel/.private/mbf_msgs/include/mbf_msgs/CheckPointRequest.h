// Generated by gencpp from file mbf_msgs/CheckPointRequest.msg
// DO NOT EDIT!


#ifndef MBF_MSGS_MESSAGE_CHECKPOINTREQUEST_H
#define MBF_MSGS_MESSAGE_CHECKPOINTREQUEST_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <geometry_msgs/PointStamped.h>

namespace mbf_msgs
{
template <class ContainerAllocator>
struct CheckPointRequest_
{
  typedef CheckPointRequest_<ContainerAllocator> Type;

  CheckPointRequest_()
    : point()
    , costmap(0)  {
    }
  CheckPointRequest_(const ContainerAllocator& _alloc)
    : point(_alloc)
    , costmap(0)  {
  (void)_alloc;
    }



   typedef  ::geometry_msgs::PointStamped_<ContainerAllocator>  _point_type;
  _point_type point;

   typedef uint8_t _costmap_type;
  _costmap_type costmap;



// reducing the odds to have name collisions with Windows.h 
#if defined(_WIN32) && defined(LOCAL_COSTMAP)
  #undef LOCAL_COSTMAP
#endif
#if defined(_WIN32) && defined(GLOBAL_COSTMAP)
  #undef GLOBAL_COSTMAP
#endif

  enum {
    LOCAL_COSTMAP = 1u,
    GLOBAL_COSTMAP = 2u,
  };


  typedef boost::shared_ptr< ::mbf_msgs::CheckPointRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::mbf_msgs::CheckPointRequest_<ContainerAllocator> const> ConstPtr;

}; // struct CheckPointRequest_

typedef ::mbf_msgs::CheckPointRequest_<std::allocator<void> > CheckPointRequest;

typedef boost::shared_ptr< ::mbf_msgs::CheckPointRequest > CheckPointRequestPtr;
typedef boost::shared_ptr< ::mbf_msgs::CheckPointRequest const> CheckPointRequestConstPtr;

// constants requiring out of line definition

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::mbf_msgs::CheckPointRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::mbf_msgs::CheckPointRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::mbf_msgs::CheckPointRequest_<ContainerAllocator1> & lhs, const ::mbf_msgs::CheckPointRequest_<ContainerAllocator2> & rhs)
{
  return lhs.point == rhs.point &&
    lhs.costmap == rhs.costmap;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::mbf_msgs::CheckPointRequest_<ContainerAllocator1> & lhs, const ::mbf_msgs::CheckPointRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace mbf_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::mbf_msgs::CheckPointRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::mbf_msgs::CheckPointRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::mbf_msgs::CheckPointRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::mbf_msgs::CheckPointRequest_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mbf_msgs::CheckPointRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mbf_msgs::CheckPointRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::mbf_msgs::CheckPointRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "36e9c2f425eee0a2ebd8c4b0aae9f573";
  }

  static const char* value(const ::mbf_msgs::CheckPointRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x36e9c2f425eee0a2ULL;
  static const uint64_t static_value2 = 0xebd8c4b0aae9f573ULL;
};

template<class ContainerAllocator>
struct DataType< ::mbf_msgs::CheckPointRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "mbf_msgs/CheckPointRequest";
  }

  static const char* value(const ::mbf_msgs::CheckPointRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::mbf_msgs::CheckPointRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint8                      LOCAL_COSTMAP  = 1\n"
"uint8                      GLOBAL_COSTMAP = 2\n"
"\n"
"geometry_msgs/PointStamped point             # the point to be checked after transforming to costmap frame\n"
"uint8                      costmap           # costmap in which to check the point\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/PointStamped\n"
"# This represents a Point with reference coordinate frame and timestamp\n"
"Header header\n"
"Point point\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Point\n"
"# This contains the position of a point in free space\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
;
  }

  static const char* value(const ::mbf_msgs::CheckPointRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::mbf_msgs::CheckPointRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.point);
      stream.next(m.costmap);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct CheckPointRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::mbf_msgs::CheckPointRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::mbf_msgs::CheckPointRequest_<ContainerAllocator>& v)
  {
    s << indent << "point: ";
    s << std::endl;
    Printer< ::geometry_msgs::PointStamped_<ContainerAllocator> >::stream(s, indent + "  ", v.point);
    s << indent << "costmap: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.costmap);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MBF_MSGS_MESSAGE_CHECKPOINTREQUEST_H
