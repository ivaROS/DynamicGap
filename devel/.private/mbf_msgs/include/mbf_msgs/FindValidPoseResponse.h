// Generated by gencpp from file mbf_msgs/FindValidPoseResponse.msg
// DO NOT EDIT!


#ifndef MBF_MSGS_MESSAGE_FINDVALIDPOSERESPONSE_H
#define MBF_MSGS_MESSAGE_FINDVALIDPOSERESPONSE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <geometry_msgs/PoseStamped.h>

namespace mbf_msgs
{
template <class ContainerAllocator>
struct FindValidPoseResponse_
{
  typedef FindValidPoseResponse_<ContainerAllocator> Type;

  FindValidPoseResponse_()
    : state(0)
    , cost(0)
    , pose()  {
    }
  FindValidPoseResponse_(const ContainerAllocator& _alloc)
    : state(0)
    , cost(0)
    , pose(_alloc)  {
  (void)_alloc;
    }



   typedef uint8_t _state_type;
  _state_type state;

   typedef uint32_t _cost_type;
  _cost_type cost;

   typedef  ::geometry_msgs::PoseStamped_<ContainerAllocator>  _pose_type;
  _pose_type pose;



// reducing the odds to have name collisions with Windows.h 
#if defined(_WIN32) && defined(FREE)
  #undef FREE
#endif
#if defined(_WIN32) && defined(INSCRIBED)
  #undef INSCRIBED
#endif
#if defined(_WIN32) && defined(LETHAL)
  #undef LETHAL
#endif
#if defined(_WIN32) && defined(UNKNOWN)
  #undef UNKNOWN
#endif
#if defined(_WIN32) && defined(OUTSIDE)
  #undef OUTSIDE
#endif

  enum {
    FREE = 0u,
    INSCRIBED = 1u,
    LETHAL = 2u,
    UNKNOWN = 3u,
    OUTSIDE = 4u,
  };


  typedef boost::shared_ptr< ::mbf_msgs::FindValidPoseResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::mbf_msgs::FindValidPoseResponse_<ContainerAllocator> const> ConstPtr;

}; // struct FindValidPoseResponse_

typedef ::mbf_msgs::FindValidPoseResponse_<std::allocator<void> > FindValidPoseResponse;

typedef boost::shared_ptr< ::mbf_msgs::FindValidPoseResponse > FindValidPoseResponsePtr;
typedef boost::shared_ptr< ::mbf_msgs::FindValidPoseResponse const> FindValidPoseResponseConstPtr;

// constants requiring out of line definition

   

   

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::mbf_msgs::FindValidPoseResponse_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::mbf_msgs::FindValidPoseResponse_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::mbf_msgs::FindValidPoseResponse_<ContainerAllocator1> & lhs, const ::mbf_msgs::FindValidPoseResponse_<ContainerAllocator2> & rhs)
{
  return lhs.state == rhs.state &&
    lhs.cost == rhs.cost &&
    lhs.pose == rhs.pose;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::mbf_msgs::FindValidPoseResponse_<ContainerAllocator1> & lhs, const ::mbf_msgs::FindValidPoseResponse_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace mbf_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::mbf_msgs::FindValidPoseResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::mbf_msgs::FindValidPoseResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::mbf_msgs::FindValidPoseResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::mbf_msgs::FindValidPoseResponse_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mbf_msgs::FindValidPoseResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mbf_msgs::FindValidPoseResponse_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::mbf_msgs::FindValidPoseResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "b6ece50286a64440b79a2c19db08c667";
  }

  static const char* value(const ::mbf_msgs::FindValidPoseResponse_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xb6ece50286a64440ULL;
  static const uint64_t static_value2 = 0xb79a2c19db08c667ULL;
};

template<class ContainerAllocator>
struct DataType< ::mbf_msgs::FindValidPoseResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "mbf_msgs/FindValidPoseResponse";
  }

  static const char* value(const ::mbf_msgs::FindValidPoseResponse_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::mbf_msgs::FindValidPoseResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint8                      FREE      =  0    # found pose is completely in traversable space\n"
"uint8                      INSCRIBED =  1    # found pose is partially in inscribed space\n"
"uint8                      LETHAL    =  2    # found pose is partially in collision\n"
"uint8                      UNKNOWN   =  3    # found pose is partially in unknown space\n"
"uint8                      OUTSIDE   =  4    # found pose is partially outside the map\n"
"\n"
"uint8                      state             # found pose's state: FREE, INSCRIBED, LETHAL, UNKNOWN or OUTSIDE\n"
"uint32                     cost              # found pose's cost (sum of costs over all cells covered by the footprint)\n"
"geometry_msgs/PoseStamped  pose              # the pose found (filled only if state is not set to LETHAL)\n"
"\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/PoseStamped\n"
"# A Pose with reference coordinate frame and timestamp\n"
"Header header\n"
"Pose pose\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Pose\n"
"# A representation of pose in free space, composed of position and orientation. \n"
"Point position\n"
"Quaternion orientation\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Point\n"
"# This contains the position of a point in free space\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Quaternion\n"
"# This represents an orientation in free space in quaternion form.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"float64 w\n"
;
  }

  static const char* value(const ::mbf_msgs::FindValidPoseResponse_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::mbf_msgs::FindValidPoseResponse_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.state);
      stream.next(m.cost);
      stream.next(m.pose);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct FindValidPoseResponse_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::mbf_msgs::FindValidPoseResponse_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::mbf_msgs::FindValidPoseResponse_<ContainerAllocator>& v)
  {
    s << indent << "state: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.state);
    s << indent << "cost: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.cost);
    s << indent << "pose: ";
    s << std::endl;
    Printer< ::geometry_msgs::PoseStamped_<ContainerAllocator> >::stream(s, indent + "  ", v.pose);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MBF_MSGS_MESSAGE_FINDVALIDPOSERESPONSE_H
