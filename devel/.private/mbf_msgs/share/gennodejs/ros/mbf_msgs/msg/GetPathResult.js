// Auto-generated. Do not edit!

// (in-package mbf_msgs.msg)


"use strict";

const _serializer = _ros_msg_utils.Serialize;
const _arraySerializer = _serializer.Array;
const _deserializer = _ros_msg_utils.Deserialize;
const _arrayDeserializer = _deserializer.Array;
const _finder = _ros_msg_utils.Find;
const _getByteLength = _ros_msg_utils.getByteLength;
let nav_msgs = _finder('nav_msgs');

//-----------------------------------------------------------

class GetPathResult {
  constructor(initObj={}) {
    if (initObj === null) {
      // initObj === null is a special case for deserialization where we don't initialize fields
      this.outcome = null;
      this.message = null;
      this.path = null;
      this.cost = null;
    }
    else {
      if (initObj.hasOwnProperty('outcome')) {
        this.outcome = initObj.outcome
      }
      else {
        this.outcome = 0;
      }
      if (initObj.hasOwnProperty('message')) {
        this.message = initObj.message
      }
      else {
        this.message = '';
      }
      if (initObj.hasOwnProperty('path')) {
        this.path = initObj.path
      }
      else {
        this.path = new nav_msgs.msg.Path();
      }
      if (initObj.hasOwnProperty('cost')) {
        this.cost = initObj.cost
      }
      else {
        this.cost = 0.0;
      }
    }
  }

  static serialize(obj, buffer, bufferOffset) {
    // Serializes a message object of type GetPathResult
    // Serialize message field [outcome]
    bufferOffset = _serializer.uint32(obj.outcome, buffer, bufferOffset);
    // Serialize message field [message]
    bufferOffset = _serializer.string(obj.message, buffer, bufferOffset);
    // Serialize message field [path]
    bufferOffset = nav_msgs.msg.Path.serialize(obj.path, buffer, bufferOffset);
    // Serialize message field [cost]
    bufferOffset = _serializer.float64(obj.cost, buffer, bufferOffset);
    return bufferOffset;
  }

  static deserialize(buffer, bufferOffset=[0]) {
    //deserializes a message object of type GetPathResult
    let len;
    let data = new GetPathResult(null);
    // Deserialize message field [outcome]
    data.outcome = _deserializer.uint32(buffer, bufferOffset);
    // Deserialize message field [message]
    data.message = _deserializer.string(buffer, bufferOffset);
    // Deserialize message field [path]
    data.path = nav_msgs.msg.Path.deserialize(buffer, bufferOffset);
    // Deserialize message field [cost]
    data.cost = _deserializer.float64(buffer, bufferOffset);
    return data;
  }

  static getMessageSize(object) {
    let length = 0;
    length += _getByteLength(object.message);
    length += nav_msgs.msg.Path.getMessageSize(object.path);
    return length + 16;
  }

  static datatype() {
    // Returns string type for a message object
    return 'mbf_msgs/GetPathResult';
  }

  static md5sum() {
    //Returns md5sum for a message object
    return 'b4931c29424fa01a661c4d9069cdf7e3';
  }

  static messageDefinition() {
    // Returns full string definition for message
    return `
    # ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======
    
    # Predefined success codes:
    uint8 SUCCESS           = 0
    # 1..9 are reserved as plugin specific non-error results
    
    # Possible error codes:
    uint8 FAILURE           = 50  # Unspecified failure, only used for old, non-mfb_core based plugins
    uint8 CANCELED          = 51  # The action has been canceled by a action client
    uint8 INVALID_START     = 52  # The start pose is inconsistent (e.g. frame is not valid)
    uint8 INVALID_GOAL      = 53  # The goal pose is inconsistent (e.g. frame is not valid)
    uint8 BLOCKED_START     = 54  # The start pose is in collision
    uint8 BLOCKED_GOAL      = 55  # The goal pose is in collision
    uint8 NO_PATH_FOUND     = 56
    uint8 PAT_EXCEEDED      = 57
    uint8 EMPTY_PATH        = 58
    uint8 TF_ERROR          = 59
    uint8 NOT_INITIALIZED   = 60
    uint8 INVALID_PLUGIN    = 61
    uint8 INTERNAL_ERROR    = 62
    uint8 OUT_OF_MAP        = 63  # The start and / or the goal are outside the map
    uint8 MAP_ERROR         = 64  # The map is not available or not running properly
    uint8 STOPPED           = 65  # The planner execution has been stopped rigorously
    
    uint8 ERROR_RANGE_START = 50
    uint8 ERROR_RANGE_END   = 99
    
    # 71..99 are reserved as plugin specific errors:
    uint8 PLUGIN_ERROR_RANGE_START = 71
    uint8 PLUGIN_ERROR_RANGE_END   = 99
    
    uint32 outcome
    string message
    
    nav_msgs/Path path
    
    float64 cost
    
    
    ================================================================================
    MSG: nav_msgs/Path
    #An array of poses that represents a Path for a robot to follow
    Header header
    geometry_msgs/PoseStamped[] poses
    
    ================================================================================
    MSG: std_msgs/Header
    # Standard metadata for higher-level stamped data types.
    # This is generally used to communicate timestamped data 
    # in a particular coordinate frame.
    # 
    # sequence ID: consecutively increasing ID 
    uint32 seq
    #Two-integer timestamp that is expressed as:
    # * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
    # * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
    # time-handling sugar is provided by the client library
    time stamp
    #Frame this data is associated with
    string frame_id
    
    ================================================================================
    MSG: geometry_msgs/PoseStamped
    # A Pose with reference coordinate frame and timestamp
    Header header
    Pose pose
    
    ================================================================================
    MSG: geometry_msgs/Pose
    # A representation of pose in free space, composed of position and orientation. 
    Point position
    Quaternion orientation
    
    ================================================================================
    MSG: geometry_msgs/Point
    # This contains the position of a point in free space
    float64 x
    float64 y
    float64 z
    
    ================================================================================
    MSG: geometry_msgs/Quaternion
    # This represents an orientation in free space in quaternion form.
    
    float64 x
    float64 y
    float64 z
    float64 w
    
    `;
  }

  static Resolve(msg) {
    // deep-construct a valid message object instance of whatever was passed in
    if (typeof msg !== 'object' || msg === null) {
      msg = {};
    }
    const resolved = new GetPathResult(null);
    if (msg.outcome !== undefined) {
      resolved.outcome = msg.outcome;
    }
    else {
      resolved.outcome = 0
    }

    if (msg.message !== undefined) {
      resolved.message = msg.message;
    }
    else {
      resolved.message = ''
    }

    if (msg.path !== undefined) {
      resolved.path = nav_msgs.msg.Path.Resolve(msg.path)
    }
    else {
      resolved.path = new nav_msgs.msg.Path()
    }

    if (msg.cost !== undefined) {
      resolved.cost = msg.cost;
    }
    else {
      resolved.cost = 0.0
    }

    return resolved;
    }
};

// Constants for message
GetPathResult.Constants = {
  SUCCESS: 0,
  FAILURE: 50,
  CANCELED: 51,
  INVALID_START: 52,
  INVALID_GOAL: 53,
  BLOCKED_START: 54,
  BLOCKED_GOAL: 55,
  NO_PATH_FOUND: 56,
  PAT_EXCEEDED: 57,
  EMPTY_PATH: 58,
  TF_ERROR: 59,
  NOT_INITIALIZED: 60,
  INVALID_PLUGIN: 61,
  INTERNAL_ERROR: 62,
  OUT_OF_MAP: 63,
  MAP_ERROR: 64,
  STOPPED: 65,
  ERROR_RANGE_START: 50,
  ERROR_RANGE_END: 99,
  PLUGIN_ERROR_RANGE_START: 71,
  PLUGIN_ERROR_RANGE_END: 99,
}

module.exports = GetPathResult;
