// Auto-generated. Do not edit!

// (in-package mbf_msgs.msg)


"use strict";

const _serializer = _ros_msg_utils.Serialize;
const _arraySerializer = _serializer.Array;
const _deserializer = _ros_msg_utils.Deserialize;
const _arrayDeserializer = _deserializer.Array;
const _finder = _ros_msg_utils.Find;
const _getByteLength = _ros_msg_utils.getByteLength;

//-----------------------------------------------------------

class RecoveryResult {
  constructor(initObj={}) {
    if (initObj === null) {
      // initObj === null is a special case for deserialization where we don't initialize fields
      this.outcome = null;
      this.message = null;
      this.used_plugin = null;
    }
    else {
      if (initObj.hasOwnProperty('outcome')) {
        this.outcome = initObj.outcome
      }
      else {
        this.outcome = 0;
      }
      if (initObj.hasOwnProperty('message')) {
        this.message = initObj.message
      }
      else {
        this.message = '';
      }
      if (initObj.hasOwnProperty('used_plugin')) {
        this.used_plugin = initObj.used_plugin
      }
      else {
        this.used_plugin = '';
      }
    }
  }

  static serialize(obj, buffer, bufferOffset) {
    // Serializes a message object of type RecoveryResult
    // Serialize message field [outcome]
    bufferOffset = _serializer.uint32(obj.outcome, buffer, bufferOffset);
    // Serialize message field [message]
    bufferOffset = _serializer.string(obj.message, buffer, bufferOffset);
    // Serialize message field [used_plugin]
    bufferOffset = _serializer.string(obj.used_plugin, buffer, bufferOffset);
    return bufferOffset;
  }

  static deserialize(buffer, bufferOffset=[0]) {
    //deserializes a message object of type RecoveryResult
    let len;
    let data = new RecoveryResult(null);
    // Deserialize message field [outcome]
    data.outcome = _deserializer.uint32(buffer, bufferOffset);
    // Deserialize message field [message]
    data.message = _deserializer.string(buffer, bufferOffset);
    // Deserialize message field [used_plugin]
    data.used_plugin = _deserializer.string(buffer, bufferOffset);
    return data;
  }

  static getMessageSize(object) {
    let length = 0;
    length += _getByteLength(object.message);
    length += _getByteLength(object.used_plugin);
    return length + 12;
  }

  static datatype() {
    // Returns string type for a message object
    return 'mbf_msgs/RecoveryResult';
  }

  static md5sum() {
    //Returns md5sum for a message object
    return 'f2dbeb867260dd0ca4b4e89517466f94';
  }

  static messageDefinition() {
    // Returns full string definition for message
    return `
    # ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======
    
    # Predefined success codes:
    uint8 SUCCESS           = 0
    
    # Possible server codes:
    uint8 FAILURE           = 150
    uint8 CANCELED          = 151
    uint8 PAT_EXCEEDED      = 152
    uint8 TF_ERROR          = 153
    uint8 NOT_INITIALIZED   = 154
    uint8 INVALID_PLUGIN    = 155
    uint8 INTERNAL_ERROR    = 156
    uint8 STOPPED           = 157  # The recovery behaviour execution has been stopped rigorously
    uint8 IMPASSABLE        = 158  # Further execution would lead to a collision
    
    uint8 ERROR_RANGE_START = 150
    uint8 ERROR_RANGE_END   = 199
    
    # 171..199 are reserved as plugin specific errors:
    uint8 PLUGIN_ERROR_RANGE_START = 171
    uint8 PLUGIN_ERROR_RANGE_END   = 199
    
    uint32 outcome
    string message
    string used_plugin
    
    
    `;
  }

  static Resolve(msg) {
    // deep-construct a valid message object instance of whatever was passed in
    if (typeof msg !== 'object' || msg === null) {
      msg = {};
    }
    const resolved = new RecoveryResult(null);
    if (msg.outcome !== undefined) {
      resolved.outcome = msg.outcome;
    }
    else {
      resolved.outcome = 0
    }

    if (msg.message !== undefined) {
      resolved.message = msg.message;
    }
    else {
      resolved.message = ''
    }

    if (msg.used_plugin !== undefined) {
      resolved.used_plugin = msg.used_plugin;
    }
    else {
      resolved.used_plugin = ''
    }

    return resolved;
    }
};

// Constants for message
RecoveryResult.Constants = {
  SUCCESS: 0,
  FAILURE: 150,
  CANCELED: 151,
  PAT_EXCEEDED: 152,
  TF_ERROR: 153,
  NOT_INITIALIZED: 154,
  INVALID_PLUGIN: 155,
  INTERNAL_ERROR: 156,
  STOPPED: 157,
  IMPASSABLE: 158,
  ERROR_RANGE_START: 150,
  ERROR_RANGE_END: 199,
  PLUGIN_ERROR_RANGE_START: 171,
  PLUGIN_ERROR_RANGE_END: 199,
}

module.exports = RecoveryResult;
