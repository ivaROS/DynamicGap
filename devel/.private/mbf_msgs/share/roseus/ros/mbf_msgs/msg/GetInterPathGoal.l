;; Auto-generated. Do not edit!


(when (boundp 'mbf_msgs::GetInterPathGoal)
  (if (not (find-package "MBF_MSGS"))
    (make-package "MBF_MSGS"))
  (shadow 'GetInterPathGoal (find-package "MBF_MSGS")))
(unless (find-package "MBF_MSGS::GETINTERPATHGOAL")
  (make-package "MBF_MSGS::GETINTERPATHGOAL"))

(in-package "ROS")
;;//! \htmlinclude GetInterPathGoal.msg.html
(if (not (find-package "GEOMETRY_MSGS"))
  (ros::roseus-add-msgs "geometry_msgs"))
(if (not (find-package "NAV_MSGS"))
  (ros::roseus-add-msgs "nav_msgs"))


(defclass mbf_msgs::GetInterPathGoal
  :super ros::object
  :slots (_path _use_start_pose _start_pose _target_pose _inter _concurrency_slot ))

(defmethod mbf_msgs::GetInterPathGoal
  (:init
   (&key
    ((:path __path) (instance nav_msgs::Path :init))
    ((:use_start_pose __use_start_pose) nil)
    ((:start_pose __start_pose) (instance geometry_msgs::PoseStamped :init))
    ((:target_pose __target_pose) (instance geometry_msgs::PoseStamped :init))
    ((:inter __inter) "")
    ((:concurrency_slot __concurrency_slot) 0)
    )
   (send-super :init)
   (setq _path __path)
   (setq _use_start_pose __use_start_pose)
   (setq _start_pose __start_pose)
   (setq _target_pose __target_pose)
   (setq _inter (string __inter))
   (setq _concurrency_slot (round __concurrency_slot))
   self)
  (:path
   (&rest __path)
   (if (keywordp (car __path))
       (send* _path __path)
     (progn
       (if __path (setq _path (car __path)))
       _path)))
  (:use_start_pose
   (&optional (__use_start_pose :null))
   (if (not (eq __use_start_pose :null)) (setq _use_start_pose __use_start_pose)) _use_start_pose)
  (:start_pose
   (&rest __start_pose)
   (if (keywordp (car __start_pose))
       (send* _start_pose __start_pose)
     (progn
       (if __start_pose (setq _start_pose (car __start_pose)))
       _start_pose)))
  (:target_pose
   (&rest __target_pose)
   (if (keywordp (car __target_pose))
       (send* _target_pose __target_pose)
     (progn
       (if __target_pose (setq _target_pose (car __target_pose)))
       _target_pose)))
  (:inter
   (&optional __inter)
   (if __inter (setq _inter __inter)) _inter)
  (:concurrency_slot
   (&optional __concurrency_slot)
   (if __concurrency_slot (setq _concurrency_slot __concurrency_slot)) _concurrency_slot)
  (:serialization-length
   ()
   (+
    ;; nav_msgs/Path _path
    (send _path :serialization-length)
    ;; bool _use_start_pose
    1
    ;; geometry_msgs/PoseStamped _start_pose
    (send _start_pose :serialization-length)
    ;; geometry_msgs/PoseStamped _target_pose
    (send _target_pose :serialization-length)
    ;; string _inter
    4 (length _inter)
    ;; uint8 _concurrency_slot
    1
    ))
  (:serialize
   (&optional strm)
   (let ((s (if strm strm
              (make-string-output-stream (send self :serialization-length)))))
     ;; nav_msgs/Path _path
       (send _path :serialize s)
     ;; bool _use_start_pose
       (if _use_start_pose (write-byte -1 s) (write-byte 0 s))
     ;; geometry_msgs/PoseStamped _start_pose
       (send _start_pose :serialize s)
     ;; geometry_msgs/PoseStamped _target_pose
       (send _target_pose :serialize s)
     ;; string _inter
       (write-long (length _inter) s) (princ _inter s)
     ;; uint8 _concurrency_slot
       (write-byte _concurrency_slot s)
     ;;
     (if (null strm) (get-output-stream-string s))))
  (:deserialize
   (buf &optional (ptr- 0))
   ;; nav_msgs/Path _path
     (send _path :deserialize buf ptr-) (incf ptr- (send _path :serialization-length))
   ;; bool _use_start_pose
     (setq _use_start_pose (not (= 0 (sys::peek buf ptr- :char)))) (incf ptr- 1)
   ;; geometry_msgs/PoseStamped _start_pose
     (send _start_pose :deserialize buf ptr-) (incf ptr- (send _start_pose :serialization-length))
   ;; geometry_msgs/PoseStamped _target_pose
     (send _target_pose :deserialize buf ptr-) (incf ptr- (send _target_pose :serialization-length))
   ;; string _inter
     (let (n) (setq n (sys::peek buf ptr- :integer)) (incf ptr- 4) (setq _inter (subseq buf ptr- (+ ptr- n))) (incf ptr- n))
   ;; uint8 _concurrency_slot
     (setq _concurrency_slot (sys::peek buf ptr- :char)) (incf ptr- 1)
   ;;
   self)
  )

(setf (get mbf_msgs::GetInterPathGoal :md5sum-) "7d4db039c5bded571ff6c680ec003ae6")
(setf (get mbf_msgs::GetInterPathGoal :datatype-) "mbf_msgs/GetInterPathGoal")
(setf (get mbf_msgs::GetInterPathGoal :definition-)
      "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======
# Interpolate path from start_pose or current position to the target pose

# Follow the given path until completion or failure
nav_msgs/Path path

# Use start_pose or current position as the beginning of the path
bool use_start_pose

# The start pose for the path; optional, used if use_start_pose is true
geometry_msgs/PoseStamped start_pose

# The pose to achieve with the path
geometry_msgs/PoseStamped target_pose

# Inter to use; defaults to the first one specified on \"inter\" parameter
string inter

# use different slots for concurrency
uint8 concurrency_slot


================================================================================
MSG: nav_msgs/Path
#An array of poses that represents a Path for a robot to follow
Header header
geometry_msgs/PoseStamped[] poses

================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
string frame_id

================================================================================
MSG: geometry_msgs/PoseStamped
# A Pose with reference coordinate frame and timestamp
Header header
Pose pose

================================================================================
MSG: geometry_msgs/Pose
# A representation of pose in free space, composed of position and orientation. 
Point position
Quaternion orientation

================================================================================
MSG: geometry_msgs/Point
# This contains the position of a point in free space
float64 x
float64 y
float64 z

================================================================================
MSG: geometry_msgs/Quaternion
# This represents an orientation in free space in quaternion form.

float64 x
float64 y
float64 z
float64 w

")



(provide :mbf_msgs/GetInterPathGoal "7d4db039c5bded571ff6c680ec003ae6")


