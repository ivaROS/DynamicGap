;; Auto-generated. Do not edit!


(when (boundp 'mbf_msgs::MoveBaseGoal)
  (if (not (find-package "MBF_MSGS"))
    (make-package "MBF_MSGS"))
  (shadow 'MoveBaseGoal (find-package "MBF_MSGS")))
(unless (find-package "MBF_MSGS::MOVEBASEGOAL")
  (make-package "MBF_MSGS::MOVEBASEGOAL"))

(in-package "ROS")
;;//! \htmlinclude MoveBaseGoal.msg.html
(if (not (find-package "GEOMETRY_MSGS"))
  (ros::roseus-add-msgs "geometry_msgs"))


(defclass mbf_msgs::MoveBaseGoal
  :super ros::object
  :slots (_target_pose _controller _inter _planner _recovery_behaviors ))

(defmethod mbf_msgs::MoveBaseGoal
  (:init
   (&key
    ((:target_pose __target_pose) (instance geometry_msgs::PoseStamped :init))
    ((:controller __controller) "")
    ((:inter __inter) "")
    ((:planner __planner) "")
    ((:recovery_behaviors __recovery_behaviors) (let (r) (dotimes (i 0) (push "" r)) r))
    )
   (send-super :init)
   (setq _target_pose __target_pose)
   (setq _controller (string __controller))
   (setq _inter (string __inter))
   (setq _planner (string __planner))
   (setq _recovery_behaviors __recovery_behaviors)
   self)
  (:target_pose
   (&rest __target_pose)
   (if (keywordp (car __target_pose))
       (send* _target_pose __target_pose)
     (progn
       (if __target_pose (setq _target_pose (car __target_pose)))
       _target_pose)))
  (:controller
   (&optional __controller)
   (if __controller (setq _controller __controller)) _controller)
  (:inter
   (&optional __inter)
   (if __inter (setq _inter __inter)) _inter)
  (:planner
   (&optional __planner)
   (if __planner (setq _planner __planner)) _planner)
  (:recovery_behaviors
   (&optional __recovery_behaviors)
   (if __recovery_behaviors (setq _recovery_behaviors __recovery_behaviors)) _recovery_behaviors)
  (:serialization-length
   ()
   (+
    ;; geometry_msgs/PoseStamped _target_pose
    (send _target_pose :serialization-length)
    ;; string _controller
    4 (length _controller)
    ;; string _inter
    4 (length _inter)
    ;; string _planner
    4 (length _planner)
    ;; string[] _recovery_behaviors
    (apply #'+ (mapcar #'(lambda (x) (+ 4 (length x))) _recovery_behaviors)) 4
    ))
  (:serialize
   (&optional strm)
   (let ((s (if strm strm
              (make-string-output-stream (send self :serialization-length)))))
     ;; geometry_msgs/PoseStamped _target_pose
       (send _target_pose :serialize s)
     ;; string _controller
       (write-long (length _controller) s) (princ _controller s)
     ;; string _inter
       (write-long (length _inter) s) (princ _inter s)
     ;; string _planner
       (write-long (length _planner) s) (princ _planner s)
     ;; string[] _recovery_behaviors
     (write-long (length _recovery_behaviors) s)
     (dolist (elem _recovery_behaviors)
       (write-long (length elem) s) (princ elem s)
       )
     ;;
     (if (null strm) (get-output-stream-string s))))
  (:deserialize
   (buf &optional (ptr- 0))
   ;; geometry_msgs/PoseStamped _target_pose
     (send _target_pose :deserialize buf ptr-) (incf ptr- (send _target_pose :serialization-length))
   ;; string _controller
     (let (n) (setq n (sys::peek buf ptr- :integer)) (incf ptr- 4) (setq _controller (subseq buf ptr- (+ ptr- n))) (incf ptr- n))
   ;; string _inter
     (let (n) (setq n (sys::peek buf ptr- :integer)) (incf ptr- 4) (setq _inter (subseq buf ptr- (+ ptr- n))) (incf ptr- n))
   ;; string _planner
     (let (n) (setq n (sys::peek buf ptr- :integer)) (incf ptr- 4) (setq _planner (subseq buf ptr- (+ ptr- n))) (incf ptr- n))
   ;; string[] _recovery_behaviors
   (let (n)
     (setq n (sys::peek buf ptr- :integer)) (incf ptr- 4)
     (setq _recovery_behaviors (make-list n))
     (dotimes (i n)
     (let (n) (setq n (sys::peek buf ptr- :integer)) (incf ptr- 4) (setf (elt _recovery_behaviors i) (subseq buf ptr- (+ ptr- n))) (incf ptr- n))
     ))
   ;;
   self)
  )

(setf (get mbf_msgs::MoveBaseGoal :md5sum-) "1316ff7ae8dfd7d9609132682b78ba5c")
(setf (get mbf_msgs::MoveBaseGoal :datatype-) "mbf_msgs/MoveBaseGoal")
(setf (get mbf_msgs::MoveBaseGoal :definition-)
      "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======
# Extension of move_base_msgs/MoveBase action, with more detailed result
# and feedback and the possibility to specify lists of applicable plugins

geometry_msgs/PoseStamped target_pose

# Controller to use; defaults to the first one specified on \"controllers\" parameter
string controller

# Inter to use; defaults to the first one specified on \"inters\" parameter
string inter

# Planner to use; defaults to the first one specified on \"planners\" parameter
string planner

# Recovery behaviors to try on case of failure; defaults to the \"recovery_behaviors\" parameter value
string[] recovery_behaviors


================================================================================
MSG: geometry_msgs/PoseStamped
# A Pose with reference coordinate frame and timestamp
Header header
Pose pose

================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
string frame_id

================================================================================
MSG: geometry_msgs/Pose
# A representation of pose in free space, composed of position and orientation. 
Point position
Quaternion orientation

================================================================================
MSG: geometry_msgs/Point
# This contains the position of a point in free space
float64 x
float64 y
float64 z

================================================================================
MSG: geometry_msgs/Quaternion
# This represents an orientation in free space in quaternion form.

float64 x
float64 y
float64 z
float64 w

")



(provide :mbf_msgs/MoveBaseGoal "1316ff7ae8dfd7d9609132682b78ba5c")


