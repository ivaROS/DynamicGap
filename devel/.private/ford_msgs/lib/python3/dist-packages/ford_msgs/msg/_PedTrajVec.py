# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from ford_msgs/PedTrajVec.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import ford_msgs.msg
import geometry_msgs.msg
import std_msgs.msg

class PedTrajVec(genpy.Message):
  _md5sum = "05f33aed1bfc6d0d35110034d9c56bfa"
  _type = "ford_msgs/PedTrajVec"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """ford_msgs/PedTraj[] ped_traj_vec
================================================================================
MSG: ford_msgs/PedTraj
uint32 ped_id
ford_msgs/Pose2DStamped[] traj
float32 value #Used for PREDICTION types
uint8 type 
#ENUM for type
uint8 OBSERVATION=0
uint8 PREDICTION_LINEAR=1
uint8 PREDICTION_GP=2
================================================================================
MSG: ford_msgs/Pose2DStamped
std_msgs/Header header
geometry_msgs/Pose2D pose
geometry_msgs/Vector3 velocity
================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
string frame_id

================================================================================
MSG: geometry_msgs/Pose2D
# Deprecated
# Please use the full 3D pose.

# In general our recommendation is to use a full 3D representation of everything and for 2D specific applications make the appropriate projections into the plane for their calculations but optimally will preserve the 3D information during processing.

# If we have parallel copies of 2D datatypes every UI and other pipeline will end up needing to have dual interfaces to plot everything. And you will end up with not being able to use 3D tools for 2D use cases even if they're completely valid, as you'd have to reimplement it with different inputs and outputs. It's not particularly hard to plot the 2D pose or compute the yaw error for the Pose message and there are already tools and libraries that can do this for you.


# This expresses a position and orientation on a 2D manifold.

float64 x
float64 y
float64 theta

================================================================================
MSG: geometry_msgs/Vector3
# This represents a vector in free space. 
# It is only meant to represent a direction. Therefore, it does not
# make sense to apply a translation to it (e.g., when applying a 
# generic rigid transformation to a Vector3, tf2 will only apply the
# rotation). If you want your data to be translatable too, use the
# geometry_msgs/Point message instead.

float64 x
float64 y
float64 z"""
  __slots__ = ['ped_traj_vec']
  _slot_types = ['ford_msgs/PedTraj[]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       ped_traj_vec

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(PedTrajVec, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.ped_traj_vec is None:
        self.ped_traj_vec = []
    else:
      self.ped_traj_vec = []

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      length = len(self.ped_traj_vec)
      buff.write(_struct_I.pack(length))
      for val1 in self.ped_traj_vec:
        _x = val1.ped_id
        buff.write(_get_struct_I().pack(_x))
        length = len(val1.traj)
        buff.write(_struct_I.pack(length))
        for val2 in val1.traj:
          _v1 = val2.header
          _x = _v1.seq
          buff.write(_get_struct_I().pack(_x))
          _v2 = _v1.stamp
          _x = _v2
          buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
          _x = _v1.frame_id
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
          _v3 = val2.pose
          _x = _v3
          buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.theta))
          _v4 = val2.velocity
          _x = _v4
          buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _x = val1
        buff.write(_get_struct_fB().pack(_x.value, _x.type))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.ped_traj_vec is None:
        self.ped_traj_vec = None
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.ped_traj_vec = []
      for i in range(0, length):
        val1 = ford_msgs.msg.PedTraj()
        start = end
        end += 4
        (val1.ped_id,) = _get_struct_I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.traj = []
        for i in range(0, length):
          val2 = ford_msgs.msg.Pose2DStamped()
          _v5 = val2.header
          start = end
          end += 4
          (_v5.seq,) = _get_struct_I().unpack(str[start:end])
          _v6 = _v5.stamp
          _x = _v6
          start = end
          end += 8
          (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            _v5.frame_id = str[start:end].decode('utf-8', 'rosmsg')
          else:
            _v5.frame_id = str[start:end]
          _v7 = val2.pose
          _x = _v7
          start = end
          end += 24
          (_x.x, _x.y, _x.theta,) = _get_struct_3d().unpack(str[start:end])
          _v8 = val2.velocity
          _x = _v8
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
          val1.traj.append(val2)
        _x = val1
        start = end
        end += 5
        (_x.value, _x.type,) = _get_struct_fB().unpack(str[start:end])
        self.ped_traj_vec.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      length = len(self.ped_traj_vec)
      buff.write(_struct_I.pack(length))
      for val1 in self.ped_traj_vec:
        _x = val1.ped_id
        buff.write(_get_struct_I().pack(_x))
        length = len(val1.traj)
        buff.write(_struct_I.pack(length))
        for val2 in val1.traj:
          _v9 = val2.header
          _x = _v9.seq
          buff.write(_get_struct_I().pack(_x))
          _v10 = _v9.stamp
          _x = _v10
          buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
          _x = _v9.frame_id
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
          _v11 = val2.pose
          _x = _v11
          buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.theta))
          _v12 = val2.velocity
          _x = _v12
          buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _x = val1
        buff.write(_get_struct_fB().pack(_x.value, _x.type))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.ped_traj_vec is None:
        self.ped_traj_vec = None
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.ped_traj_vec = []
      for i in range(0, length):
        val1 = ford_msgs.msg.PedTraj()
        start = end
        end += 4
        (val1.ped_id,) = _get_struct_I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.traj = []
        for i in range(0, length):
          val2 = ford_msgs.msg.Pose2DStamped()
          _v13 = val2.header
          start = end
          end += 4
          (_v13.seq,) = _get_struct_I().unpack(str[start:end])
          _v14 = _v13.stamp
          _x = _v14
          start = end
          end += 8
          (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            _v13.frame_id = str[start:end].decode('utf-8', 'rosmsg')
          else:
            _v13.frame_id = str[start:end]
          _v15 = val2.pose
          _x = _v15
          start = end
          end += 24
          (_x.x, _x.y, _x.theta,) = _get_struct_3d().unpack(str[start:end])
          _v16 = val2.velocity
          _x = _v16
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
          val1.traj.append(val2)
        _x = val1
        start = end
        end += 5
        (_x.value, _x.type,) = _get_struct_fB().unpack(str[start:end])
        self.ped_traj_vec.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2I = None
def _get_struct_2I():
    global _struct_2I
    if _struct_2I is None:
        _struct_2I = struct.Struct("<2I")
    return _struct_2I
_struct_3d = None
def _get_struct_3d():
    global _struct_3d
    if _struct_3d is None:
        _struct_3d = struct.Struct("<3d")
    return _struct_3d
_struct_fB = None
def _get_struct_fB():
    global _struct_fB
    if _struct_fB is None:
        _struct_fB = struct.Struct("<fB")
    return _struct_fB
