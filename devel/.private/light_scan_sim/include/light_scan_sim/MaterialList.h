// Generated by gencpp from file light_scan_sim/MaterialList.msg
// DO NOT EDIT!


#ifndef LIGHT_SCAN_SIM_MESSAGE_MATERIALLIST_H
#define LIGHT_SCAN_SIM_MESSAGE_MATERIALLIST_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <light_scan_sim/Material.h>

namespace light_scan_sim
{
template <class ContainerAllocator>
struct MaterialList_
{
  typedef MaterialList_<ContainerAllocator> Type;

  MaterialList_()
    : materials()  {
    }
  MaterialList_(const ContainerAllocator& _alloc)
    : materials(_alloc)  {
  (void)_alloc;
    }



   typedef std::vector< ::light_scan_sim::Material_<ContainerAllocator> , typename std::allocator_traits<ContainerAllocator>::template rebind_alloc< ::light_scan_sim::Material_<ContainerAllocator> >> _materials_type;
  _materials_type materials;





  typedef boost::shared_ptr< ::light_scan_sim::MaterialList_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::light_scan_sim::MaterialList_<ContainerAllocator> const> ConstPtr;

}; // struct MaterialList_

typedef ::light_scan_sim::MaterialList_<std::allocator<void> > MaterialList;

typedef boost::shared_ptr< ::light_scan_sim::MaterialList > MaterialListPtr;
typedef boost::shared_ptr< ::light_scan_sim::MaterialList const> MaterialListConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::light_scan_sim::MaterialList_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::light_scan_sim::MaterialList_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::light_scan_sim::MaterialList_<ContainerAllocator1> & lhs, const ::light_scan_sim::MaterialList_<ContainerAllocator2> & rhs)
{
  return lhs.materials == rhs.materials;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::light_scan_sim::MaterialList_<ContainerAllocator1> & lhs, const ::light_scan_sim::MaterialList_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace light_scan_sim

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::light_scan_sim::MaterialList_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::light_scan_sim::MaterialList_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::light_scan_sim::MaterialList_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::light_scan_sim::MaterialList_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::light_scan_sim::MaterialList_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::light_scan_sim::MaterialList_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::light_scan_sim::MaterialList_<ContainerAllocator> >
{
  static const char* value()
  {
    return "3044149dcb81d0fb9254bae26c379855";
  }

  static const char* value(const ::light_scan_sim::MaterialList_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x3044149dcb81d0fbULL;
  static const uint64_t static_value2 = 0x9254bae26c379855ULL;
};

template<class ContainerAllocator>
struct DataType< ::light_scan_sim::MaterialList_<ContainerAllocator> >
{
  static const char* value()
  {
    return "light_scan_sim/MaterialList";
  }

  static const char* value(const ::light_scan_sim::MaterialList_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::light_scan_sim::MaterialList_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Material[] materials\n"
"\n"
"================================================================================\n"
"MSG: light_scan_sim/Material\n"
"string name  # for descriptive purposes\n"
"string type  # opaque or transparent \n"
"float32[3] color  # RGB for visualization node\n"
"float32 min_return  # 0.0 to 1.0 representing the minimum chance of return\n"
"float32 max_return  # 0.0 to 1.0 representing the maximum chance of return\n"
"float32 angular_return  # the chance of return lost per degree from perpendicular\n"
;
  }

  static const char* value(const ::light_scan_sim::MaterialList_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::light_scan_sim::MaterialList_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.materials);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct MaterialList_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::light_scan_sim::MaterialList_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::light_scan_sim::MaterialList_<ContainerAllocator>& v)
  {
    s << indent << "materials[]" << std::endl;
    for (size_t i = 0; i < v.materials.size(); ++i)
    {
      s << indent << "  materials[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::light_scan_sim::Material_<ContainerAllocator> >::stream(s, indent + "    ", v.materials[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // LIGHT_SCAN_SIM_MESSAGE_MATERIALLIST_H
