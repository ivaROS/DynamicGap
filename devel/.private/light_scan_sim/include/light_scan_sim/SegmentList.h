// Generated by gencpp from file light_scan_sim/SegmentList.msg
// DO NOT EDIT!


#ifndef LIGHT_SCAN_SIM_MESSAGE_SEGMENTLIST_H
#define LIGHT_SCAN_SIM_MESSAGE_SEGMENTLIST_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <light_scan_sim/Segment.h>

namespace light_scan_sim
{
template <class ContainerAllocator>
struct SegmentList_
{
  typedef SegmentList_<ContainerAllocator> Type;

  SegmentList_()
    : frame_id()
    , segments()  {
    }
  SegmentList_(const ContainerAllocator& _alloc)
    : frame_id(_alloc)
    , segments(_alloc)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _frame_id_type;
  _frame_id_type frame_id;

   typedef std::vector< ::light_scan_sim::Segment_<ContainerAllocator> , typename std::allocator_traits<ContainerAllocator>::template rebind_alloc< ::light_scan_sim::Segment_<ContainerAllocator> >> _segments_type;
  _segments_type segments;





  typedef boost::shared_ptr< ::light_scan_sim::SegmentList_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::light_scan_sim::SegmentList_<ContainerAllocator> const> ConstPtr;

}; // struct SegmentList_

typedef ::light_scan_sim::SegmentList_<std::allocator<void> > SegmentList;

typedef boost::shared_ptr< ::light_scan_sim::SegmentList > SegmentListPtr;
typedef boost::shared_ptr< ::light_scan_sim::SegmentList const> SegmentListConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::light_scan_sim::SegmentList_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::light_scan_sim::SegmentList_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::light_scan_sim::SegmentList_<ContainerAllocator1> & lhs, const ::light_scan_sim::SegmentList_<ContainerAllocator2> & rhs)
{
  return lhs.frame_id == rhs.frame_id &&
    lhs.segments == rhs.segments;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::light_scan_sim::SegmentList_<ContainerAllocator1> & lhs, const ::light_scan_sim::SegmentList_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace light_scan_sim

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::light_scan_sim::SegmentList_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::light_scan_sim::SegmentList_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::light_scan_sim::SegmentList_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::light_scan_sim::SegmentList_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::light_scan_sim::SegmentList_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::light_scan_sim::SegmentList_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::light_scan_sim::SegmentList_<ContainerAllocator> >
{
  static const char* value()
  {
    return "5500c4eb6ea115455652f791f8dfcdc1";
  }

  static const char* value(const ::light_scan_sim::SegmentList_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x5500c4eb6ea11545ULL;
  static const uint64_t static_value2 = 0x5652f791f8dfcdc1ULL;
};

template<class ContainerAllocator>
struct DataType< ::light_scan_sim::SegmentList_<ContainerAllocator> >
{
  static const char* value()
  {
    return "light_scan_sim/SegmentList";
  }

  static const char* value(const ::light_scan_sim::SegmentList_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::light_scan_sim::SegmentList_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string frame_id  # TF frame that \n"
"Segment[] segments\n"
"\n"
"================================================================================\n"
"MSG: light_scan_sim/Segment\n"
"uint8 type\n"
"float32[2] start\n"
"float32[2] end\n"
;
  }

  static const char* value(const ::light_scan_sim::SegmentList_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::light_scan_sim::SegmentList_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.frame_id);
      stream.next(m.segments);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct SegmentList_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::light_scan_sim::SegmentList_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::light_scan_sim::SegmentList_<ContainerAllocator>& v)
  {
    s << indent << "frame_id: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.frame_id);
    s << indent << "segments[]" << std::endl;
    for (size_t i = 0; i < v.segments.size(); ++i)
    {
      s << indent << "  segments[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::light_scan_sim::Segment_<ContainerAllocator> >::stream(s, indent + "    ", v.segments[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // LIGHT_SCAN_SIM_MESSAGE_SEGMENTLIST_H
