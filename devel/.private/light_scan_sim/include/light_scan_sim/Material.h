// Generated by gencpp from file light_scan_sim/Material.msg
// DO NOT EDIT!


#ifndef LIGHT_SCAN_SIM_MESSAGE_MATERIAL_H
#define LIGHT_SCAN_SIM_MESSAGE_MATERIAL_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace light_scan_sim
{
template <class ContainerAllocator>
struct Material_
{
  typedef Material_<ContainerAllocator> Type;

  Material_()
    : name()
    , type()
    , color()
    , min_return(0.0)
    , max_return(0.0)
    , angular_return(0.0)  {
      color.assign(0.0);
  }
  Material_(const ContainerAllocator& _alloc)
    : name(_alloc)
    , type(_alloc)
    , color()
    , min_return(0.0)
    , max_return(0.0)
    , angular_return(0.0)  {
  (void)_alloc;
      color.assign(0.0);
  }



   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _name_type;
  _name_type name;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _type_type;
  _type_type type;

   typedef boost::array<float, 3>  _color_type;
  _color_type color;

   typedef float _min_return_type;
  _min_return_type min_return;

   typedef float _max_return_type;
  _max_return_type max_return;

   typedef float _angular_return_type;
  _angular_return_type angular_return;





  typedef boost::shared_ptr< ::light_scan_sim::Material_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::light_scan_sim::Material_<ContainerAllocator> const> ConstPtr;

}; // struct Material_

typedef ::light_scan_sim::Material_<std::allocator<void> > Material;

typedef boost::shared_ptr< ::light_scan_sim::Material > MaterialPtr;
typedef boost::shared_ptr< ::light_scan_sim::Material const> MaterialConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::light_scan_sim::Material_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::light_scan_sim::Material_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::light_scan_sim::Material_<ContainerAllocator1> & lhs, const ::light_scan_sim::Material_<ContainerAllocator2> & rhs)
{
  return lhs.name == rhs.name &&
    lhs.type == rhs.type &&
    lhs.color == rhs.color &&
    lhs.min_return == rhs.min_return &&
    lhs.max_return == rhs.max_return &&
    lhs.angular_return == rhs.angular_return;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::light_scan_sim::Material_<ContainerAllocator1> & lhs, const ::light_scan_sim::Material_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace light_scan_sim

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::light_scan_sim::Material_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::light_scan_sim::Material_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::light_scan_sim::Material_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::light_scan_sim::Material_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::light_scan_sim::Material_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::light_scan_sim::Material_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::light_scan_sim::Material_<ContainerAllocator> >
{
  static const char* value()
  {
    return "be27c5f5cd5a377e88aa33527ff882a1";
  }

  static const char* value(const ::light_scan_sim::Material_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xbe27c5f5cd5a377eULL;
  static const uint64_t static_value2 = 0x88aa33527ff882a1ULL;
};

template<class ContainerAllocator>
struct DataType< ::light_scan_sim::Material_<ContainerAllocator> >
{
  static const char* value()
  {
    return "light_scan_sim/Material";
  }

  static const char* value(const ::light_scan_sim::Material_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::light_scan_sim::Material_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string name  # for descriptive purposes\n"
"string type  # opaque or transparent \n"
"float32[3] color  # RGB for visualization node\n"
"float32 min_return  # 0.0 to 1.0 representing the minimum chance of return\n"
"float32 max_return  # 0.0 to 1.0 representing the maximum chance of return\n"
"float32 angular_return  # the chance of return lost per degree from perpendicular\n"
;
  }

  static const char* value(const ::light_scan_sim::Material_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::light_scan_sim::Material_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.name);
      stream.next(m.type);
      stream.next(m.color);
      stream.next(m.min_return);
      stream.next(m.max_return);
      stream.next(m.angular_return);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Material_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::light_scan_sim::Material_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::light_scan_sim::Material_<ContainerAllocator>& v)
  {
    s << indent << "name: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.name);
    s << indent << "type: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.type);
    s << indent << "color[]" << std::endl;
    for (size_t i = 0; i < v.color.size(); ++i)
    {
      s << indent << "  color[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.color[i]);
    }
    s << indent << "min_return: ";
    Printer<float>::stream(s, indent + "  ", v.min_return);
    s << indent << "max_return: ";
    Printer<float>::stream(s, indent + "  ", v.max_return);
    s << indent << "angular_return: ";
    Printer<float>::stream(s, indent + "  ", v.angular_return);
  }
};

} // namespace message_operations
} // namespace ros

#endif // LIGHT_SCAN_SIM_MESSAGE_MATERIAL_H
