// Generated by gencpp from file rosnav/ResetStackedObs.msg
// DO NOT EDIT!


#ifndef ROSNAV_MESSAGE_RESETSTACKEDOBS_H
#define ROSNAV_MESSAGE_RESETSTACKEDOBS_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace rosnav
{
template <class ContainerAllocator>
struct ResetStackedObs_
{
  typedef ResetStackedObs_<ContainerAllocator> Type;

  ResetStackedObs_()
    : laser_scan()
    , goal_in_robot_frame()
    , last_action()  {
    }
  ResetStackedObs_(const ContainerAllocator& _alloc)
    : laser_scan(_alloc)
    , goal_in_robot_frame(_alloc)
    , last_action(_alloc)  {
  (void)_alloc;
    }



   typedef std::vector<float, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<float>> _laser_scan_type;
  _laser_scan_type laser_scan;

   typedef std::vector<float, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<float>> _goal_in_robot_frame_type;
  _goal_in_robot_frame_type goal_in_robot_frame;

   typedef std::vector<float, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<float>> _last_action_type;
  _last_action_type last_action;





  typedef boost::shared_ptr< ::rosnav::ResetStackedObs_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::rosnav::ResetStackedObs_<ContainerAllocator> const> ConstPtr;

}; // struct ResetStackedObs_

typedef ::rosnav::ResetStackedObs_<std::allocator<void> > ResetStackedObs;

typedef boost::shared_ptr< ::rosnav::ResetStackedObs > ResetStackedObsPtr;
typedef boost::shared_ptr< ::rosnav::ResetStackedObs const> ResetStackedObsConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::rosnav::ResetStackedObs_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::rosnav::ResetStackedObs_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::rosnav::ResetStackedObs_<ContainerAllocator1> & lhs, const ::rosnav::ResetStackedObs_<ContainerAllocator2> & rhs)
{
  return lhs.laser_scan == rhs.laser_scan &&
    lhs.goal_in_robot_frame == rhs.goal_in_robot_frame &&
    lhs.last_action == rhs.last_action;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::rosnav::ResetStackedObs_<ContainerAllocator1> & lhs, const ::rosnav::ResetStackedObs_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace rosnav

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::rosnav::ResetStackedObs_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::rosnav::ResetStackedObs_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::rosnav::ResetStackedObs_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::rosnav::ResetStackedObs_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::rosnav::ResetStackedObs_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::rosnav::ResetStackedObs_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::rosnav::ResetStackedObs_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ac16969c4d699f9151949bedcb64bec9";
  }

  static const char* value(const ::rosnav::ResetStackedObs_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xac16969c4d699f91ULL;
  static const uint64_t static_value2 = 0x51949bedcb64bec9ULL;
};

template<class ContainerAllocator>
struct DataType< ::rosnav::ResetStackedObs_<ContainerAllocator> >
{
  static const char* value()
  {
    return "rosnav/ResetStackedObs";
  }

  static const char* value(const ::rosnav::ResetStackedObs_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::rosnav::ResetStackedObs_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float32[] laser_scan\n"
"float32[] goal_in_robot_frame\n"
"float32[] last_action\n"
;
  }

  static const char* value(const ::rosnav::ResetStackedObs_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::rosnav::ResetStackedObs_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.laser_scan);
      stream.next(m.goal_in_robot_frame);
      stream.next(m.last_action);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ResetStackedObs_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::rosnav::ResetStackedObs_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::rosnav::ResetStackedObs_<ContainerAllocator>& v)
  {
    s << indent << "laser_scan[]" << std::endl;
    for (size_t i = 0; i < v.laser_scan.size(); ++i)
    {
      s << indent << "  laser_scan[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.laser_scan[i]);
    }
    s << indent << "goal_in_robot_frame[]" << std::endl;
    for (size_t i = 0; i < v.goal_in_robot_frame.size(); ++i)
    {
      s << indent << "  goal_in_robot_frame[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.goal_in_robot_frame[i]);
    }
    s << indent << "last_action[]" << std::endl;
    for (size_t i = 0; i < v.last_action.size(); ++i)
    {
      s << indent << "  last_action[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.last_action[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROSNAV_MESSAGE_RESETSTACKEDOBS_H
