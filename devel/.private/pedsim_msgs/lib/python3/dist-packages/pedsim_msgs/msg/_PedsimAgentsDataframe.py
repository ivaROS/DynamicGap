# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from pedsim_msgs/PedsimAgentsDataframe.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import geometry_msgs.msg
import pedsim_msgs.msg
import std_msgs.msg

class PedsimAgentsDataframe(genpy.Message):
  _md5sum = "c051cf49747f6875eb7bd2af8dc2ea06"
  _type = "pedsim_msgs/PedsimAgentsDataframe"
  _has_header = True  # flag to mark the presence of a Header object
  _full_text = """Header header
pedsim_msgs/AgentState[] agent_states
pedsim_msgs/RobotState[] robot_states
pedsim_msgs/Waypoint[] simulated_waypoints
pedsim_msgs/AgentGroup[] simulated_groups
pedsim_msgs/Obstacle[] obstacles
pedsim_msgs/Wall[] walls
================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
string frame_id

================================================================================
MSG: pedsim_msgs/AgentState
Header header
string id
string type
string social_state
geometry_msgs/Pose pose
geometry_msgs/Twist twist
pedsim_msgs/AgentForce forces
string talking_to_id
string listening_to_id
geometry_msgs/Vector3 acceleration
geometry_msgs/Vector3 destination
float64 direction
string configuration

uint8 IDLE        = 0
uint8 WALKING     = 1
uint8 RUNNING     = 2
uint8 INTERACTING = 3
uint8 TALKING     = 4
uint8 PHONE       = 5
================================================================================
MSG: geometry_msgs/Pose
# A representation of pose in free space, composed of position and orientation. 
Point position
Quaternion orientation

================================================================================
MSG: geometry_msgs/Point
# This contains the position of a point in free space
float64 x
float64 y
float64 z

================================================================================
MSG: geometry_msgs/Quaternion
# This represents an orientation in free space in quaternion form.

float64 x
float64 y
float64 z
float64 w

================================================================================
MSG: geometry_msgs/Twist
# This expresses velocity in free space broken into its linear and angular parts.
Vector3  linear
Vector3  angular

================================================================================
MSG: geometry_msgs/Vector3
# This represents a vector in free space. 
# It is only meant to represent a direction. Therefore, it does not
# make sense to apply a translation to it (e.g., when applying a 
# generic rigid transformation to a Vector3, tf2 will only apply the
# rotation). If you want your data to be translatable too, use the
# geometry_msgs/Point message instead.

float64 x
float64 y
float64 z
================================================================================
MSG: pedsim_msgs/AgentForce
# Forces acting on an agent.

# Max Speed
float64 vmax

# Force Factors
float64 desired_ffactor
float64 obstacle_ffactor
float64 social_ffactor
float64 robot_ffactor

# Basic SFM forces.
geometry_msgs/Vector3 desired_force
geometry_msgs/Vector3 obstacle_force
geometry_msgs/Vector3 social_force

# Additional Group Forces
geometry_msgs/Vector3 group_coherence_force
geometry_msgs/Vector3 group_gaze_force
geometry_msgs/Vector3 group_repulsion_force

# Extra stabilization/custom forces.
geometry_msgs/Vector3 random_force
geometry_msgs/Vector3 keep_distance_force
geometry_msgs/Vector3 robot_force

# Total forces
geometry_msgs/Vector3 force
================================================================================
MSG: pedsim_msgs/RobotState
string name
geometry_msgs/Pose pose
geometry_msgs/Twist twist
================================================================================
MSG: pedsim_msgs/Waypoint
int8 BHV_SIMPLE = 0
int8 BHV_SOURCE = 1
int8 BHV_SINK = 2

string name
int8 type
int8 behavior
geometry_msgs/Point position
float32 radius
float32 interaction_radius

================================================================================
MSG: pedsim_msgs/AgentGroup
Header header
string group_id
float64 age
string[] members
geometry_msgs/Pose center_of_mass

================================================================================
MSG: pedsim_msgs/Obstacle
string name
# type can be one of the following: "shelf"
string type
geometry_msgs/Pose pose
float64 interaction_radius
string yaml_path

================================================================================
MSG: pedsim_msgs/Wall
# A line obstacle in the simulator.

geometry_msgs/Point start
geometry_msgs/Point end
uint8 layer"""
  __slots__ = ['header','agent_states','robot_states','simulated_waypoints','simulated_groups','obstacles','walls']
  _slot_types = ['std_msgs/Header','pedsim_msgs/AgentState[]','pedsim_msgs/RobotState[]','pedsim_msgs/Waypoint[]','pedsim_msgs/AgentGroup[]','pedsim_msgs/Obstacle[]','pedsim_msgs/Wall[]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header,agent_states,robot_states,simulated_waypoints,simulated_groups,obstacles,walls

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(PedsimAgentsDataframe, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.agent_states is None:
        self.agent_states = []
      if self.robot_states is None:
        self.robot_states = []
      if self.simulated_waypoints is None:
        self.simulated_waypoints = []
      if self.simulated_groups is None:
        self.simulated_groups = []
      if self.obstacles is None:
        self.obstacles = []
      if self.walls is None:
        self.walls = []
    else:
      self.header = std_msgs.msg.Header()
      self.agent_states = []
      self.robot_states = []
      self.simulated_waypoints = []
      self.simulated_groups = []
      self.obstacles = []
      self.walls = []

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      length = len(self.agent_states)
      buff.write(_struct_I.pack(length))
      for val1 in self.agent_states:
        _v1 = val1.header
        _x = _v1.seq
        buff.write(_get_struct_I().pack(_x))
        _v2 = _v1.stamp
        _x = _v2
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _x = _v1.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = val1.id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = val1.type
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = val1.social_state
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _v3 = val1.pose
        _v4 = _v3.position
        _x = _v4
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v5 = _v3.orientation
        _x = _v5
        buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
        _v6 = val1.twist
        _v7 = _v6.linear
        _x = _v7
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v8 = _v6.angular
        _x = _v8
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v9 = val1.forces
        _x = _v9
        buff.write(_get_struct_5d().pack(_x.vmax, _x.desired_ffactor, _x.obstacle_ffactor, _x.social_ffactor, _x.robot_ffactor))
        _v10 = _v9.desired_force
        _x = _v10
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v11 = _v9.obstacle_force
        _x = _v11
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v12 = _v9.social_force
        _x = _v12
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v13 = _v9.group_coherence_force
        _x = _v13
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v14 = _v9.group_gaze_force
        _x = _v14
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v15 = _v9.group_repulsion_force
        _x = _v15
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v16 = _v9.random_force
        _x = _v16
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v17 = _v9.keep_distance_force
        _x = _v17
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v18 = _v9.robot_force
        _x = _v18
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v19 = _v9.force
        _x = _v19
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _x = val1.talking_to_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = val1.listening_to_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _v20 = val1.acceleration
        _x = _v20
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v21 = val1.destination
        _x = _v21
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _x = val1.direction
        buff.write(_get_struct_d().pack(_x))
        _x = val1.configuration
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      length = len(self.robot_states)
      buff.write(_struct_I.pack(length))
      for val1 in self.robot_states:
        _x = val1.name
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _v22 = val1.pose
        _v23 = _v22.position
        _x = _v23
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v24 = _v22.orientation
        _x = _v24
        buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
        _v25 = val1.twist
        _v26 = _v25.linear
        _x = _v26
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v27 = _v25.angular
        _x = _v27
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
      length = len(self.simulated_waypoints)
      buff.write(_struct_I.pack(length))
      for val1 in self.simulated_waypoints:
        _x = val1.name
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = val1
        buff.write(_get_struct_2b().pack(_x.type, _x.behavior))
        _v28 = val1.position
        _x = _v28
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _x = val1
        buff.write(_get_struct_2f().pack(_x.radius, _x.interaction_radius))
      length = len(self.simulated_groups)
      buff.write(_struct_I.pack(length))
      for val1 in self.simulated_groups:
        _v29 = val1.header
        _x = _v29.seq
        buff.write(_get_struct_I().pack(_x))
        _v30 = _v29.stamp
        _x = _v30
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _x = _v29.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = val1.group_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = val1.age
        buff.write(_get_struct_d().pack(_x))
        length = len(val1.members)
        buff.write(_struct_I.pack(length))
        for val2 in val1.members:
          length = len(val2)
          if python3 or type(val2) == unicode:
            val2 = val2.encode('utf-8')
            length = len(val2)
          buff.write(struct.Struct('<I%ss'%length).pack(length, val2))
        _v31 = val1.center_of_mass
        _v32 = _v31.position
        _x = _v32
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v33 = _v31.orientation
        _x = _v33
        buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
      length = len(self.obstacles)
      buff.write(_struct_I.pack(length))
      for val1 in self.obstacles:
        _x = val1.name
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = val1.type
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _v34 = val1.pose
        _v35 = _v34.position
        _x = _v35
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v36 = _v34.orientation
        _x = _v36
        buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
        _x = val1.interaction_radius
        buff.write(_get_struct_d().pack(_x))
        _x = val1.yaml_path
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      length = len(self.walls)
      buff.write(_struct_I.pack(length))
      for val1 in self.walls:
        _v37 = val1.start
        _x = _v37
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v38 = val1.end
        _x = _v38
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _x = val1.layer
        buff.write(_get_struct_B().pack(_x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.agent_states is None:
        self.agent_states = None
      if self.robot_states is None:
        self.robot_states = None
      if self.simulated_waypoints is None:
        self.simulated_waypoints = None
      if self.simulated_groups is None:
        self.simulated_groups = None
      if self.obstacles is None:
        self.obstacles = None
      if self.walls is None:
        self.walls = None
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.agent_states = []
      for i in range(0, length):
        val1 = pedsim_msgs.msg.AgentState()
        _v39 = val1.header
        start = end
        end += 4
        (_v39.seq,) = _get_struct_I().unpack(str[start:end])
        _v40 = _v39.stamp
        _x = _v40
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v39.frame_id = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v39.frame_id = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.id = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.id = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.type = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.type = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.social_state = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.social_state = str[start:end]
        _v41 = val1.pose
        _v42 = _v41.position
        _x = _v42
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v43 = _v41.orientation
        _x = _v43
        start = end
        end += 32
        (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
        _v44 = val1.twist
        _v45 = _v44.linear
        _x = _v45
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v46 = _v44.angular
        _x = _v46
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v47 = val1.forces
        _x = _v47
        start = end
        end += 40
        (_x.vmax, _x.desired_ffactor, _x.obstacle_ffactor, _x.social_ffactor, _x.robot_ffactor,) = _get_struct_5d().unpack(str[start:end])
        _v48 = _v47.desired_force
        _x = _v48
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v49 = _v47.obstacle_force
        _x = _v49
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v50 = _v47.social_force
        _x = _v50
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v51 = _v47.group_coherence_force
        _x = _v51
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v52 = _v47.group_gaze_force
        _x = _v52
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v53 = _v47.group_repulsion_force
        _x = _v53
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v54 = _v47.random_force
        _x = _v54
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v55 = _v47.keep_distance_force
        _x = _v55
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v56 = _v47.robot_force
        _x = _v56
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v57 = _v47.force
        _x = _v57
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.talking_to_id = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.talking_to_id = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.listening_to_id = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.listening_to_id = str[start:end]
        _v58 = val1.acceleration
        _x = _v58
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v59 = val1.destination
        _x = _v59
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        start = end
        end += 8
        (val1.direction,) = _get_struct_d().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.configuration = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.configuration = str[start:end]
        self.agent_states.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.robot_states = []
      for i in range(0, length):
        val1 = pedsim_msgs.msg.RobotState()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.name = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.name = str[start:end]
        _v60 = val1.pose
        _v61 = _v60.position
        _x = _v61
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v62 = _v60.orientation
        _x = _v62
        start = end
        end += 32
        (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
        _v63 = val1.twist
        _v64 = _v63.linear
        _x = _v64
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v65 = _v63.angular
        _x = _v65
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        self.robot_states.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.simulated_waypoints = []
      for i in range(0, length):
        val1 = pedsim_msgs.msg.Waypoint()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.name = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.name = str[start:end]
        _x = val1
        start = end
        end += 2
        (_x.type, _x.behavior,) = _get_struct_2b().unpack(str[start:end])
        _v66 = val1.position
        _x = _v66
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _x = val1
        start = end
        end += 8
        (_x.radius, _x.interaction_radius,) = _get_struct_2f().unpack(str[start:end])
        self.simulated_waypoints.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.simulated_groups = []
      for i in range(0, length):
        val1 = pedsim_msgs.msg.AgentGroup()
        _v67 = val1.header
        start = end
        end += 4
        (_v67.seq,) = _get_struct_I().unpack(str[start:end])
        _v68 = _v67.stamp
        _x = _v68
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v67.frame_id = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v67.frame_id = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.group_id = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.group_id = str[start:end]
        start = end
        end += 8
        (val1.age,) = _get_struct_d().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.members = []
        for i in range(0, length):
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val2 = str[start:end].decode('utf-8', 'rosmsg')
          else:
            val2 = str[start:end]
          val1.members.append(val2)
        _v69 = val1.center_of_mass
        _v70 = _v69.position
        _x = _v70
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v71 = _v69.orientation
        _x = _v71
        start = end
        end += 32
        (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
        self.simulated_groups.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.obstacles = []
      for i in range(0, length):
        val1 = pedsim_msgs.msg.Obstacle()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.name = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.name = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.type = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.type = str[start:end]
        _v72 = val1.pose
        _v73 = _v72.position
        _x = _v73
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v74 = _v72.orientation
        _x = _v74
        start = end
        end += 32
        (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
        start = end
        end += 8
        (val1.interaction_radius,) = _get_struct_d().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.yaml_path = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.yaml_path = str[start:end]
        self.obstacles.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.walls = []
      for i in range(0, length):
        val1 = pedsim_msgs.msg.Wall()
        _v75 = val1.start
        _x = _v75
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v76 = val1.end
        _x = _v76
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        start = end
        end += 1
        (val1.layer,) = _get_struct_B().unpack(str[start:end])
        self.walls.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      length = len(self.agent_states)
      buff.write(_struct_I.pack(length))
      for val1 in self.agent_states:
        _v77 = val1.header
        _x = _v77.seq
        buff.write(_get_struct_I().pack(_x))
        _v78 = _v77.stamp
        _x = _v78
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _x = _v77.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = val1.id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = val1.type
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = val1.social_state
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _v79 = val1.pose
        _v80 = _v79.position
        _x = _v80
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v81 = _v79.orientation
        _x = _v81
        buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
        _v82 = val1.twist
        _v83 = _v82.linear
        _x = _v83
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v84 = _v82.angular
        _x = _v84
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v85 = val1.forces
        _x = _v85
        buff.write(_get_struct_5d().pack(_x.vmax, _x.desired_ffactor, _x.obstacle_ffactor, _x.social_ffactor, _x.robot_ffactor))
        _v86 = _v85.desired_force
        _x = _v86
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v87 = _v85.obstacle_force
        _x = _v87
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v88 = _v85.social_force
        _x = _v88
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v89 = _v85.group_coherence_force
        _x = _v89
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v90 = _v85.group_gaze_force
        _x = _v90
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v91 = _v85.group_repulsion_force
        _x = _v91
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v92 = _v85.random_force
        _x = _v92
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v93 = _v85.keep_distance_force
        _x = _v93
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v94 = _v85.robot_force
        _x = _v94
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v95 = _v85.force
        _x = _v95
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _x = val1.talking_to_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = val1.listening_to_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _v96 = val1.acceleration
        _x = _v96
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v97 = val1.destination
        _x = _v97
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _x = val1.direction
        buff.write(_get_struct_d().pack(_x))
        _x = val1.configuration
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      length = len(self.robot_states)
      buff.write(_struct_I.pack(length))
      for val1 in self.robot_states:
        _x = val1.name
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _v98 = val1.pose
        _v99 = _v98.position
        _x = _v99
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v100 = _v98.orientation
        _x = _v100
        buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
        _v101 = val1.twist
        _v102 = _v101.linear
        _x = _v102
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v103 = _v101.angular
        _x = _v103
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
      length = len(self.simulated_waypoints)
      buff.write(_struct_I.pack(length))
      for val1 in self.simulated_waypoints:
        _x = val1.name
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = val1
        buff.write(_get_struct_2b().pack(_x.type, _x.behavior))
        _v104 = val1.position
        _x = _v104
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _x = val1
        buff.write(_get_struct_2f().pack(_x.radius, _x.interaction_radius))
      length = len(self.simulated_groups)
      buff.write(_struct_I.pack(length))
      for val1 in self.simulated_groups:
        _v105 = val1.header
        _x = _v105.seq
        buff.write(_get_struct_I().pack(_x))
        _v106 = _v105.stamp
        _x = _v106
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _x = _v105.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = val1.group_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = val1.age
        buff.write(_get_struct_d().pack(_x))
        length = len(val1.members)
        buff.write(_struct_I.pack(length))
        for val2 in val1.members:
          length = len(val2)
          if python3 or type(val2) == unicode:
            val2 = val2.encode('utf-8')
            length = len(val2)
          buff.write(struct.Struct('<I%ss'%length).pack(length, val2))
        _v107 = val1.center_of_mass
        _v108 = _v107.position
        _x = _v108
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v109 = _v107.orientation
        _x = _v109
        buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
      length = len(self.obstacles)
      buff.write(_struct_I.pack(length))
      for val1 in self.obstacles:
        _x = val1.name
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = val1.type
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _v110 = val1.pose
        _v111 = _v110.position
        _x = _v111
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v112 = _v110.orientation
        _x = _v112
        buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
        _x = val1.interaction_radius
        buff.write(_get_struct_d().pack(_x))
        _x = val1.yaml_path
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      length = len(self.walls)
      buff.write(_struct_I.pack(length))
      for val1 in self.walls:
        _v113 = val1.start
        _x = _v113
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v114 = val1.end
        _x = _v114
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _x = val1.layer
        buff.write(_get_struct_B().pack(_x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.agent_states is None:
        self.agent_states = None
      if self.robot_states is None:
        self.robot_states = None
      if self.simulated_waypoints is None:
        self.simulated_waypoints = None
      if self.simulated_groups is None:
        self.simulated_groups = None
      if self.obstacles is None:
        self.obstacles = None
      if self.walls is None:
        self.walls = None
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.agent_states = []
      for i in range(0, length):
        val1 = pedsim_msgs.msg.AgentState()
        _v115 = val1.header
        start = end
        end += 4
        (_v115.seq,) = _get_struct_I().unpack(str[start:end])
        _v116 = _v115.stamp
        _x = _v116
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v115.frame_id = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v115.frame_id = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.id = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.id = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.type = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.type = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.social_state = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.social_state = str[start:end]
        _v117 = val1.pose
        _v118 = _v117.position
        _x = _v118
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v119 = _v117.orientation
        _x = _v119
        start = end
        end += 32
        (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
        _v120 = val1.twist
        _v121 = _v120.linear
        _x = _v121
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v122 = _v120.angular
        _x = _v122
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v123 = val1.forces
        _x = _v123
        start = end
        end += 40
        (_x.vmax, _x.desired_ffactor, _x.obstacle_ffactor, _x.social_ffactor, _x.robot_ffactor,) = _get_struct_5d().unpack(str[start:end])
        _v124 = _v123.desired_force
        _x = _v124
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v125 = _v123.obstacle_force
        _x = _v125
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v126 = _v123.social_force
        _x = _v126
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v127 = _v123.group_coherence_force
        _x = _v127
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v128 = _v123.group_gaze_force
        _x = _v128
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v129 = _v123.group_repulsion_force
        _x = _v129
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v130 = _v123.random_force
        _x = _v130
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v131 = _v123.keep_distance_force
        _x = _v131
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v132 = _v123.robot_force
        _x = _v132
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v133 = _v123.force
        _x = _v133
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.talking_to_id = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.talking_to_id = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.listening_to_id = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.listening_to_id = str[start:end]
        _v134 = val1.acceleration
        _x = _v134
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v135 = val1.destination
        _x = _v135
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        start = end
        end += 8
        (val1.direction,) = _get_struct_d().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.configuration = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.configuration = str[start:end]
        self.agent_states.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.robot_states = []
      for i in range(0, length):
        val1 = pedsim_msgs.msg.RobotState()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.name = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.name = str[start:end]
        _v136 = val1.pose
        _v137 = _v136.position
        _x = _v137
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v138 = _v136.orientation
        _x = _v138
        start = end
        end += 32
        (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
        _v139 = val1.twist
        _v140 = _v139.linear
        _x = _v140
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v141 = _v139.angular
        _x = _v141
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        self.robot_states.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.simulated_waypoints = []
      for i in range(0, length):
        val1 = pedsim_msgs.msg.Waypoint()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.name = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.name = str[start:end]
        _x = val1
        start = end
        end += 2
        (_x.type, _x.behavior,) = _get_struct_2b().unpack(str[start:end])
        _v142 = val1.position
        _x = _v142
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _x = val1
        start = end
        end += 8
        (_x.radius, _x.interaction_radius,) = _get_struct_2f().unpack(str[start:end])
        self.simulated_waypoints.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.simulated_groups = []
      for i in range(0, length):
        val1 = pedsim_msgs.msg.AgentGroup()
        _v143 = val1.header
        start = end
        end += 4
        (_v143.seq,) = _get_struct_I().unpack(str[start:end])
        _v144 = _v143.stamp
        _x = _v144
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v143.frame_id = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v143.frame_id = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.group_id = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.group_id = str[start:end]
        start = end
        end += 8
        (val1.age,) = _get_struct_d().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.members = []
        for i in range(0, length):
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val2 = str[start:end].decode('utf-8', 'rosmsg')
          else:
            val2 = str[start:end]
          val1.members.append(val2)
        _v145 = val1.center_of_mass
        _v146 = _v145.position
        _x = _v146
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v147 = _v145.orientation
        _x = _v147
        start = end
        end += 32
        (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
        self.simulated_groups.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.obstacles = []
      for i in range(0, length):
        val1 = pedsim_msgs.msg.Obstacle()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.name = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.name = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.type = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.type = str[start:end]
        _v148 = val1.pose
        _v149 = _v148.position
        _x = _v149
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v150 = _v148.orientation
        _x = _v150
        start = end
        end += 32
        (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
        start = end
        end += 8
        (val1.interaction_radius,) = _get_struct_d().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.yaml_path = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.yaml_path = str[start:end]
        self.obstacles.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.walls = []
      for i in range(0, length):
        val1 = pedsim_msgs.msg.Wall()
        _v151 = val1.start
        _x = _v151
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v152 = val1.end
        _x = _v152
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        start = end
        end += 1
        (val1.layer,) = _get_struct_B().unpack(str[start:end])
        self.walls.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2I = None
def _get_struct_2I():
    global _struct_2I
    if _struct_2I is None:
        _struct_2I = struct.Struct("<2I")
    return _struct_2I
_struct_2b = None
def _get_struct_2b():
    global _struct_2b
    if _struct_2b is None:
        _struct_2b = struct.Struct("<2b")
    return _struct_2b
_struct_2f = None
def _get_struct_2f():
    global _struct_2f
    if _struct_2f is None:
        _struct_2f = struct.Struct("<2f")
    return _struct_2f
_struct_3I = None
def _get_struct_3I():
    global _struct_3I
    if _struct_3I is None:
        _struct_3I = struct.Struct("<3I")
    return _struct_3I
_struct_3d = None
def _get_struct_3d():
    global _struct_3d
    if _struct_3d is None:
        _struct_3d = struct.Struct("<3d")
    return _struct_3d
_struct_4d = None
def _get_struct_4d():
    global _struct_4d
    if _struct_4d is None:
        _struct_4d = struct.Struct("<4d")
    return _struct_4d
_struct_5d = None
def _get_struct_5d():
    global _struct_5d
    if _struct_5d is None:
        _struct_5d = struct.Struct("<5d")
    return _struct_5d
_struct_B = None
def _get_struct_B():
    global _struct_B
    if _struct_B is None:
        _struct_B = struct.Struct("<B")
    return _struct_B
_struct_d = None
def _get_struct_d():
    global _struct_d
    if _struct_d is None:
        _struct_d = struct.Struct("<d")
    return _struct_d
