// Generated by gencpp from file pedsim_msgs/Ped.msg
// DO NOT EDIT!


#ifndef PEDSIM_MSGS_MESSAGE_PED_H
#define PEDSIM_MSGS_MESSAGE_PED_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <geometry_msgs/Point.h>
#include <geometry_msgs/Point.h>

namespace pedsim_msgs
{
template <class ContainerAllocator>
struct Ped_
{
  typedef Ped_<ContainerAllocator> Type;

  Ped_()
    : id()
    , pos()
    , type()
    , yaml_file()
    , number_of_peds(0)
    , vmax(0.0)
    , start_up_mode()
    , wait_time(0.0)
    , trigger_zone_radius(0.0)
    , max_talking_distance(0.0)
    , max_servicing_radius(0.0)
    , chatting_probability(0.0)
    , tell_story_probability(0.0)
    , group_talking_probability(0.0)
    , talking_and_walking_probability(0.0)
    , requesting_service_probability(0.0)
    , requesting_guide_probability(0.0)
    , requesting_follower_probability(0.0)
    , talking_base_time(0.0)
    , tell_story_base_time(0.0)
    , group_talking_base_time(0.0)
    , talking_and_walking_base_time(0.0)
    , receiving_service_base_time(0.0)
    , requesting_service_base_time(0.0)
    , force_factor_desired(0.0)
    , force_factor_obstacle(0.0)
    , force_factor_social(0.0)
    , force_factor_robot(0.0)
    , waypoints()
    , waypoint_mode(0)
    , configuration()  {
    }
  Ped_(const ContainerAllocator& _alloc)
    : id(_alloc)
    , pos(_alloc)
    , type(_alloc)
    , yaml_file(_alloc)
    , number_of_peds(0)
    , vmax(0.0)
    , start_up_mode(_alloc)
    , wait_time(0.0)
    , trigger_zone_radius(0.0)
    , max_talking_distance(0.0)
    , max_servicing_radius(0.0)
    , chatting_probability(0.0)
    , tell_story_probability(0.0)
    , group_talking_probability(0.0)
    , talking_and_walking_probability(0.0)
    , requesting_service_probability(0.0)
    , requesting_guide_probability(0.0)
    , requesting_follower_probability(0.0)
    , talking_base_time(0.0)
    , tell_story_base_time(0.0)
    , group_talking_base_time(0.0)
    , talking_and_walking_base_time(0.0)
    , receiving_service_base_time(0.0)
    , requesting_service_base_time(0.0)
    , force_factor_desired(0.0)
    , force_factor_obstacle(0.0)
    , force_factor_social(0.0)
    , force_factor_robot(0.0)
    , waypoints(_alloc)
    , waypoint_mode(0)
    , configuration(_alloc)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _id_type;
  _id_type id;

   typedef  ::geometry_msgs::Point_<ContainerAllocator>  _pos_type;
  _pos_type pos;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _type_type;
  _type_type type;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _yaml_file_type;
  _yaml_file_type yaml_file;

   typedef int16_t _number_of_peds_type;
  _number_of_peds_type number_of_peds;

   typedef double _vmax_type;
  _vmax_type vmax;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _start_up_mode_type;
  _start_up_mode_type start_up_mode;

   typedef double _wait_time_type;
  _wait_time_type wait_time;

   typedef double _trigger_zone_radius_type;
  _trigger_zone_radius_type trigger_zone_radius;

   typedef double _max_talking_distance_type;
  _max_talking_distance_type max_talking_distance;

   typedef double _max_servicing_radius_type;
  _max_servicing_radius_type max_servicing_radius;

   typedef double _chatting_probability_type;
  _chatting_probability_type chatting_probability;

   typedef double _tell_story_probability_type;
  _tell_story_probability_type tell_story_probability;

   typedef double _group_talking_probability_type;
  _group_talking_probability_type group_talking_probability;

   typedef double _talking_and_walking_probability_type;
  _talking_and_walking_probability_type talking_and_walking_probability;

   typedef double _requesting_service_probability_type;
  _requesting_service_probability_type requesting_service_probability;

   typedef double _requesting_guide_probability_type;
  _requesting_guide_probability_type requesting_guide_probability;

   typedef double _requesting_follower_probability_type;
  _requesting_follower_probability_type requesting_follower_probability;

   typedef double _talking_base_time_type;
  _talking_base_time_type talking_base_time;

   typedef double _tell_story_base_time_type;
  _tell_story_base_time_type tell_story_base_time;

   typedef double _group_talking_base_time_type;
  _group_talking_base_time_type group_talking_base_time;

   typedef double _talking_and_walking_base_time_type;
  _talking_and_walking_base_time_type talking_and_walking_base_time;

   typedef double _receiving_service_base_time_type;
  _receiving_service_base_time_type receiving_service_base_time;

   typedef double _requesting_service_base_time_type;
  _requesting_service_base_time_type requesting_service_base_time;

   typedef double _force_factor_desired_type;
  _force_factor_desired_type force_factor_desired;

   typedef double _force_factor_obstacle_type;
  _force_factor_obstacle_type force_factor_obstacle;

   typedef double _force_factor_social_type;
  _force_factor_social_type force_factor_social;

   typedef double _force_factor_robot_type;
  _force_factor_robot_type force_factor_robot;

   typedef std::vector< ::geometry_msgs::Point_<ContainerAllocator> , typename std::allocator_traits<ContainerAllocator>::template rebind_alloc< ::geometry_msgs::Point_<ContainerAllocator> >> _waypoints_type;
  _waypoints_type waypoints;

   typedef int16_t _waypoint_mode_type;
  _waypoint_mode_type waypoint_mode;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _configuration_type;
  _configuration_type configuration;





  typedef boost::shared_ptr< ::pedsim_msgs::Ped_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::pedsim_msgs::Ped_<ContainerAllocator> const> ConstPtr;

}; // struct Ped_

typedef ::pedsim_msgs::Ped_<std::allocator<void> > Ped;

typedef boost::shared_ptr< ::pedsim_msgs::Ped > PedPtr;
typedef boost::shared_ptr< ::pedsim_msgs::Ped const> PedConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::pedsim_msgs::Ped_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::pedsim_msgs::Ped_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::pedsim_msgs::Ped_<ContainerAllocator1> & lhs, const ::pedsim_msgs::Ped_<ContainerAllocator2> & rhs)
{
  return lhs.id == rhs.id &&
    lhs.pos == rhs.pos &&
    lhs.type == rhs.type &&
    lhs.yaml_file == rhs.yaml_file &&
    lhs.number_of_peds == rhs.number_of_peds &&
    lhs.vmax == rhs.vmax &&
    lhs.start_up_mode == rhs.start_up_mode &&
    lhs.wait_time == rhs.wait_time &&
    lhs.trigger_zone_radius == rhs.trigger_zone_radius &&
    lhs.max_talking_distance == rhs.max_talking_distance &&
    lhs.max_servicing_radius == rhs.max_servicing_radius &&
    lhs.chatting_probability == rhs.chatting_probability &&
    lhs.tell_story_probability == rhs.tell_story_probability &&
    lhs.group_talking_probability == rhs.group_talking_probability &&
    lhs.talking_and_walking_probability == rhs.talking_and_walking_probability &&
    lhs.requesting_service_probability == rhs.requesting_service_probability &&
    lhs.requesting_guide_probability == rhs.requesting_guide_probability &&
    lhs.requesting_follower_probability == rhs.requesting_follower_probability &&
    lhs.talking_base_time == rhs.talking_base_time &&
    lhs.tell_story_base_time == rhs.tell_story_base_time &&
    lhs.group_talking_base_time == rhs.group_talking_base_time &&
    lhs.talking_and_walking_base_time == rhs.talking_and_walking_base_time &&
    lhs.receiving_service_base_time == rhs.receiving_service_base_time &&
    lhs.requesting_service_base_time == rhs.requesting_service_base_time &&
    lhs.force_factor_desired == rhs.force_factor_desired &&
    lhs.force_factor_obstacle == rhs.force_factor_obstacle &&
    lhs.force_factor_social == rhs.force_factor_social &&
    lhs.force_factor_robot == rhs.force_factor_robot &&
    lhs.waypoints == rhs.waypoints &&
    lhs.waypoint_mode == rhs.waypoint_mode &&
    lhs.configuration == rhs.configuration;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::pedsim_msgs::Ped_<ContainerAllocator1> & lhs, const ::pedsim_msgs::Ped_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace pedsim_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::pedsim_msgs::Ped_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::pedsim_msgs::Ped_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::pedsim_msgs::Ped_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::pedsim_msgs::Ped_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::pedsim_msgs::Ped_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::pedsim_msgs::Ped_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::pedsim_msgs::Ped_<ContainerAllocator> >
{
  static const char* value()
  {
    return "d8575a29ff9a6fbcc93400a28e9925d4";
  }

  static const char* value(const ::pedsim_msgs::Ped_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xd8575a29ff9a6fbcULL;
  static const uint64_t static_value2 = 0xc93400a28e9925d4ULL;
};

template<class ContainerAllocator>
struct DataType< ::pedsim_msgs::Ped_<ContainerAllocator> >
{
  static const char* value()
  {
    return "pedsim_msgs/Ped";
  }

  static const char* value(const ::pedsim_msgs::Ped_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::pedsim_msgs::Ped_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# Added by Ronja Gueldenring\n"
"# For spawning agents dynamically in pedsim and forwarding them to flatland\n"
"string id\n"
"geometry_msgs/Point pos\n"
"string type  # \"adult\", \"child\", \"elder\", \"vehicle\", \"servicerobot\"\n"
"string yaml_file\n"
"int16 number_of_peds\n"
"float64 vmax\n"
"\n"
"string start_up_mode  # \"default\", \"wait_timer\", \"trigger_zone\"\n"
"float64 wait_time\n"
"float64 trigger_zone_radius\n"
"\n"
"float64 max_talking_distance\n"
"float64 max_servicing_radius\n"
"\n"
"float64 chatting_probability\n"
"float64 tell_story_probability\n"
"float64 group_talking_probability\n"
"float64 talking_and_walking_probability\n"
"float64 requesting_service_probability\n"
"float64 requesting_guide_probability\n"
"float64 requesting_follower_probability\n"
"\n"
"float64 talking_base_time\n"
"float64 tell_story_base_time\n"
"float64 group_talking_base_time\n"
"float64 talking_and_walking_base_time\n"
"float64 receiving_service_base_time\n"
"float64 requesting_service_base_time\n"
"\n"
"# forces\n"
"float64 force_factor_desired\n"
"float64 force_factor_obstacle\n"
"float64 force_factor_social\n"
"float64 force_factor_robot\n"
"\n"
"geometry_msgs/Point[] waypoints\n"
"int16 waypoint_mode\n"
"\n"
"string configuration\n"
"================================================================================\n"
"MSG: geometry_msgs/Point\n"
"# This contains the position of a point in free space\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
;
  }

  static const char* value(const ::pedsim_msgs::Ped_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::pedsim_msgs::Ped_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.id);
      stream.next(m.pos);
      stream.next(m.type);
      stream.next(m.yaml_file);
      stream.next(m.number_of_peds);
      stream.next(m.vmax);
      stream.next(m.start_up_mode);
      stream.next(m.wait_time);
      stream.next(m.trigger_zone_radius);
      stream.next(m.max_talking_distance);
      stream.next(m.max_servicing_radius);
      stream.next(m.chatting_probability);
      stream.next(m.tell_story_probability);
      stream.next(m.group_talking_probability);
      stream.next(m.talking_and_walking_probability);
      stream.next(m.requesting_service_probability);
      stream.next(m.requesting_guide_probability);
      stream.next(m.requesting_follower_probability);
      stream.next(m.talking_base_time);
      stream.next(m.tell_story_base_time);
      stream.next(m.group_talking_base_time);
      stream.next(m.talking_and_walking_base_time);
      stream.next(m.receiving_service_base_time);
      stream.next(m.requesting_service_base_time);
      stream.next(m.force_factor_desired);
      stream.next(m.force_factor_obstacle);
      stream.next(m.force_factor_social);
      stream.next(m.force_factor_robot);
      stream.next(m.waypoints);
      stream.next(m.waypoint_mode);
      stream.next(m.configuration);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Ped_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::pedsim_msgs::Ped_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::pedsim_msgs::Ped_<ContainerAllocator>& v)
  {
    s << indent << "id: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.id);
    s << indent << "pos: ";
    s << std::endl;
    Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "  ", v.pos);
    s << indent << "type: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.type);
    s << indent << "yaml_file: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.yaml_file);
    s << indent << "number_of_peds: ";
    Printer<int16_t>::stream(s, indent + "  ", v.number_of_peds);
    s << indent << "vmax: ";
    Printer<double>::stream(s, indent + "  ", v.vmax);
    s << indent << "start_up_mode: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.start_up_mode);
    s << indent << "wait_time: ";
    Printer<double>::stream(s, indent + "  ", v.wait_time);
    s << indent << "trigger_zone_radius: ";
    Printer<double>::stream(s, indent + "  ", v.trigger_zone_radius);
    s << indent << "max_talking_distance: ";
    Printer<double>::stream(s, indent + "  ", v.max_talking_distance);
    s << indent << "max_servicing_radius: ";
    Printer<double>::stream(s, indent + "  ", v.max_servicing_radius);
    s << indent << "chatting_probability: ";
    Printer<double>::stream(s, indent + "  ", v.chatting_probability);
    s << indent << "tell_story_probability: ";
    Printer<double>::stream(s, indent + "  ", v.tell_story_probability);
    s << indent << "group_talking_probability: ";
    Printer<double>::stream(s, indent + "  ", v.group_talking_probability);
    s << indent << "talking_and_walking_probability: ";
    Printer<double>::stream(s, indent + "  ", v.talking_and_walking_probability);
    s << indent << "requesting_service_probability: ";
    Printer<double>::stream(s, indent + "  ", v.requesting_service_probability);
    s << indent << "requesting_guide_probability: ";
    Printer<double>::stream(s, indent + "  ", v.requesting_guide_probability);
    s << indent << "requesting_follower_probability: ";
    Printer<double>::stream(s, indent + "  ", v.requesting_follower_probability);
    s << indent << "talking_base_time: ";
    Printer<double>::stream(s, indent + "  ", v.talking_base_time);
    s << indent << "tell_story_base_time: ";
    Printer<double>::stream(s, indent + "  ", v.tell_story_base_time);
    s << indent << "group_talking_base_time: ";
    Printer<double>::stream(s, indent + "  ", v.group_talking_base_time);
    s << indent << "talking_and_walking_base_time: ";
    Printer<double>::stream(s, indent + "  ", v.talking_and_walking_base_time);
    s << indent << "receiving_service_base_time: ";
    Printer<double>::stream(s, indent + "  ", v.receiving_service_base_time);
    s << indent << "requesting_service_base_time: ";
    Printer<double>::stream(s, indent + "  ", v.requesting_service_base_time);
    s << indent << "force_factor_desired: ";
    Printer<double>::stream(s, indent + "  ", v.force_factor_desired);
    s << indent << "force_factor_obstacle: ";
    Printer<double>::stream(s, indent + "  ", v.force_factor_obstacle);
    s << indent << "force_factor_social: ";
    Printer<double>::stream(s, indent + "  ", v.force_factor_social);
    s << indent << "force_factor_robot: ";
    Printer<double>::stream(s, indent + "  ", v.force_factor_robot);
    s << indent << "waypoints[]" << std::endl;
    for (size_t i = 0; i < v.waypoints.size(); ++i)
    {
      s << indent << "  waypoints[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "    ", v.waypoints[i]);
    }
    s << indent << "waypoint_mode: ";
    Printer<int16_t>::stream(s, indent + "  ", v.waypoint_mode);
    s << indent << "configuration: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.configuration);
  }
};

} // namespace message_operations
} // namespace ros

#endif // PEDSIM_MSGS_MESSAGE_PED_H
