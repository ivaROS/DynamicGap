// Generated by gencpp from file pedsim_msgs/SemanticDatum.msg
// DO NOT EDIT!


#ifndef PEDSIM_MSGS_MESSAGE_SEMANTICDATUM_H
#define PEDSIM_MSGS_MESSAGE_SEMANTICDATUM_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <geometry_msgs/Point.h>

namespace pedsim_msgs
{
template <class ContainerAllocator>
struct SemanticDatum_
{
  typedef SemanticDatum_<ContainerAllocator> Type;

  SemanticDatum_()
    : location()
    , evidence(0.0)  {
    }
  SemanticDatum_(const ContainerAllocator& _alloc)
    : location(_alloc)
    , evidence(0.0)  {
  (void)_alloc;
    }



   typedef  ::geometry_msgs::Point_<ContainerAllocator>  _location_type;
  _location_type location;

   typedef float _evidence_type;
  _evidence_type evidence;





  typedef boost::shared_ptr< ::pedsim_msgs::SemanticDatum_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::pedsim_msgs::SemanticDatum_<ContainerAllocator> const> ConstPtr;

}; // struct SemanticDatum_

typedef ::pedsim_msgs::SemanticDatum_<std::allocator<void> > SemanticDatum;

typedef boost::shared_ptr< ::pedsim_msgs::SemanticDatum > SemanticDatumPtr;
typedef boost::shared_ptr< ::pedsim_msgs::SemanticDatum const> SemanticDatumConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::pedsim_msgs::SemanticDatum_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::pedsim_msgs::SemanticDatum_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::pedsim_msgs::SemanticDatum_<ContainerAllocator1> & lhs, const ::pedsim_msgs::SemanticDatum_<ContainerAllocator2> & rhs)
{
  return lhs.location == rhs.location &&
    lhs.evidence == rhs.evidence;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::pedsim_msgs::SemanticDatum_<ContainerAllocator1> & lhs, const ::pedsim_msgs::SemanticDatum_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace pedsim_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::pedsim_msgs::SemanticDatum_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::pedsim_msgs::SemanticDatum_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::pedsim_msgs::SemanticDatum_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::pedsim_msgs::SemanticDatum_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::pedsim_msgs::SemanticDatum_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::pedsim_msgs::SemanticDatum_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::pedsim_msgs::SemanticDatum_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ad0a2aaed128f76f0b996bf1dd0aa14d";
  }

  static const char* value(const ::pedsim_msgs::SemanticDatum_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xad0a2aaed128f76fULL;
  static const uint64_t static_value2 = 0x0b996bf1dd0aa14dULL;
};

template<class ContainerAllocator>
struct DataType< ::pedsim_msgs::SemanticDatum_<ContainerAllocator> >
{
  static const char* value()
  {
    return "pedsim_msgs/SemanticDatum";
  }

  static const char* value(const ::pedsim_msgs::SemanticDatum_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::pedsim_msgs::SemanticDatum_<ContainerAllocator> >
{
  static const char* value()
  {
    return "geometry_msgs/Point location\n"
"float32 evidence\n"
"================================================================================\n"
"MSG: geometry_msgs/Point\n"
"# This contains the position of a point in free space\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
;
  }

  static const char* value(const ::pedsim_msgs::SemanticDatum_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::pedsim_msgs::SemanticDatum_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.location);
      stream.next(m.evidence);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct SemanticDatum_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::pedsim_msgs::SemanticDatum_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::pedsim_msgs::SemanticDatum_<ContainerAllocator>& v)
  {
    s << indent << "location: ";
    s << std::endl;
    Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "  ", v.location);
    s << indent << "evidence: ";
    Printer<float>::stream(s, indent + "  ", v.evidence);
  }
};

} // namespace message_operations
} // namespace ros

#endif // PEDSIM_MSGS_MESSAGE_SEMANTICDATUM_H
