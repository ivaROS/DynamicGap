// Generated by gencpp from file pedsim_msgs/Wall.msg
// DO NOT EDIT!


#ifndef PEDSIM_MSGS_MESSAGE_WALL_H
#define PEDSIM_MSGS_MESSAGE_WALL_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <geometry_msgs/Point.h>
#include <geometry_msgs/Point.h>

namespace pedsim_msgs
{
template <class ContainerAllocator>
struct Wall_
{
  typedef Wall_<ContainerAllocator> Type;

  Wall_()
    : start()
    , end()
    , layer(0)  {
    }
  Wall_(const ContainerAllocator& _alloc)
    : start(_alloc)
    , end(_alloc)
    , layer(0)  {
  (void)_alloc;
    }



   typedef  ::geometry_msgs::Point_<ContainerAllocator>  _start_type;
  _start_type start;

   typedef  ::geometry_msgs::Point_<ContainerAllocator>  _end_type;
  _end_type end;

   typedef uint8_t _layer_type;
  _layer_type layer;





  typedef boost::shared_ptr< ::pedsim_msgs::Wall_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::pedsim_msgs::Wall_<ContainerAllocator> const> ConstPtr;

}; // struct Wall_

typedef ::pedsim_msgs::Wall_<std::allocator<void> > Wall;

typedef boost::shared_ptr< ::pedsim_msgs::Wall > WallPtr;
typedef boost::shared_ptr< ::pedsim_msgs::Wall const> WallConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::pedsim_msgs::Wall_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::pedsim_msgs::Wall_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::pedsim_msgs::Wall_<ContainerAllocator1> & lhs, const ::pedsim_msgs::Wall_<ContainerAllocator2> & rhs)
{
  return lhs.start == rhs.start &&
    lhs.end == rhs.end &&
    lhs.layer == rhs.layer;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::pedsim_msgs::Wall_<ContainerAllocator1> & lhs, const ::pedsim_msgs::Wall_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace pedsim_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::pedsim_msgs::Wall_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::pedsim_msgs::Wall_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::pedsim_msgs::Wall_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::pedsim_msgs::Wall_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::pedsim_msgs::Wall_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::pedsim_msgs::Wall_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::pedsim_msgs::Wall_<ContainerAllocator> >
{
  static const char* value()
  {
    return "17c466210b91051d5119050ec1c785db";
  }

  static const char* value(const ::pedsim_msgs::Wall_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x17c466210b91051dULL;
  static const uint64_t static_value2 = 0x5119050ec1c785dbULL;
};

template<class ContainerAllocator>
struct DataType< ::pedsim_msgs::Wall_<ContainerAllocator> >
{
  static const char* value()
  {
    return "pedsim_msgs/Wall";
  }

  static const char* value(const ::pedsim_msgs::Wall_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::pedsim_msgs::Wall_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# A line obstacle in the simulator.\n"
"\n"
"geometry_msgs/Point start\n"
"geometry_msgs/Point end\n"
"uint8 layer\n"
"================================================================================\n"
"MSG: geometry_msgs/Point\n"
"# This contains the position of a point in free space\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
;
  }

  static const char* value(const ::pedsim_msgs::Wall_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::pedsim_msgs::Wall_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.start);
      stream.next(m.end);
      stream.next(m.layer);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Wall_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::pedsim_msgs::Wall_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::pedsim_msgs::Wall_<ContainerAllocator>& v)
  {
    s << indent << "start: ";
    s << std::endl;
    Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "  ", v.start);
    s << indent << "end: ";
    s << std::endl;
    Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "  ", v.end);
    s << indent << "layer: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.layer);
  }
};

} // namespace message_operations
} // namespace ros

#endif // PEDSIM_MSGS_MESSAGE_WALL_H
