// Generated by gencpp from file pedsim_msgs/AgentForce.msg
// DO NOT EDIT!


#ifndef PEDSIM_MSGS_MESSAGE_AGENTFORCE_H
#define PEDSIM_MSGS_MESSAGE_AGENTFORCE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <geometry_msgs/Vector3.h>
#include <geometry_msgs/Vector3.h>
#include <geometry_msgs/Vector3.h>
#include <geometry_msgs/Vector3.h>
#include <geometry_msgs/Vector3.h>
#include <geometry_msgs/Vector3.h>
#include <geometry_msgs/Vector3.h>
#include <geometry_msgs/Vector3.h>
#include <geometry_msgs/Vector3.h>
#include <geometry_msgs/Vector3.h>

namespace pedsim_msgs
{
template <class ContainerAllocator>
struct AgentForce_
{
  typedef AgentForce_<ContainerAllocator> Type;

  AgentForce_()
    : vmax(0.0)
    , desired_ffactor(0.0)
    , obstacle_ffactor(0.0)
    , social_ffactor(0.0)
    , robot_ffactor(0.0)
    , desired_force()
    , obstacle_force()
    , social_force()
    , group_coherence_force()
    , group_gaze_force()
    , group_repulsion_force()
    , random_force()
    , keep_distance_force()
    , robot_force()
    , force()  {
    }
  AgentForce_(const ContainerAllocator& _alloc)
    : vmax(0.0)
    , desired_ffactor(0.0)
    , obstacle_ffactor(0.0)
    , social_ffactor(0.0)
    , robot_ffactor(0.0)
    , desired_force(_alloc)
    , obstacle_force(_alloc)
    , social_force(_alloc)
    , group_coherence_force(_alloc)
    , group_gaze_force(_alloc)
    , group_repulsion_force(_alloc)
    , random_force(_alloc)
    , keep_distance_force(_alloc)
    , robot_force(_alloc)
    , force(_alloc)  {
  (void)_alloc;
    }



   typedef double _vmax_type;
  _vmax_type vmax;

   typedef double _desired_ffactor_type;
  _desired_ffactor_type desired_ffactor;

   typedef double _obstacle_ffactor_type;
  _obstacle_ffactor_type obstacle_ffactor;

   typedef double _social_ffactor_type;
  _social_ffactor_type social_ffactor;

   typedef double _robot_ffactor_type;
  _robot_ffactor_type robot_ffactor;

   typedef  ::geometry_msgs::Vector3_<ContainerAllocator>  _desired_force_type;
  _desired_force_type desired_force;

   typedef  ::geometry_msgs::Vector3_<ContainerAllocator>  _obstacle_force_type;
  _obstacle_force_type obstacle_force;

   typedef  ::geometry_msgs::Vector3_<ContainerAllocator>  _social_force_type;
  _social_force_type social_force;

   typedef  ::geometry_msgs::Vector3_<ContainerAllocator>  _group_coherence_force_type;
  _group_coherence_force_type group_coherence_force;

   typedef  ::geometry_msgs::Vector3_<ContainerAllocator>  _group_gaze_force_type;
  _group_gaze_force_type group_gaze_force;

   typedef  ::geometry_msgs::Vector3_<ContainerAllocator>  _group_repulsion_force_type;
  _group_repulsion_force_type group_repulsion_force;

   typedef  ::geometry_msgs::Vector3_<ContainerAllocator>  _random_force_type;
  _random_force_type random_force;

   typedef  ::geometry_msgs::Vector3_<ContainerAllocator>  _keep_distance_force_type;
  _keep_distance_force_type keep_distance_force;

   typedef  ::geometry_msgs::Vector3_<ContainerAllocator>  _robot_force_type;
  _robot_force_type robot_force;

   typedef  ::geometry_msgs::Vector3_<ContainerAllocator>  _force_type;
  _force_type force;





  typedef boost::shared_ptr< ::pedsim_msgs::AgentForce_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::pedsim_msgs::AgentForce_<ContainerAllocator> const> ConstPtr;

}; // struct AgentForce_

typedef ::pedsim_msgs::AgentForce_<std::allocator<void> > AgentForce;

typedef boost::shared_ptr< ::pedsim_msgs::AgentForce > AgentForcePtr;
typedef boost::shared_ptr< ::pedsim_msgs::AgentForce const> AgentForceConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::pedsim_msgs::AgentForce_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::pedsim_msgs::AgentForce_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::pedsim_msgs::AgentForce_<ContainerAllocator1> & lhs, const ::pedsim_msgs::AgentForce_<ContainerAllocator2> & rhs)
{
  return lhs.vmax == rhs.vmax &&
    lhs.desired_ffactor == rhs.desired_ffactor &&
    lhs.obstacle_ffactor == rhs.obstacle_ffactor &&
    lhs.social_ffactor == rhs.social_ffactor &&
    lhs.robot_ffactor == rhs.robot_ffactor &&
    lhs.desired_force == rhs.desired_force &&
    lhs.obstacle_force == rhs.obstacle_force &&
    lhs.social_force == rhs.social_force &&
    lhs.group_coherence_force == rhs.group_coherence_force &&
    lhs.group_gaze_force == rhs.group_gaze_force &&
    lhs.group_repulsion_force == rhs.group_repulsion_force &&
    lhs.random_force == rhs.random_force &&
    lhs.keep_distance_force == rhs.keep_distance_force &&
    lhs.robot_force == rhs.robot_force &&
    lhs.force == rhs.force;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::pedsim_msgs::AgentForce_<ContainerAllocator1> & lhs, const ::pedsim_msgs::AgentForce_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace pedsim_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::pedsim_msgs::AgentForce_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::pedsim_msgs::AgentForce_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::pedsim_msgs::AgentForce_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::pedsim_msgs::AgentForce_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::pedsim_msgs::AgentForce_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::pedsim_msgs::AgentForce_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::pedsim_msgs::AgentForce_<ContainerAllocator> >
{
  static const char* value()
  {
    return "661b76c3cc3cc690dfae53c8d9dd9da9";
  }

  static const char* value(const ::pedsim_msgs::AgentForce_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x661b76c3cc3cc690ULL;
  static const uint64_t static_value2 = 0xdfae53c8d9dd9da9ULL;
};

template<class ContainerAllocator>
struct DataType< ::pedsim_msgs::AgentForce_<ContainerAllocator> >
{
  static const char* value()
  {
    return "pedsim_msgs/AgentForce";
  }

  static const char* value(const ::pedsim_msgs::AgentForce_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::pedsim_msgs::AgentForce_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# Forces acting on an agent.\n"
"\n"
"# Max Speed\n"
"float64 vmax\n"
"\n"
"# Force Factors\n"
"float64 desired_ffactor\n"
"float64 obstacle_ffactor\n"
"float64 social_ffactor\n"
"float64 robot_ffactor\n"
"\n"
"# Basic SFM forces.\n"
"geometry_msgs/Vector3 desired_force\n"
"geometry_msgs/Vector3 obstacle_force\n"
"geometry_msgs/Vector3 social_force\n"
"\n"
"# Additional Group Forces\n"
"geometry_msgs/Vector3 group_coherence_force\n"
"geometry_msgs/Vector3 group_gaze_force\n"
"geometry_msgs/Vector3 group_repulsion_force\n"
"\n"
"# Extra stabilization/custom forces.\n"
"geometry_msgs/Vector3 random_force\n"
"geometry_msgs/Vector3 keep_distance_force\n"
"geometry_msgs/Vector3 robot_force\n"
"\n"
"# Total forces\n"
"geometry_msgs/Vector3 force\n"
"================================================================================\n"
"MSG: geometry_msgs/Vector3\n"
"# This represents a vector in free space. \n"
"# It is only meant to represent a direction. Therefore, it does not\n"
"# make sense to apply a translation to it (e.g., when applying a \n"
"# generic rigid transformation to a Vector3, tf2 will only apply the\n"
"# rotation). If you want your data to be translatable too, use the\n"
"# geometry_msgs/Point message instead.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
;
  }

  static const char* value(const ::pedsim_msgs::AgentForce_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::pedsim_msgs::AgentForce_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.vmax);
      stream.next(m.desired_ffactor);
      stream.next(m.obstacle_ffactor);
      stream.next(m.social_ffactor);
      stream.next(m.robot_ffactor);
      stream.next(m.desired_force);
      stream.next(m.obstacle_force);
      stream.next(m.social_force);
      stream.next(m.group_coherence_force);
      stream.next(m.group_gaze_force);
      stream.next(m.group_repulsion_force);
      stream.next(m.random_force);
      stream.next(m.keep_distance_force);
      stream.next(m.robot_force);
      stream.next(m.force);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct AgentForce_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::pedsim_msgs::AgentForce_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::pedsim_msgs::AgentForce_<ContainerAllocator>& v)
  {
    s << indent << "vmax: ";
    Printer<double>::stream(s, indent + "  ", v.vmax);
    s << indent << "desired_ffactor: ";
    Printer<double>::stream(s, indent + "  ", v.desired_ffactor);
    s << indent << "obstacle_ffactor: ";
    Printer<double>::stream(s, indent + "  ", v.obstacle_ffactor);
    s << indent << "social_ffactor: ";
    Printer<double>::stream(s, indent + "  ", v.social_ffactor);
    s << indent << "robot_ffactor: ";
    Printer<double>::stream(s, indent + "  ", v.robot_ffactor);
    s << indent << "desired_force: ";
    s << std::endl;
    Printer< ::geometry_msgs::Vector3_<ContainerAllocator> >::stream(s, indent + "  ", v.desired_force);
    s << indent << "obstacle_force: ";
    s << std::endl;
    Printer< ::geometry_msgs::Vector3_<ContainerAllocator> >::stream(s, indent + "  ", v.obstacle_force);
    s << indent << "social_force: ";
    s << std::endl;
    Printer< ::geometry_msgs::Vector3_<ContainerAllocator> >::stream(s, indent + "  ", v.social_force);
    s << indent << "group_coherence_force: ";
    s << std::endl;
    Printer< ::geometry_msgs::Vector3_<ContainerAllocator> >::stream(s, indent + "  ", v.group_coherence_force);
    s << indent << "group_gaze_force: ";
    s << std::endl;
    Printer< ::geometry_msgs::Vector3_<ContainerAllocator> >::stream(s, indent + "  ", v.group_gaze_force);
    s << indent << "group_repulsion_force: ";
    s << std::endl;
    Printer< ::geometry_msgs::Vector3_<ContainerAllocator> >::stream(s, indent + "  ", v.group_repulsion_force);
    s << indent << "random_force: ";
    s << std::endl;
    Printer< ::geometry_msgs::Vector3_<ContainerAllocator> >::stream(s, indent + "  ", v.random_force);
    s << indent << "keep_distance_force: ";
    s << std::endl;
    Printer< ::geometry_msgs::Vector3_<ContainerAllocator> >::stream(s, indent + "  ", v.keep_distance_force);
    s << indent << "robot_force: ";
    s << std::endl;
    Printer< ::geometry_msgs::Vector3_<ContainerAllocator> >::stream(s, indent + "  ", v.robot_force);
    s << indent << "force: ";
    s << std::endl;
    Printer< ::geometry_msgs::Vector3_<ContainerAllocator> >::stream(s, indent + "  ", v.force);
  }
};

} // namespace message_operations
} // namespace ros

#endif // PEDSIM_MSGS_MESSAGE_AGENTFORCE_H
