// Generated by gencpp from file mpc_local_planner_msgs/OptimalControlResult.msg
// DO NOT EDIT!


#ifndef MPC_LOCAL_PLANNER_MSGS_MESSAGE_OPTIMALCONTROLRESULT_H
#define MPC_LOCAL_PLANNER_MSGS_MESSAGE_OPTIMALCONTROLRESULT_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace mpc_local_planner_msgs
{
template <class ContainerAllocator>
struct OptimalControlResult_
{
  typedef OptimalControlResult_<ContainerAllocator> Type;

  OptimalControlResult_()
    : header()
    , dim_states(0)
    , dim_controls(0)
    , time_states()
    , states()
    , time_controls()
    , controls()
    , optimal_solution_found(false)
    , cpu_time(0.0)  {
    }
  OptimalControlResult_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , dim_states(0)
    , dim_controls(0)
    , time_states(_alloc)
    , states(_alloc)
    , time_controls(_alloc)
    , controls(_alloc)
    , optimal_solution_found(false)
    , cpu_time(0.0)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef int64_t _dim_states_type;
  _dim_states_type dim_states;

   typedef int64_t _dim_controls_type;
  _dim_controls_type dim_controls;

   typedef std::vector<double, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<double>> _time_states_type;
  _time_states_type time_states;

   typedef std::vector<double, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<double>> _states_type;
  _states_type states;

   typedef std::vector<double, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<double>> _time_controls_type;
  _time_controls_type time_controls;

   typedef std::vector<double, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<double>> _controls_type;
  _controls_type controls;

   typedef uint8_t _optimal_solution_found_type;
  _optimal_solution_found_type optimal_solution_found;

   typedef double _cpu_time_type;
  _cpu_time_type cpu_time;





  typedef boost::shared_ptr< ::mpc_local_planner_msgs::OptimalControlResult_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::mpc_local_planner_msgs::OptimalControlResult_<ContainerAllocator> const> ConstPtr;

}; // struct OptimalControlResult_

typedef ::mpc_local_planner_msgs::OptimalControlResult_<std::allocator<void> > OptimalControlResult;

typedef boost::shared_ptr< ::mpc_local_planner_msgs::OptimalControlResult > OptimalControlResultPtr;
typedef boost::shared_ptr< ::mpc_local_planner_msgs::OptimalControlResult const> OptimalControlResultConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::mpc_local_planner_msgs::OptimalControlResult_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::mpc_local_planner_msgs::OptimalControlResult_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::mpc_local_planner_msgs::OptimalControlResult_<ContainerAllocator1> & lhs, const ::mpc_local_planner_msgs::OptimalControlResult_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.dim_states == rhs.dim_states &&
    lhs.dim_controls == rhs.dim_controls &&
    lhs.time_states == rhs.time_states &&
    lhs.states == rhs.states &&
    lhs.time_controls == rhs.time_controls &&
    lhs.controls == rhs.controls &&
    lhs.optimal_solution_found == rhs.optimal_solution_found &&
    lhs.cpu_time == rhs.cpu_time;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::mpc_local_planner_msgs::OptimalControlResult_<ContainerAllocator1> & lhs, const ::mpc_local_planner_msgs::OptimalControlResult_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace mpc_local_planner_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::mpc_local_planner_msgs::OptimalControlResult_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::mpc_local_planner_msgs::OptimalControlResult_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::mpc_local_planner_msgs::OptimalControlResult_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::mpc_local_planner_msgs::OptimalControlResult_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mpc_local_planner_msgs::OptimalControlResult_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mpc_local_planner_msgs::OptimalControlResult_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::mpc_local_planner_msgs::OptimalControlResult_<ContainerAllocator> >
{
  static const char* value()
  {
    return "43eac4f3a65752bab175326ddc347c3d";
  }

  static const char* value(const ::mpc_local_planner_msgs::OptimalControlResult_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x43eac4f3a65752baULL;
  static const uint64_t static_value2 = 0xb175326ddc347c3dULL;
};

template<class ContainerAllocator>
struct DataType< ::mpc_local_planner_msgs::OptimalControlResult_<ContainerAllocator> >
{
  static const char* value()
  {
    return "mpc_local_planner_msgs/OptimalControlResult";
  }

  static const char* value(const ::mpc_local_planner_msgs::OptimalControlResult_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::mpc_local_planner_msgs::OptimalControlResult_<ContainerAllocator> >
{
  static const char* value()
  {
    return "std_msgs/Header header\n"
"\n"
"int64 dim_states\n"
"int64 dim_controls\n"
"\n"
"float64[] time_states\n"
"float64[] states # Column Major\n"
"float64[] time_controls\n"
"float64[] controls # Column Major\n"
"\n"
"bool optimal_solution_found\n"
"float64 cpu_time\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
;
  }

  static const char* value(const ::mpc_local_planner_msgs::OptimalControlResult_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::mpc_local_planner_msgs::OptimalControlResult_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.dim_states);
      stream.next(m.dim_controls);
      stream.next(m.time_states);
      stream.next(m.states);
      stream.next(m.time_controls);
      stream.next(m.controls);
      stream.next(m.optimal_solution_found);
      stream.next(m.cpu_time);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct OptimalControlResult_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::mpc_local_planner_msgs::OptimalControlResult_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::mpc_local_planner_msgs::OptimalControlResult_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "dim_states: ";
    Printer<int64_t>::stream(s, indent + "  ", v.dim_states);
    s << indent << "dim_controls: ";
    Printer<int64_t>::stream(s, indent + "  ", v.dim_controls);
    s << indent << "time_states[]" << std::endl;
    for (size_t i = 0; i < v.time_states.size(); ++i)
    {
      s << indent << "  time_states[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.time_states[i]);
    }
    s << indent << "states[]" << std::endl;
    for (size_t i = 0; i < v.states.size(); ++i)
    {
      s << indent << "  states[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.states[i]);
    }
    s << indent << "time_controls[]" << std::endl;
    for (size_t i = 0; i < v.time_controls.size(); ++i)
    {
      s << indent << "  time_controls[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.time_controls[i]);
    }
    s << indent << "controls[]" << std::endl;
    for (size_t i = 0; i < v.controls.size(); ++i)
    {
      s << indent << "  controls[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.controls[i]);
    }
    s << indent << "optimal_solution_found: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.optimal_solution_found);
    s << indent << "cpu_time: ";
    Printer<double>::stream(s, indent + "  ", v.cpu_time);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MPC_LOCAL_PLANNER_MSGS_MESSAGE_OPTIMALCONTROLRESULT_H
