// Generated by gencpp from file plan_msgs/MakeGlobalPlanRequest.msg
// DO NOT EDIT!


#ifndef PLAN_MSGS_MESSAGE_MAKEGLOBALPLANREQUEST_H
#define PLAN_MSGS_MESSAGE_MAKEGLOBALPLANREQUEST_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <geometry_msgs/PoseStamped.h>
#include <geometry_msgs/PoseStamped.h>

namespace plan_msgs
{
template <class ContainerAllocator>
struct MakeGlobalPlanRequest_
{
  typedef MakeGlobalPlanRequest_<ContainerAllocator> Type;

  MakeGlobalPlanRequest_()
    : start()
    , goal()
    , tolerance(0.0)  {
    }
  MakeGlobalPlanRequest_(const ContainerAllocator& _alloc)
    : start(_alloc)
    , goal(_alloc)
    , tolerance(0.0)  {
  (void)_alloc;
    }



   typedef  ::geometry_msgs::PoseStamped_<ContainerAllocator>  _start_type;
  _start_type start;

   typedef  ::geometry_msgs::PoseStamped_<ContainerAllocator>  _goal_type;
  _goal_type goal;

   typedef float _tolerance_type;
  _tolerance_type tolerance;





  typedef boost::shared_ptr< ::plan_msgs::MakeGlobalPlanRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::plan_msgs::MakeGlobalPlanRequest_<ContainerAllocator> const> ConstPtr;

}; // struct MakeGlobalPlanRequest_

typedef ::plan_msgs::MakeGlobalPlanRequest_<std::allocator<void> > MakeGlobalPlanRequest;

typedef boost::shared_ptr< ::plan_msgs::MakeGlobalPlanRequest > MakeGlobalPlanRequestPtr;
typedef boost::shared_ptr< ::plan_msgs::MakeGlobalPlanRequest const> MakeGlobalPlanRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::plan_msgs::MakeGlobalPlanRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::plan_msgs::MakeGlobalPlanRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::plan_msgs::MakeGlobalPlanRequest_<ContainerAllocator1> & lhs, const ::plan_msgs::MakeGlobalPlanRequest_<ContainerAllocator2> & rhs)
{
  return lhs.start == rhs.start &&
    lhs.goal == rhs.goal &&
    lhs.tolerance == rhs.tolerance;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::plan_msgs::MakeGlobalPlanRequest_<ContainerAllocator1> & lhs, const ::plan_msgs::MakeGlobalPlanRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace plan_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::plan_msgs::MakeGlobalPlanRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::plan_msgs::MakeGlobalPlanRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::plan_msgs::MakeGlobalPlanRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::plan_msgs::MakeGlobalPlanRequest_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::plan_msgs::MakeGlobalPlanRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::plan_msgs::MakeGlobalPlanRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::plan_msgs::MakeGlobalPlanRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "e25a43e0752bcca599a8c2eef8282df8";
  }

  static const char* value(const ::plan_msgs::MakeGlobalPlanRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xe25a43e0752bcca5ULL;
  static const uint64_t static_value2 = 0x99a8c2eef8282df8ULL;
};

template<class ContainerAllocator>
struct DataType< ::plan_msgs::MakeGlobalPlanRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "plan_msgs/MakeGlobalPlanRequest";
  }

  static const char* value(const ::plan_msgs::MakeGlobalPlanRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::plan_msgs::MakeGlobalPlanRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "geometry_msgs/PoseStamped start\n"
"geometry_msgs/PoseStamped goal\n"
"float32 tolerance\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/PoseStamped\n"
"# A Pose with reference coordinate frame and timestamp\n"
"Header header\n"
"Pose pose\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Pose\n"
"# A representation of pose in free space, composed of position and orientation. \n"
"Point position\n"
"Quaternion orientation\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Point\n"
"# This contains the position of a point in free space\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Quaternion\n"
"# This represents an orientation in free space in quaternion form.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"float64 w\n"
;
  }

  static const char* value(const ::plan_msgs::MakeGlobalPlanRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::plan_msgs::MakeGlobalPlanRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.start);
      stream.next(m.goal);
      stream.next(m.tolerance);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct MakeGlobalPlanRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::plan_msgs::MakeGlobalPlanRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::plan_msgs::MakeGlobalPlanRequest_<ContainerAllocator>& v)
  {
    s << indent << "start: ";
    s << std::endl;
    Printer< ::geometry_msgs::PoseStamped_<ContainerAllocator> >::stream(s, indent + "  ", v.start);
    s << indent << "goal: ";
    s << std::endl;
    Printer< ::geometry_msgs::PoseStamped_<ContainerAllocator> >::stream(s, indent + "  ", v.goal);
    s << indent << "tolerance: ";
    Printer<float>::stream(s, indent + "  ", v.tolerance);
  }
};

} // namespace message_operations
} // namespace ros

#endif // PLAN_MSGS_MESSAGE_MAKEGLOBALPLANREQUEST_H
