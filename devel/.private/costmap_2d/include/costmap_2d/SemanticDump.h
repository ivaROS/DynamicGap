// Generated by gencpp from file costmap_2d/SemanticDump.msg
// DO NOT EDIT!


#ifndef COSTMAP_2D_MESSAGE_SEMANTICDUMP_H
#define COSTMAP_2D_MESSAGE_SEMANTICDUMP_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <pedsim_msgs/SemanticData.h>

namespace costmap_2d
{
template <class ContainerAllocator>
struct SemanticDump_
{
  typedef SemanticDump_<ContainerAllocator> Type;

  SemanticDump_()
    : layers()  {
    }
  SemanticDump_(const ContainerAllocator& _alloc)
    : layers(_alloc)  {
  (void)_alloc;
    }



   typedef std::vector< ::pedsim_msgs::SemanticData_<ContainerAllocator> , typename std::allocator_traits<ContainerAllocator>::template rebind_alloc< ::pedsim_msgs::SemanticData_<ContainerAllocator> >> _layers_type;
  _layers_type layers;





  typedef boost::shared_ptr< ::costmap_2d::SemanticDump_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::costmap_2d::SemanticDump_<ContainerAllocator> const> ConstPtr;

}; // struct SemanticDump_

typedef ::costmap_2d::SemanticDump_<std::allocator<void> > SemanticDump;

typedef boost::shared_ptr< ::costmap_2d::SemanticDump > SemanticDumpPtr;
typedef boost::shared_ptr< ::costmap_2d::SemanticDump const> SemanticDumpConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::costmap_2d::SemanticDump_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::costmap_2d::SemanticDump_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::costmap_2d::SemanticDump_<ContainerAllocator1> & lhs, const ::costmap_2d::SemanticDump_<ContainerAllocator2> & rhs)
{
  return lhs.layers == rhs.layers;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::costmap_2d::SemanticDump_<ContainerAllocator1> & lhs, const ::costmap_2d::SemanticDump_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace costmap_2d

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::costmap_2d::SemanticDump_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::costmap_2d::SemanticDump_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::costmap_2d::SemanticDump_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::costmap_2d::SemanticDump_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::costmap_2d::SemanticDump_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::costmap_2d::SemanticDump_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::costmap_2d::SemanticDump_<ContainerAllocator> >
{
  static const char* value()
  {
    return "f23a90c5da8e0d6842e9dec8eaee0281";
  }

  static const char* value(const ::costmap_2d::SemanticDump_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xf23a90c5da8e0d68ULL;
  static const uint64_t static_value2 = 0x42e9dec8eaee0281ULL;
};

template<class ContainerAllocator>
struct DataType< ::costmap_2d::SemanticDump_<ContainerAllocator> >
{
  static const char* value()
  {
    return "costmap_2d/SemanticDump";
  }

  static const char* value(const ::costmap_2d::SemanticDump_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::costmap_2d::SemanticDump_<ContainerAllocator> >
{
  static const char* value()
  {
    return "pedsim_msgs/SemanticData[] layers\n"
"================================================================================\n"
"MSG: pedsim_msgs/SemanticData\n"
"std_msgs/Header header\n"
"pedsim_msgs/SemanticDatum[] points\n"
"string type\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
"\n"
"================================================================================\n"
"MSG: pedsim_msgs/SemanticDatum\n"
"geometry_msgs/Point location\n"
"float32 evidence\n"
"================================================================================\n"
"MSG: geometry_msgs/Point\n"
"# This contains the position of a point in free space\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
;
  }

  static const char* value(const ::costmap_2d::SemanticDump_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::costmap_2d::SemanticDump_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.layers);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct SemanticDump_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::costmap_2d::SemanticDump_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::costmap_2d::SemanticDump_<ContainerAllocator>& v)
  {
    s << indent << "layers[]" << std::endl;
    for (size_t i = 0; i < v.layers.size(); ++i)
    {
      s << indent << "  layers[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::pedsim_msgs::SemanticData_<ContainerAllocator> >::stream(s, indent + "    ", v.layers[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // COSTMAP_2D_MESSAGE_SEMANTICDUMP_H
