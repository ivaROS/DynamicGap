# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from costmap_2d/GetDumpRequest.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class GetDumpRequest(genpy.Message):
  _md5sum = "d41d8cd98f00b204e9800998ecf8427e"
  _type = "costmap_2d/GetDumpRequest"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """"""
  __slots__ = []
  _slot_types = []

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(GetDumpRequest, self).__init__(*args, **kwds)

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      pass
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      pass
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from costmap_2d/GetDumpResponse.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import costmap_2d.msg
import genpy
import geometry_msgs.msg
import nav_msgs.msg
import pedsim_msgs.msg
import sensor_msgs.msg
import std_msgs.msg

class GetDumpResponse(genpy.Message):
  _md5sum = "e8c4a22fca4ff331263a69635b5c452d"
  _type = "costmap_2d/GetDumpResponse"
  _has_header = True  # flag to mark the presence of a Header object
  _full_text = """Header header
nav_msgs/OccupancyGrid costmap
ObstacleDump[] obstacle_layers
SemanticDump[] semantic_layers

================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
string frame_id

================================================================================
MSG: nav_msgs/OccupancyGrid
# This represents a 2-D grid map, in which each cell represents the probability of
# occupancy.

Header header 

#MetaData for the map
MapMetaData info

# The map data, in row-major order, starting with (0,0).  Occupancy
# probabilities are in the range [0,100].  Unknown is -1.
int8[] data

================================================================================
MSG: nav_msgs/MapMetaData
# This hold basic information about the characterists of the OccupancyGrid

# The time at which the map was loaded
time map_load_time
# The map resolution [m/cell]
float32 resolution
# Map width [cells]
uint32 width
# Map height [cells]
uint32 height
# The origin of the map [m, m, rad].  This is the real-world pose of the
# cell (0,0) in the map.
geometry_msgs/Pose origin
================================================================================
MSG: geometry_msgs/Pose
# A representation of pose in free space, composed of position and orientation. 
Point position
Quaternion orientation

================================================================================
MSG: geometry_msgs/Point
# This contains the position of a point in free space
float64 x
float64 y
float64 z

================================================================================
MSG: geometry_msgs/Quaternion
# This represents an orientation in free space in quaternion form.

float64 x
float64 y
float64 z
float64 w

================================================================================
MSG: costmap_2d/ObstacleDump
sensor_msgs/PointCloud2[] scans
================================================================================
MSG: sensor_msgs/PointCloud2
# This message holds a collection of N-dimensional points, which may
# contain additional information such as normals, intensity, etc. The
# point data is stored as a binary blob, its layout described by the
# contents of the "fields" array.

# The point cloud data may be organized 2d (image-like) or 1d
# (unordered). Point clouds organized as 2d images may be produced by
# camera depth sensors such as stereo or time-of-flight.

# Time of sensor data acquisition, and the coordinate frame ID (for 3d
# points).
Header header

# 2D structure of the point cloud. If the cloud is unordered, height is
# 1 and width is the length of the point cloud.
uint32 height
uint32 width

# Describes the channels and their layout in the binary data blob.
PointField[] fields

bool    is_bigendian # Is this data bigendian?
uint32  point_step   # Length of a point in bytes
uint32  row_step     # Length of a row in bytes
uint8[] data         # Actual point data, size is (row_step*height)

bool is_dense        # True if there are no invalid points

================================================================================
MSG: sensor_msgs/PointField
# This message holds the description of one point entry in the
# PointCloud2 message format.
uint8 INT8    = 1
uint8 UINT8   = 2
uint8 INT16   = 3
uint8 UINT16  = 4
uint8 INT32   = 5
uint8 UINT32  = 6
uint8 FLOAT32 = 7
uint8 FLOAT64 = 8

string name      # Name of field
uint32 offset    # Offset from start of point struct
uint8  datatype  # Datatype enumeration, see above
uint32 count     # How many elements in the field

================================================================================
MSG: costmap_2d/SemanticDump
pedsim_msgs/SemanticData[] layers
================================================================================
MSG: pedsim_msgs/SemanticData
std_msgs/Header header
pedsim_msgs/SemanticDatum[] points
string type
================================================================================
MSG: pedsim_msgs/SemanticDatum
geometry_msgs/Point location
float32 evidence"""
  __slots__ = ['header','costmap','obstacle_layers','semantic_layers']
  _slot_types = ['std_msgs/Header','nav_msgs/OccupancyGrid','costmap_2d/ObstacleDump[]','costmap_2d/SemanticDump[]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header,costmap,obstacle_layers,semantic_layers

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(GetDumpResponse, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.costmap is None:
        self.costmap = nav_msgs.msg.OccupancyGrid()
      if self.obstacle_layers is None:
        self.obstacle_layers = []
      if self.semantic_layers is None:
        self.semantic_layers = []
    else:
      self.header = std_msgs.msg.Header()
      self.costmap = nav_msgs.msg.OccupancyGrid()
      self.obstacle_layers = []
      self.semantic_layers = []

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_3I().pack(_x.costmap.header.seq, _x.costmap.header.stamp.secs, _x.costmap.header.stamp.nsecs))
      _x = self.costmap.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_2If2I7d().pack(_x.costmap.info.map_load_time.secs, _x.costmap.info.map_load_time.nsecs, _x.costmap.info.resolution, _x.costmap.info.width, _x.costmap.info.height, _x.costmap.info.origin.position.x, _x.costmap.info.origin.position.y, _x.costmap.info.origin.position.z, _x.costmap.info.origin.orientation.x, _x.costmap.info.origin.orientation.y, _x.costmap.info.origin.orientation.z, _x.costmap.info.origin.orientation.w))
      length = len(self.costmap.data)
      buff.write(_struct_I.pack(length))
      pattern = '<%sb'%length
      buff.write(struct.Struct(pattern).pack(*self.costmap.data))
      length = len(self.obstacle_layers)
      buff.write(_struct_I.pack(length))
      for val1 in self.obstacle_layers:
        length = len(val1.scans)
        buff.write(_struct_I.pack(length))
        for val2 in val1.scans:
          _v1 = val2.header
          _x = _v1.seq
          buff.write(_get_struct_I().pack(_x))
          _v2 = _v1.stamp
          _x = _v2
          buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
          _x = _v1.frame_id
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
          _x = val2
          buff.write(_get_struct_2I().pack(_x.height, _x.width))
          length = len(val2.fields)
          buff.write(_struct_I.pack(length))
          for val3 in val2.fields:
            _x = val3.name
            length = len(_x)
            if python3 or type(_x) == unicode:
              _x = _x.encode('utf-8')
              length = len(_x)
            buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
            _x = val3
            buff.write(_get_struct_IBI().pack(_x.offset, _x.datatype, _x.count))
          _x = val2
          buff.write(_get_struct_B2I().pack(_x.is_bigendian, _x.point_step, _x.row_step))
          _x = val2.data
          length = len(_x)
          # - if encoded as a list instead, serialize as bytes instead of string
          if type(_x) in [list, tuple]:
            buff.write(struct.Struct('<I%sB'%length).pack(length, *_x))
          else:
            buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
          _x = val2.is_dense
          buff.write(_get_struct_B().pack(_x))
      length = len(self.semantic_layers)
      buff.write(_struct_I.pack(length))
      for val1 in self.semantic_layers:
        length = len(val1.layers)
        buff.write(_struct_I.pack(length))
        for val2 in val1.layers:
          _v3 = val2.header
          _x = _v3.seq
          buff.write(_get_struct_I().pack(_x))
          _v4 = _v3.stamp
          _x = _v4
          buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
          _x = _v3.frame_id
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
          length = len(val2.points)
          buff.write(_struct_I.pack(length))
          for val3 in val2.points:
            _v5 = val3.location
            _x = _v5
            buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
            _x = val3.evidence
            buff.write(_get_struct_f().pack(_x))
          _x = val2.type
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.costmap is None:
        self.costmap = nav_msgs.msg.OccupancyGrid()
      if self.obstacle_layers is None:
        self.obstacle_layers = None
      if self.semantic_layers is None:
        self.semantic_layers = None
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 12
      (_x.costmap.header.seq, _x.costmap.header.stamp.secs, _x.costmap.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.costmap.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.costmap.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 76
      (_x.costmap.info.map_load_time.secs, _x.costmap.info.map_load_time.nsecs, _x.costmap.info.resolution, _x.costmap.info.width, _x.costmap.info.height, _x.costmap.info.origin.position.x, _x.costmap.info.origin.position.y, _x.costmap.info.origin.position.z, _x.costmap.info.origin.orientation.x, _x.costmap.info.origin.orientation.y, _x.costmap.info.origin.orientation.z, _x.costmap.info.origin.orientation.w,) = _get_struct_2If2I7d().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sb'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.costmap.data = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.obstacle_layers = []
      for i in range(0, length):
        val1 = costmap_2d.msg.ObstacleDump()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.scans = []
        for i in range(0, length):
          val2 = sensor_msgs.msg.PointCloud2()
          _v6 = val2.header
          start = end
          end += 4
          (_v6.seq,) = _get_struct_I().unpack(str[start:end])
          _v7 = _v6.stamp
          _x = _v7
          start = end
          end += 8
          (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            _v6.frame_id = str[start:end].decode('utf-8', 'rosmsg')
          else:
            _v6.frame_id = str[start:end]
          _x = val2
          start = end
          end += 8
          (_x.height, _x.width,) = _get_struct_2I().unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          val2.fields = []
          for i in range(0, length):
            val3 = sensor_msgs.msg.PointField()
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            start = end
            end += length
            if python3:
              val3.name = str[start:end].decode('utf-8', 'rosmsg')
            else:
              val3.name = str[start:end]
            _x = val3
            start = end
            end += 9
            (_x.offset, _x.datatype, _x.count,) = _get_struct_IBI().unpack(str[start:end])
            val2.fields.append(val3)
          _x = val2
          start = end
          end += 9
          (_x.is_bigendian, _x.point_step, _x.row_step,) = _get_struct_B2I().unpack(str[start:end])
          val2.is_bigendian = bool(val2.is_bigendian)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          val2.data = str[start:end]
          start = end
          end += 1
          (val2.is_dense,) = _get_struct_B().unpack(str[start:end])
          val2.is_dense = bool(val2.is_dense)
          val1.scans.append(val2)
        self.obstacle_layers.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.semantic_layers = []
      for i in range(0, length):
        val1 = costmap_2d.msg.SemanticDump()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.layers = []
        for i in range(0, length):
          val2 = pedsim_msgs.msg.SemanticData()
          _v8 = val2.header
          start = end
          end += 4
          (_v8.seq,) = _get_struct_I().unpack(str[start:end])
          _v9 = _v8.stamp
          _x = _v9
          start = end
          end += 8
          (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            _v8.frame_id = str[start:end].decode('utf-8', 'rosmsg')
          else:
            _v8.frame_id = str[start:end]
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          val2.points = []
          for i in range(0, length):
            val3 = pedsim_msgs.msg.SemanticDatum()
            _v10 = val3.location
            _x = _v10
            start = end
            end += 24
            (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
            start = end
            end += 4
            (val3.evidence,) = _get_struct_f().unpack(str[start:end])
            val2.points.append(val3)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val2.type = str[start:end].decode('utf-8', 'rosmsg')
          else:
            val2.type = str[start:end]
          val1.layers.append(val2)
        self.semantic_layers.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_3I().pack(_x.costmap.header.seq, _x.costmap.header.stamp.secs, _x.costmap.header.stamp.nsecs))
      _x = self.costmap.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_2If2I7d().pack(_x.costmap.info.map_load_time.secs, _x.costmap.info.map_load_time.nsecs, _x.costmap.info.resolution, _x.costmap.info.width, _x.costmap.info.height, _x.costmap.info.origin.position.x, _x.costmap.info.origin.position.y, _x.costmap.info.origin.position.z, _x.costmap.info.origin.orientation.x, _x.costmap.info.origin.orientation.y, _x.costmap.info.origin.orientation.z, _x.costmap.info.origin.orientation.w))
      length = len(self.costmap.data)
      buff.write(_struct_I.pack(length))
      pattern = '<%sb'%length
      buff.write(self.costmap.data.tostring())
      length = len(self.obstacle_layers)
      buff.write(_struct_I.pack(length))
      for val1 in self.obstacle_layers:
        length = len(val1.scans)
        buff.write(_struct_I.pack(length))
        for val2 in val1.scans:
          _v11 = val2.header
          _x = _v11.seq
          buff.write(_get_struct_I().pack(_x))
          _v12 = _v11.stamp
          _x = _v12
          buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
          _x = _v11.frame_id
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
          _x = val2
          buff.write(_get_struct_2I().pack(_x.height, _x.width))
          length = len(val2.fields)
          buff.write(_struct_I.pack(length))
          for val3 in val2.fields:
            _x = val3.name
            length = len(_x)
            if python3 or type(_x) == unicode:
              _x = _x.encode('utf-8')
              length = len(_x)
            buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
            _x = val3
            buff.write(_get_struct_IBI().pack(_x.offset, _x.datatype, _x.count))
          _x = val2
          buff.write(_get_struct_B2I().pack(_x.is_bigendian, _x.point_step, _x.row_step))
          _x = val2.data
          length = len(_x)
          # - if encoded as a list instead, serialize as bytes instead of string
          if type(_x) in [list, tuple]:
            buff.write(struct.Struct('<I%sB'%length).pack(length, *_x))
          else:
            buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
          _x = val2.is_dense
          buff.write(_get_struct_B().pack(_x))
      length = len(self.semantic_layers)
      buff.write(_struct_I.pack(length))
      for val1 in self.semantic_layers:
        length = len(val1.layers)
        buff.write(_struct_I.pack(length))
        for val2 in val1.layers:
          _v13 = val2.header
          _x = _v13.seq
          buff.write(_get_struct_I().pack(_x))
          _v14 = _v13.stamp
          _x = _v14
          buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
          _x = _v13.frame_id
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
          length = len(val2.points)
          buff.write(_struct_I.pack(length))
          for val3 in val2.points:
            _v15 = val3.location
            _x = _v15
            buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
            _x = val3.evidence
            buff.write(_get_struct_f().pack(_x))
          _x = val2.type
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.costmap is None:
        self.costmap = nav_msgs.msg.OccupancyGrid()
      if self.obstacle_layers is None:
        self.obstacle_layers = None
      if self.semantic_layers is None:
        self.semantic_layers = None
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 12
      (_x.costmap.header.seq, _x.costmap.header.stamp.secs, _x.costmap.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.costmap.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.costmap.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 76
      (_x.costmap.info.map_load_time.secs, _x.costmap.info.map_load_time.nsecs, _x.costmap.info.resolution, _x.costmap.info.width, _x.costmap.info.height, _x.costmap.info.origin.position.x, _x.costmap.info.origin.position.y, _x.costmap.info.origin.position.z, _x.costmap.info.origin.orientation.x, _x.costmap.info.origin.orientation.y, _x.costmap.info.origin.orientation.z, _x.costmap.info.origin.orientation.w,) = _get_struct_2If2I7d().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sb'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.costmap.data = numpy.frombuffer(str[start:end], dtype=numpy.int8, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.obstacle_layers = []
      for i in range(0, length):
        val1 = costmap_2d.msg.ObstacleDump()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.scans = []
        for i in range(0, length):
          val2 = sensor_msgs.msg.PointCloud2()
          _v16 = val2.header
          start = end
          end += 4
          (_v16.seq,) = _get_struct_I().unpack(str[start:end])
          _v17 = _v16.stamp
          _x = _v17
          start = end
          end += 8
          (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            _v16.frame_id = str[start:end].decode('utf-8', 'rosmsg')
          else:
            _v16.frame_id = str[start:end]
          _x = val2
          start = end
          end += 8
          (_x.height, _x.width,) = _get_struct_2I().unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          val2.fields = []
          for i in range(0, length):
            val3 = sensor_msgs.msg.PointField()
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            start = end
            end += length
            if python3:
              val3.name = str[start:end].decode('utf-8', 'rosmsg')
            else:
              val3.name = str[start:end]
            _x = val3
            start = end
            end += 9
            (_x.offset, _x.datatype, _x.count,) = _get_struct_IBI().unpack(str[start:end])
            val2.fields.append(val3)
          _x = val2
          start = end
          end += 9
          (_x.is_bigendian, _x.point_step, _x.row_step,) = _get_struct_B2I().unpack(str[start:end])
          val2.is_bigendian = bool(val2.is_bigendian)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          val2.data = str[start:end]
          start = end
          end += 1
          (val2.is_dense,) = _get_struct_B().unpack(str[start:end])
          val2.is_dense = bool(val2.is_dense)
          val1.scans.append(val2)
        self.obstacle_layers.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.semantic_layers = []
      for i in range(0, length):
        val1 = costmap_2d.msg.SemanticDump()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.layers = []
        for i in range(0, length):
          val2 = pedsim_msgs.msg.SemanticData()
          _v18 = val2.header
          start = end
          end += 4
          (_v18.seq,) = _get_struct_I().unpack(str[start:end])
          _v19 = _v18.stamp
          _x = _v19
          start = end
          end += 8
          (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            _v18.frame_id = str[start:end].decode('utf-8', 'rosmsg')
          else:
            _v18.frame_id = str[start:end]
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          val2.points = []
          for i in range(0, length):
            val3 = pedsim_msgs.msg.SemanticDatum()
            _v20 = val3.location
            _x = _v20
            start = end
            end += 24
            (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
            start = end
            end += 4
            (val3.evidence,) = _get_struct_f().unpack(str[start:end])
            val2.points.append(val3)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val2.type = str[start:end].decode('utf-8', 'rosmsg')
          else:
            val2.type = str[start:end]
          val1.layers.append(val2)
        self.semantic_layers.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2I = None
def _get_struct_2I():
    global _struct_2I
    if _struct_2I is None:
        _struct_2I = struct.Struct("<2I")
    return _struct_2I
_struct_2If2I7d = None
def _get_struct_2If2I7d():
    global _struct_2If2I7d
    if _struct_2If2I7d is None:
        _struct_2If2I7d = struct.Struct("<2If2I7d")
    return _struct_2If2I7d
_struct_3I = None
def _get_struct_3I():
    global _struct_3I
    if _struct_3I is None:
        _struct_3I = struct.Struct("<3I")
    return _struct_3I
_struct_3d = None
def _get_struct_3d():
    global _struct_3d
    if _struct_3d is None:
        _struct_3d = struct.Struct("<3d")
    return _struct_3d
_struct_B = None
def _get_struct_B():
    global _struct_B
    if _struct_B is None:
        _struct_B = struct.Struct("<B")
    return _struct_B
_struct_B2I = None
def _get_struct_B2I():
    global _struct_B2I
    if _struct_B2I is None:
        _struct_B2I = struct.Struct("<B2I")
    return _struct_B2I
_struct_IBI = None
def _get_struct_IBI():
    global _struct_IBI
    if _struct_IBI is None:
        _struct_IBI = struct.Struct("<IBI")
    return _struct_IBI
_struct_f = None
def _get_struct_f():
    global _struct_f
    if _struct_f is None:
        _struct_f = struct.Struct("<f")
    return _struct_f
class GetDump(object):
  _type          = 'costmap_2d/GetDump'
  _md5sum = 'e8c4a22fca4ff331263a69635b5c452d'
  _request_class  = GetDumpRequest
  _response_class = GetDumpResponse
