# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from spencer_tracking_msgs/ImmDebugInfo.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class ImmDebugInfo(genpy.Message):
  _md5sum = "0b912dec630175f30dcd8c016e77c85f"
  _type = "spencer_tracking_msgs/ImmDebugInfo"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """# Message for passing debug information of filter performance
#

string      track_id        # unique identifier of the target, consistent over time
float64      innovation      # innovation of prediction and associated observation
float64      CpXX            # variance of prediction acc. to x
float64      CpYY            # variance of prediction acc. to y
float64      CXX             # variance of state acc. to x
float64      CYY             # variance of state acc. to y
float64[]    modeProbabilities# array containing mode probabilities"""
  __slots__ = ['track_id','innovation','CpXX','CpYY','CXX','CYY','modeProbabilities']
  _slot_types = ['string','float64','float64','float64','float64','float64','float64[]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       track_id,innovation,CpXX,CpYY,CXX,CYY,modeProbabilities

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(ImmDebugInfo, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.track_id is None:
        self.track_id = ''
      if self.innovation is None:
        self.innovation = 0.
      if self.CpXX is None:
        self.CpXX = 0.
      if self.CpYY is None:
        self.CpYY = 0.
      if self.CXX is None:
        self.CXX = 0.
      if self.CYY is None:
        self.CYY = 0.
      if self.modeProbabilities is None:
        self.modeProbabilities = []
    else:
      self.track_id = ''
      self.innovation = 0.
      self.CpXX = 0.
      self.CpYY = 0.
      self.CXX = 0.
      self.CYY = 0.
      self.modeProbabilities = []

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self.track_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_5d().pack(_x.innovation, _x.CpXX, _x.CpYY, _x.CXX, _x.CYY))
      length = len(self.modeProbabilities)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.Struct(pattern).pack(*self.modeProbabilities))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.track_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.track_id = str[start:end]
      _x = self
      start = end
      end += 40
      (_x.innovation, _x.CpXX, _x.CpYY, _x.CXX, _x.CYY,) = _get_struct_5d().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.modeProbabilities = s.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self.track_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_5d().pack(_x.innovation, _x.CpXX, _x.CpYY, _x.CXX, _x.CYY))
      length = len(self.modeProbabilities)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.modeProbabilities.tostring())
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.track_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.track_id = str[start:end]
      _x = self
      start = end
      end += 40
      (_x.innovation, _x.CpXX, _x.CpYY, _x.CXX, _x.CYY,) = _get_struct_5d().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.modeProbabilities = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_5d = None
def _get_struct_5d():
    global _struct_5d
    if _struct_5d is None:
        _struct_5d = struct.Struct("<5d")
    return _struct_5d
