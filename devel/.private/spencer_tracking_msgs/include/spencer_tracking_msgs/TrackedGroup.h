// Generated by gencpp from file spencer_tracking_msgs/TrackedGroup.msg
// DO NOT EDIT!


#ifndef SPENCER_TRACKING_MSGS_MESSAGE_TRACKEDGROUP_H
#define SPENCER_TRACKING_MSGS_MESSAGE_TRACKEDGROUP_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <geometry_msgs/PoseWithCovariance.h>

namespace spencer_tracking_msgs
{
template <class ContainerAllocator>
struct TrackedGroup_
{
  typedef TrackedGroup_<ContainerAllocator> Type;

  TrackedGroup_()
    : group_id()
    , age()
    , centerOfGravity()
    , track_ids()  {
    }
  TrackedGroup_(const ContainerAllocator& _alloc)
    : group_id(_alloc)
    , age()
    , centerOfGravity(_alloc)
    , track_ids(_alloc)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _group_id_type;
  _group_id_type group_id;

   typedef ros::Duration _age_type;
  _age_type age;

   typedef  ::geometry_msgs::PoseWithCovariance_<ContainerAllocator>  _centerOfGravity_type;
  _centerOfGravity_type centerOfGravity;

   typedef std::vector<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>> _track_ids_type;
  _track_ids_type track_ids;





  typedef boost::shared_ptr< ::spencer_tracking_msgs::TrackedGroup_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::spencer_tracking_msgs::TrackedGroup_<ContainerAllocator> const> ConstPtr;

}; // struct TrackedGroup_

typedef ::spencer_tracking_msgs::TrackedGroup_<std::allocator<void> > TrackedGroup;

typedef boost::shared_ptr< ::spencer_tracking_msgs::TrackedGroup > TrackedGroupPtr;
typedef boost::shared_ptr< ::spencer_tracking_msgs::TrackedGroup const> TrackedGroupConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::spencer_tracking_msgs::TrackedGroup_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::spencer_tracking_msgs::TrackedGroup_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::spencer_tracking_msgs::TrackedGroup_<ContainerAllocator1> & lhs, const ::spencer_tracking_msgs::TrackedGroup_<ContainerAllocator2> & rhs)
{
  return lhs.group_id == rhs.group_id &&
    lhs.age == rhs.age &&
    lhs.centerOfGravity == rhs.centerOfGravity &&
    lhs.track_ids == rhs.track_ids;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::spencer_tracking_msgs::TrackedGroup_<ContainerAllocator1> & lhs, const ::spencer_tracking_msgs::TrackedGroup_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace spencer_tracking_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::spencer_tracking_msgs::TrackedGroup_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::spencer_tracking_msgs::TrackedGroup_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::spencer_tracking_msgs::TrackedGroup_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::spencer_tracking_msgs::TrackedGroup_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::spencer_tracking_msgs::TrackedGroup_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::spencer_tracking_msgs::TrackedGroup_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::spencer_tracking_msgs::TrackedGroup_<ContainerAllocator> >
{
  static const char* value()
  {
    return "307666ffcb71239d6f69e386ce760e7a";
  }

  static const char* value(const ::spencer_tracking_msgs::TrackedGroup_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x307666ffcb71239dULL;
  static const uint64_t static_value2 = 0x6f69e386ce760e7aULL;
};

template<class ContainerAllocator>
struct DataType< ::spencer_tracking_msgs::TrackedGroup_<ContainerAllocator> >
{
  static const char* value()
  {
    return "spencer_tracking_msgs/TrackedGroup";
  }

  static const char* value(const ::spencer_tracking_msgs::TrackedGroup_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::spencer_tracking_msgs::TrackedGroup_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# Message defining a tracked group\n"
"#\n"
"\n"
"string      group_id        # unique identifier of the target, consistent over time\n"
"\n"
"duration    age             # age of the group\n"
"\n"
"geometry_msgs/PoseWithCovariance    centerOfGravity   # mean and covariance of the group (calculated from its person tracks)\n"
"\n"
"string[]    track_ids       # IDs of the tracked persons in this group. See srl_tracking_msgs/TrackedPersons\n"
"================================================================================\n"
"MSG: geometry_msgs/PoseWithCovariance\n"
"# This represents a pose in free space with uncertainty.\n"
"\n"
"Pose pose\n"
"\n"
"# Row-major representation of the 6x6 covariance matrix\n"
"# The orientation parameters use a fixed-axis representation.\n"
"# In order, the parameters are:\n"
"# (x, y, z, rotation about X axis, rotation about Y axis, rotation about Z axis)\n"
"float64[36] covariance\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Pose\n"
"# A representation of pose in free space, composed of position and orientation. \n"
"Point position\n"
"Quaternion orientation\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Point\n"
"# This contains the position of a point in free space\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Quaternion\n"
"# This represents an orientation in free space in quaternion form.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"float64 w\n"
;
  }

  static const char* value(const ::spencer_tracking_msgs::TrackedGroup_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::spencer_tracking_msgs::TrackedGroup_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.group_id);
      stream.next(m.age);
      stream.next(m.centerOfGravity);
      stream.next(m.track_ids);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct TrackedGroup_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::spencer_tracking_msgs::TrackedGroup_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::spencer_tracking_msgs::TrackedGroup_<ContainerAllocator>& v)
  {
    s << indent << "group_id: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.group_id);
    s << indent << "age: ";
    Printer<ros::Duration>::stream(s, indent + "  ", v.age);
    s << indent << "centerOfGravity: ";
    s << std::endl;
    Printer< ::geometry_msgs::PoseWithCovariance_<ContainerAllocator> >::stream(s, indent + "  ", v.centerOfGravity);
    s << indent << "track_ids[]" << std::endl;
    for (size_t i = 0; i < v.track_ids.size(); ++i)
    {
      s << indent << "  track_ids[" << i << "]: ";
      Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.track_ids[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // SPENCER_TRACKING_MSGS_MESSAGE_TRACKEDGROUP_H
